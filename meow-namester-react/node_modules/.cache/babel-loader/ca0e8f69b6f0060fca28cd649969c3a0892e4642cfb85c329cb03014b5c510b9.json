{"ast":null,"code":"var _s = $RefreshSig$();\n/**\n * @module useUserSession\n * @description A custom React hook that manages user session state and authentication.\n * Handles user login/logout and persists user data in both localStorage and Supabase.\n * \n * @example\n * // Using the hook in a component\n * const { userName, isLoggedIn, error, login, logout } = useUserSession();\n * \n * // Login a user\n * await login('JohnDoe');\n * \n * // Logout\n * await logout();\n * \n * @returns {Object} Session management object\n * @property {string} userName - Current user's username\n * @property {boolean} isLoggedIn - Whether a user is currently logged in\n * @property {string|null} error - Any error message from login/logout operations\n * @property {Function} login - Async function to log in a user\n * @property {Function} logout - Async function to log out the current user\n */\n\nimport { useState, useEffect } from 'react';\nimport { supabase } from '../supabase/supabaseClient';\nfunction useUserSession() {\n  _s();\n  const [userName, setUserName] = useState('');\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const storedUser = localStorage.getItem('catNamesUser');\n    if (storedUser) {\n      console.log('Found stored user:', storedUser);\n      setUserName(storedUser);\n      setIsLoggedIn(true);\n    } else {\n      console.log('No stored user found');\n    }\n  }, []);\n\n  /**\n   * Logs in a user with the given name\n   * @param {string} name - The username to login with\n   * @throws {Error} If the name is invalid or if there's a database error\n   */\n  const login = async name => {\n    try {\n      console.log('Attempting to login with name:', name);\n      if (!name || typeof name !== 'string' || name.trim() === '') {\n        console.error('Invalid name provided');\n        throw new Error('Please enter a valid name');\n      }\n      const trimmedName = name.trim();\n      console.log('Trimmed name:', trimmedName);\n\n      // Create/update user in app_users table\n      const {\n        data: userData,\n        error: upsertError\n      } = await supabase.from('app_users').insert({\n        user_name: trimmedName,\n        created_at: new Date().toISOString()\n      }).select().single();\n      if (upsertError) {\n        // If insert fails due to unique constraint, user already exists\n        if (upsertError.code === '23505') {\n          console.log('User already exists, proceeding with login');\n        } else {\n          console.error('Error creating user:', upsertError);\n          throw upsertError;\n        }\n      }\n      console.log('User data:', userData);\n      localStorage.setItem('catNamesUser', trimmedName);\n      setUserName(trimmedName);\n      setIsLoggedIn(true);\n      setError(null);\n      console.log('Login successful. Current user:', trimmedName);\n    } catch (err) {\n      console.error('Login error:', err);\n      setError(err.message);\n      throw err;\n    }\n  };\n\n  /**\n   * Logs out the current user\n   * Clears local storage and resets session state\n   */\n  const logout = async () => {\n    console.log('Logging out user:', userName);\n    localStorage.removeItem('catNamesUser');\n    setUserName('');\n    setIsLoggedIn(false);\n    setError(null);\n    console.log('Logout complete');\n  };\n\n  // Add a debug log whenever userName changes\n  useEffect(() => {\n    console.log('Current user session state:', {\n      userName,\n      isLoggedIn,\n      error\n    });\n  }, [userName, isLoggedIn, error]);\n  return {\n    userName,\n    isLoggedIn,\n    error,\n    login,\n    logout\n  };\n}\n_s(useUserSession, \"oXllu0LtvJCpVQt8RJ07Azoq0Kk=\");\nexport default useUserSession;","map":{"version":3,"names":["useState","useEffect","supabase","useUserSession","_s","userName","setUserName","isLoggedIn","setIsLoggedIn","error","setError","storedUser","localStorage","getItem","console","log","login","name","trim","Error","trimmedName","data","userData","upsertError","from","insert","user_name","created_at","Date","toISOString","select","single","code","setItem","err","message","logout","removeItem"],"sources":["/Users/aaron/Desktop/Side Projects/name-picker/meow-namester-react/src/hooks/useUserSession.js"],"sourcesContent":["/**\n * @module useUserSession\n * @description A custom React hook that manages user session state and authentication.\n * Handles user login/logout and persists user data in both localStorage and Supabase.\n * \n * @example\n * // Using the hook in a component\n * const { userName, isLoggedIn, error, login, logout } = useUserSession();\n * \n * // Login a user\n * await login('JohnDoe');\n * \n * // Logout\n * await logout();\n * \n * @returns {Object} Session management object\n * @property {string} userName - Current user's username\n * @property {boolean} isLoggedIn - Whether a user is currently logged in\n * @property {string|null} error - Any error message from login/logout operations\n * @property {Function} login - Async function to log in a user\n * @property {Function} logout - Async function to log out the current user\n */\n\nimport { useState, useEffect } from 'react';\nimport { supabase } from '../supabase/supabaseClient';\n\nfunction useUserSession() {\n  const [userName, setUserName] = useState('');\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const storedUser = localStorage.getItem('catNamesUser');\n    if (storedUser) {\n      console.log('Found stored user:', storedUser);\n      setUserName(storedUser);\n      setIsLoggedIn(true);\n    } else {\n      console.log('No stored user found');\n    }\n  }, []);\n\n  /**\n   * Logs in a user with the given name\n   * @param {string} name - The username to login with\n   * @throws {Error} If the name is invalid or if there's a database error\n   */\n  const login = async (name) => {\n    try {\n      console.log('Attempting to login with name:', name);\n      \n      if (!name || typeof name !== 'string' || name.trim() === '') {\n        console.error('Invalid name provided');\n        throw new Error('Please enter a valid name');\n      }\n      \n      const trimmedName = name.trim();\n      console.log('Trimmed name:', trimmedName);\n\n      // Create/update user in app_users table\n      const { data: userData, error: upsertError } = await supabase\n        .from('app_users')\n        .insert({ \n          user_name: trimmedName,\n          created_at: new Date().toISOString()\n        })\n        .select()\n        .single();\n\n      if (upsertError) {\n        // If insert fails due to unique constraint, user already exists\n        if (upsertError.code === '23505') {\n          console.log('User already exists, proceeding with login');\n        } else {\n          console.error('Error creating user:', upsertError);\n          throw upsertError;\n        }\n      }\n\n      console.log('User data:', userData);\n\n      localStorage.setItem('catNamesUser', trimmedName);\n      setUserName(trimmedName);\n      setIsLoggedIn(true);\n      setError(null);\n      \n      console.log('Login successful. Current user:', trimmedName);\n    } catch (err) {\n      console.error('Login error:', err);\n      setError(err.message);\n      throw err;\n    }\n  };\n\n  /**\n   * Logs out the current user\n   * Clears local storage and resets session state\n   */\n  const logout = async () => {\n    console.log('Logging out user:', userName);\n    localStorage.removeItem('catNamesUser');\n    setUserName('');\n    setIsLoggedIn(false);\n    setError(null);\n    console.log('Logout complete');\n  };\n\n  // Add a debug log whenever userName changes\n  useEffect(() => {\n    console.log('Current user session state:', {\n      userName,\n      isLoggedIn,\n      error\n    });\n  }, [userName, isLoggedIn, error]);\n\n  return {\n    userName,\n    isLoggedIn,\n    error,\n    login,\n    logout\n  };\n}\n\nexport default useUserSession; "],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,QAAQ,QAAQ,4BAA4B;AAErD,SAASC,cAAcA,CAAA,EAAG;EAAAC,EAAA;EACxB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACO,UAAU,EAAEC,aAAa,CAAC,GAAGR,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAM,CAACS,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAExCC,SAAS,CAAC,MAAM;IACd,MAAMU,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;IACvD,IAAIF,UAAU,EAAE;MACdG,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEJ,UAAU,CAAC;MAC7CL,WAAW,CAACK,UAAU,CAAC;MACvBH,aAAa,CAAC,IAAI,CAAC;IACrB,CAAC,MAAM;MACLM,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC;IACrC;EACF,CAAC,EAAE,EAAE,CAAC;;EAEN;AACF;AACA;AACA;AACA;EACE,MAAMC,KAAK,GAAG,MAAOC,IAAI,IAAK;IAC5B,IAAI;MACFH,OAAO,CAACC,GAAG,CAAC,gCAAgC,EAAEE,IAAI,CAAC;MAEnD,IAAI,CAACA,IAAI,IAAI,OAAOA,IAAI,KAAK,QAAQ,IAAIA,IAAI,CAACC,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;QAC3DJ,OAAO,CAACL,KAAK,CAAC,uBAAuB,CAAC;QACtC,MAAM,IAAIU,KAAK,CAAC,2BAA2B,CAAC;MAC9C;MAEA,MAAMC,WAAW,GAAGH,IAAI,CAACC,IAAI,CAAC,CAAC;MAC/BJ,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEK,WAAW,CAAC;;MAEzC;MACA,MAAM;QAAEC,IAAI,EAAEC,QAAQ;QAAEb,KAAK,EAAEc;MAAY,CAAC,GAAG,MAAMrB,QAAQ,CAC1DsB,IAAI,CAAC,WAAW,CAAC,CACjBC,MAAM,CAAC;QACNC,SAAS,EAAEN,WAAW;QACtBO,UAAU,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;MACrC,CAAC,CAAC,CACDC,MAAM,CAAC,CAAC,CACRC,MAAM,CAAC,CAAC;MAEX,IAAIR,WAAW,EAAE;QACf;QACA,IAAIA,WAAW,CAACS,IAAI,KAAK,OAAO,EAAE;UAChClB,OAAO,CAACC,GAAG,CAAC,4CAA4C,CAAC;QAC3D,CAAC,MAAM;UACLD,OAAO,CAACL,KAAK,CAAC,sBAAsB,EAAEc,WAAW,CAAC;UAClD,MAAMA,WAAW;QACnB;MACF;MAEAT,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEO,QAAQ,CAAC;MAEnCV,YAAY,CAACqB,OAAO,CAAC,cAAc,EAAEb,WAAW,CAAC;MACjDd,WAAW,CAACc,WAAW,CAAC;MACxBZ,aAAa,CAAC,IAAI,CAAC;MACnBE,QAAQ,CAAC,IAAI,CAAC;MAEdI,OAAO,CAACC,GAAG,CAAC,iCAAiC,EAAEK,WAAW,CAAC;IAC7D,CAAC,CAAC,OAAOc,GAAG,EAAE;MACZpB,OAAO,CAACL,KAAK,CAAC,cAAc,EAAEyB,GAAG,CAAC;MAClCxB,QAAQ,CAACwB,GAAG,CAACC,OAAO,CAAC;MACrB,MAAMD,GAAG;IACX;EACF,CAAC;;EAED;AACF;AACA;AACA;EACE,MAAME,MAAM,GAAG,MAAAA,CAAA,KAAY;IACzBtB,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEV,QAAQ,CAAC;IAC1CO,YAAY,CAACyB,UAAU,CAAC,cAAc,CAAC;IACvC/B,WAAW,CAAC,EAAE,CAAC;IACfE,aAAa,CAAC,KAAK,CAAC;IACpBE,QAAQ,CAAC,IAAI,CAAC;IACdI,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAC;EAChC,CAAC;;EAED;EACAd,SAAS,CAAC,MAAM;IACda,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAE;MACzCV,QAAQ;MACRE,UAAU;MACVE;IACF,CAAC,CAAC;EACJ,CAAC,EAAE,CAACJ,QAAQ,EAAEE,UAAU,EAAEE,KAAK,CAAC,CAAC;EAEjC,OAAO;IACLJ,QAAQ;IACRE,UAAU;IACVE,KAAK;IACLO,KAAK;IACLoB;EACF,CAAC;AACH;AAAChC,EAAA,CAjGQD,cAAc;AAmGvB,eAAeA,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}