{"ast":null,"code":"/**\n * @module supabaseClient\n * @description Configures and exports the Supabase client instance.\n * Sets up the connection to Supabase with proper authentication and headers.\n * \n * @example\n * // Import and use the client\n * import { supabase } from './supabaseClient';\n * \n * // Make a query\n * const { data, error } = await supabase\n *   .from('table_name')\n *   .select('*');\n * \n * @requires REACT_APP_SUPABASE_URL - Environment variable for Supabase project URL\n * @requires REACT_APP_SUPABASE_ANON_KEY - Environment variable for Supabase anonymous key\n */\n\nimport { createClient } from '@supabase/supabase-js';\nconst supabaseUrl = process.env.REACT_APP_SUPABASE_URL;\nconst supabaseAnonKey = process.env.REACT_APP_SUPABASE_ANON_KEY;\nif (!supabaseUrl || !supabaseAnonKey) {\n  throw new Error('Missing Supabase environment variables. Please check your .env file.');\n}\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey);\n\n// Add this function to get names with descriptions\nexport const getNamesWithDescriptions = async () => {\n  try {\n    const {\n      data,\n      error\n    } = await supabase.from('name_options').select('name, description').order('name');\n    if (error) throw error;\n\n    // Log the data to see what we're getting\n    console.log('Fetched names with descriptions:', data);\n\n    // Ensure each item has both name and description\n    return data.map(item => ({\n      name: item.name,\n      description: item.description || 'No description available'\n    }));\n  } catch (error) {\n    console.error('Error fetching names:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["createClient","supabaseUrl","process","env","REACT_APP_SUPABASE_URL","supabaseAnonKey","REACT_APP_SUPABASE_ANON_KEY","Error","supabase","getNamesWithDescriptions","data","error","from","select","order","console","log","map","item","name","description"],"sources":["/Users/aaron/Desktop/Side Projects/name-picker/meow-namester-react/src/supabase/supabaseClient.js"],"sourcesContent":["/**\n * @module supabaseClient\n * @description Configures and exports the Supabase client instance.\n * Sets up the connection to Supabase with proper authentication and headers.\n * \n * @example\n * // Import and use the client\n * import { supabase } from './supabaseClient';\n * \n * // Make a query\n * const { data, error } = await supabase\n *   .from('table_name')\n *   .select('*');\n * \n * @requires REACT_APP_SUPABASE_URL - Environment variable for Supabase project URL\n * @requires REACT_APP_SUPABASE_ANON_KEY - Environment variable for Supabase anonymous key\n */\n\nimport { createClient } from '@supabase/supabase-js';\n\nconst supabaseUrl = process.env.REACT_APP_SUPABASE_URL;\nconst supabaseAnonKey = process.env.REACT_APP_SUPABASE_ANON_KEY;\n\nif (!supabaseUrl || !supabaseAnonKey) {\n  throw new Error('Missing Supabase environment variables. Please check your .env file.');\n}\n\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey);\n\n// Add this function to get names with descriptions\nexport const getNamesWithDescriptions = async () => {\n  try {\n    const { data, error } = await supabase\n      .from('name_options')\n      .select('name, description')\n      .order('name');\n      \n    if (error) throw error;\n    \n    // Log the data to see what we're getting\n    console.log('Fetched names with descriptions:', data);\n    \n    // Ensure each item has both name and description\n    return data.map(item => ({\n      name: item.name,\n      description: item.description || 'No description available'\n    }));\n  } catch (error) {\n    console.error('Error fetching names:', error);\n    throw error;\n  }\n};"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,YAAY,QAAQ,uBAAuB;AAEpD,MAAMC,WAAW,GAAGC,OAAO,CAACC,GAAG,CAACC,sBAAsB;AACtD,MAAMC,eAAe,GAAGH,OAAO,CAACC,GAAG,CAACG,2BAA2B;AAE/D,IAAI,CAACL,WAAW,IAAI,CAACI,eAAe,EAAE;EACpC,MAAM,IAAIE,KAAK,CAAC,sEAAsE,CAAC;AACzF;AAEA,OAAO,MAAMC,QAAQ,GAAGR,YAAY,CAACC,WAAW,EAAEI,eAAe,CAAC;;AAElE;AACA,OAAO,MAAMI,wBAAwB,GAAG,MAAAA,CAAA,KAAY;EAClD,IAAI;IACF,MAAM;MAAEC,IAAI;MAAEC;IAAM,CAAC,GAAG,MAAMH,QAAQ,CACnCI,IAAI,CAAC,cAAc,CAAC,CACpBC,MAAM,CAAC,mBAAmB,CAAC,CAC3BC,KAAK,CAAC,MAAM,CAAC;IAEhB,IAAIH,KAAK,EAAE,MAAMA,KAAK;;IAEtB;IACAI,OAAO,CAACC,GAAG,CAAC,kCAAkC,EAAEN,IAAI,CAAC;;IAErD;IACA,OAAOA,IAAI,CAACO,GAAG,CAACC,IAAI,KAAK;MACvBC,IAAI,EAAED,IAAI,CAACC,IAAI;MACfC,WAAW,EAAEF,IAAI,CAACE,WAAW,IAAI;IACnC,CAAC,CAAC,CAAC;EACL,CAAC,CAAC,OAAOT,KAAK,EAAE;IACdI,OAAO,CAACJ,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC7C,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}