{"ast":null,"code":"var _jsxFileName = \"/Users/aaron/Desktop/Side Projects/name-picker/meow-namester-react/src/App.js\",\n  _s = $RefreshSig$();\n/**\n * @module App\n * @description Main application component for the cat name tournament app.\n * Manages the overall application state and tournament flow, including:\n * - Name input and management\n * - Tournament progression\n * - Rating calculations\n * - Results display\n * \n * Uses the Elo rating system for ranking and a custom sorting algorithm\n * for determining the best cat name through user preferences.\n * \n * @component\n * @returns {JSX.Element} The complete application UI\n */\n\nimport React, { useState } from 'react';\nimport { Tournament, Results, ErrorBoundary, Login, Profile, TournamentSetup } from './components';\nimport useUserSession from './hooks/useUserSession';\nimport useSupabaseStorage from './supabase/useSupabaseStorage';\nimport { supabase } from './supabase/supabaseClient';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const {\n    userName,\n    isLoggedIn,\n    login,\n    logout,\n    session\n  } = useUserSession();\n  const [ratings, setRatings] = useState({});\n  const [view, setView] = useState('tournament');\n  const [tournamentComplete, setTournamentComplete] = useState(false);\n  const [tournamentNames, setTournamentNames] = useState(null);\n  console.log('App - Current ratings:', ratings);\n  console.log('App - Tournament names:', tournamentNames);\n  const handleTournamentComplete = finalRatings => {\n    // Merge new ratings with existing ones, preserving wins/losses and name_id\n    const updatedRatings = {\n      ...ratings\n    };\n    finalRatings.forEach(({\n      name,\n      rating\n    }) => {\n      const existingRating = typeof updatedRatings[name] === 'object' ? updatedRatings[name] : {\n        rating: updatedRatings[name] || 1500,\n        wins: 0,\n        losses: 0\n      };\n\n      // If rating improved, count as a win, otherwise a loss\n      const isImprovement = rating > (existingRating.rating || 1500);\n\n      // Generate a UUID if one doesn't exist\n      const nameId = existingRating.name_id || crypto.randomUUID();\n      updatedRatings[name] = {\n        name_id: nameId,\n        rating: Math.round(rating),\n        wins: (existingRating.wins || 0) + (isImprovement ? 1 : 0),\n        losses: (existingRating.losses || 0) + (isImprovement ? 0 : 1)\n      };\n    });\n\n    // Update the ratings state\n    setRatings(updatedRatings);\n    setTournamentComplete(true);\n\n    // Persist to database\n    const updateRatings = async () => {\n      try {\n        // First try to delete existing records that have valid UUIDs\n        const existingIds = Object.values(updatedRatings).map(data => data.name_id).filter(id => id && /^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i.test(id));\n        if (existingIds.length > 0) {\n          const {\n            error: deleteError\n          } = await supabase.from('cat_name_ratings').delete().in('name_id', existingIds);\n          if (deleteError) {\n            console.warn('Error deleting existing ratings:', deleteError);\n          }\n        }\n\n        // Then insert new records\n        const {\n          error: insertError\n        } = await supabase.from('cat_name_ratings').insert(Object.entries(updatedRatings).map(([name, data]) => ({\n          name_id: data.name_id,\n          name: name,\n          // Store the actual name as well\n          rating: data.rating,\n          wins: data.wins,\n          losses: data.losses,\n          updated_at: new Date().toISOString()\n        })));\n        if (insertError) throw insertError;\n      } catch (error) {\n        console.error('Error updating tournament ratings:', error);\n      }\n    };\n\n    // Execute the update\n    updateRatings();\n  };\n  const handleStartNewTournament = () => {\n    setTournamentComplete(false);\n    setTournamentNames(null);\n    setView('tournament');\n  };\n  const handleTournamentSetup = names => {\n    console.log('App - Setting up tournament with names:', names);\n    setTournamentNames(names);\n  };\n  const handleUpdateRatings = adjustedRatings => {\n    // Convert array to object format and merge with existing ratings\n    const updatedRatings = {\n      ...ratings\n    };\n    adjustedRatings.forEach(({\n      name,\n      rating,\n      wins,\n      losses\n    }) => {\n      const existingRating = typeof updatedRatings[name] === 'object' ? updatedRatings[name] : {\n        rating: updatedRatings[name] || 1500,\n        wins: 0,\n        losses: 0\n      };\n      updatedRatings[name] = {\n        name_id: existingRating.name_id,\n        // This should be the UUID from name_options table\n        rating: Math.round(rating),\n        wins: wins || existingRating.wins || 0,\n        losses: losses || existingRating.losses || 0\n      };\n    });\n    setRatings(updatedRatings);\n\n    // Update ratings in Supabase\n    const updateRatings = async () => {\n      try {\n        // Get the current user's name\n        const {\n          data: {\n            user\n          }\n        } = await supabase.auth.getUser();\n        if (!user) throw new Error('User not authenticated');\n\n        // First, get name_ids from name_options table\n        const {\n          data: nameOptions,\n          error: nameError\n        } = await supabase.from('name_options').select('id, name').in('name', Object.keys(updatedRatings));\n        if (nameError) throw nameError;\n\n        // Create a map of name to name_id\n        const nameToIdMap = nameOptions.reduce((acc, {\n          id,\n          name\n        }) => {\n          acc[name] = id;\n          return acc;\n        }, {});\n\n        // Prepare records with proper name_ids\n        const recordsToUpsert = Object.entries(updatedRatings).map(([name, data]) => ({\n          user_name: user.id,\n          name_id: nameToIdMap[name],\n          rating: data.rating,\n          wins: data.wins || 0,\n          losses: data.losses || 0,\n          updated_at: new Date().toISOString()\n        })).filter(record => record.name_id); // Only include records with valid name_ids\n\n        // Use upsert operation (insert or update based on primary key)\n        const {\n          error: upsertError\n        } = await supabase.from('cat_name_ratings').upsert(recordsToUpsert, {\n          onConflict: 'user_name,name_id'\n        });\n        if (upsertError) throw upsertError;\n      } catch (error) {\n        console.error('Error updating ratings:', error);\n        throw error;\n      }\n    };\n\n    // Execute the update\n    updateRatings();\n  };\n  const handleLogout = async () => {\n    logout();\n  };\n  if (!isLoggedIn) {\n    return /*#__PURE__*/_jsxDEV(Login, {\n      onLogin: login\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 12\n    }, this);\n  }\n  const renderMainContent = () => {\n    if (view === 'profile') {\n      return /*#__PURE__*/_jsxDEV(Profile, {\n        userName: userName,\n        onStartNewTournament: handleStartNewTournament,\n        ratings: ratings,\n        onUpdateRatings: handleUpdateRatings\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 9\n      }, this);\n    }\n    if (tournamentComplete) {\n      return /*#__PURE__*/_jsxDEV(Results, {\n        ratings: ratings,\n        onStartNew: handleStartNewTournament,\n        userName: userName,\n        onUpdateRatings: handleUpdateRatings,\n        currentTournamentNames: tournamentNames\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 9\n      }, this);\n    }\n    if (!tournamentNames) {\n      return /*#__PURE__*/_jsxDEV(TournamentSetup, {\n        onStart: handleTournamentSetup,\n        userName: userName,\n        existingRatings: ratings\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 9\n      }, this);\n    }\n    return /*#__PURE__*/_jsxDEV(Tournament, {\n      onComplete: handleTournamentComplete,\n      existingRatings: ratings,\n      names: tournamentNames,\n      userName: userName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-background\",\n        style: {\n          backgroundImage: `url(${process.env.PUBLIC_URL}/images/cat.gif)`\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: `${process.env.PUBLIC_URL}/images/cat.gif`,\n        alt: \"Cat animation\",\n        className: \"header-image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Cat Name Picker\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"user-controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"nav-menu\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setView('tournament'),\n            className: view === 'tournament' ? 'active' : '',\n            children: \"Tournament\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 252,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setView('profile'),\n            className: view === 'profile' ? 'active' : '',\n            children: \"My Profile\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 258,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"user-welcome\",\n          children: [\"Welcome, \", userName, \"!\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 265,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleLogout,\n          className: \"logout-button\",\n          children: \"Logout\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: /*#__PURE__*/_jsxDEV(ErrorBoundary, {\n        children: renderMainContent()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 240,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"E84eBk8RR1At08JZ0cGFZmYQ3Qc=\", false, function () {\n  return [useUserSession];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Tournament","Results","ErrorBoundary","Login","Profile","TournamentSetup","useUserSession","useSupabaseStorage","supabase","jsxDEV","_jsxDEV","App","_s","userName","isLoggedIn","login","logout","session","ratings","setRatings","view","setView","tournamentComplete","setTournamentComplete","tournamentNames","setTournamentNames","console","log","handleTournamentComplete","finalRatings","updatedRatings","forEach","name","rating","existingRating","wins","losses","isImprovement","nameId","name_id","crypto","randomUUID","Math","round","updateRatings","existingIds","Object","values","map","data","filter","id","test","length","error","deleteError","from","delete","in","warn","insertError","insert","entries","updated_at","Date","toISOString","handleStartNewTournament","handleTournamentSetup","names","handleUpdateRatings","adjustedRatings","user","auth","getUser","Error","nameOptions","nameError","select","keys","nameToIdMap","reduce","acc","recordsToUpsert","user_name","record","upsertError","upsert","onConflict","handleLogout","onLogin","fileName","_jsxFileName","lineNumber","columnNumber","renderMainContent","onStartNewTournament","onUpdateRatings","onStartNew","currentTournamentNames","onStart","existingRatings","onComplete","className","children","style","backgroundImage","process","env","PUBLIC_URL","src","alt","onClick","_c","$RefreshReg$"],"sources":["/Users/aaron/Desktop/Side Projects/name-picker/meow-namester-react/src/App.js"],"sourcesContent":["/**\n * @module App\n * @description Main application component for the cat name tournament app.\n * Manages the overall application state and tournament flow, including:\n * - Name input and management\n * - Tournament progression\n * - Rating calculations\n * - Results display\n * \n * Uses the Elo rating system for ranking and a custom sorting algorithm\n * for determining the best cat name through user preferences.\n * \n * @component\n * @returns {JSX.Element} The complete application UI\n */\n\nimport React, { useState } from 'react';\nimport { \n  Tournament, \n  Results, \n  ErrorBoundary,\n  Login,\n  Profile,\n  TournamentSetup\n} from './components';\nimport useUserSession from './hooks/useUserSession';\nimport useSupabaseStorage from './supabase/useSupabaseStorage';\nimport { supabase } from './supabase/supabaseClient';\n\nfunction App() {\n  const { userName, isLoggedIn, login, logout, session } = useUserSession();\n  const [ratings, setRatings] = useState({});\n  const [view, setView] = useState('tournament');\n  const [tournamentComplete, setTournamentComplete] = useState(false);\n  const [tournamentNames, setTournamentNames] = useState(null);\n\n  console.log('App - Current ratings:', ratings);\n  console.log('App - Tournament names:', tournamentNames);\n\n  const handleTournamentComplete = (finalRatings) => {\n    // Merge new ratings with existing ones, preserving wins/losses and name_id\n    const updatedRatings = { ...ratings };\n    finalRatings.forEach(({ name, rating }) => {\n      const existingRating = typeof updatedRatings[name] === 'object' \n        ? updatedRatings[name] \n        : { rating: updatedRatings[name] || 1500, wins: 0, losses: 0 };\n      \n      // If rating improved, count as a win, otherwise a loss\n      const isImprovement = rating > (existingRating.rating || 1500);\n      \n      // Generate a UUID if one doesn't exist\n      const nameId = existingRating.name_id || crypto.randomUUID();\n      \n      updatedRatings[name] = {\n        name_id: nameId,\n        rating: Math.round(rating),\n        wins: (existingRating.wins || 0) + (isImprovement ? 1 : 0),\n        losses: (existingRating.losses || 0) + (isImprovement ? 0 : 1)\n      };\n    });\n\n    // Update the ratings state\n    setRatings(updatedRatings);\n    setTournamentComplete(true);\n\n    // Persist to database\n    const updateRatings = async () => {\n      try {\n        // First try to delete existing records that have valid UUIDs\n        const existingIds = Object.values(updatedRatings)\n          .map(data => data.name_id)\n          .filter(id => id && /^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i.test(id));\n\n        if (existingIds.length > 0) {\n          const { error: deleteError } = await supabase\n            .from('cat_name_ratings')\n            .delete()\n            .in('name_id', existingIds);\n\n          if (deleteError) {\n            console.warn('Error deleting existing ratings:', deleteError);\n          }\n        }\n\n        // Then insert new records\n        const { error: insertError } = await supabase\n          .from('cat_name_ratings')\n          .insert(\n            Object.entries(updatedRatings).map(([name, data]) => ({\n              name_id: data.name_id,\n              name: name,  // Store the actual name as well\n              rating: data.rating,\n              wins: data.wins,\n              losses: data.losses,\n              updated_at: new Date().toISOString()\n            }))\n          );\n\n        if (insertError) throw insertError;\n      } catch (error) {\n        console.error('Error updating tournament ratings:', error);\n      }\n    };\n\n    // Execute the update\n    updateRatings();\n  };\n\n  const handleStartNewTournament = () => {\n    setTournamentComplete(false);\n    setTournamentNames(null);\n    setView('tournament');\n  };\n\n  const handleTournamentSetup = (names) => {\n    console.log('App - Setting up tournament with names:', names);\n    setTournamentNames(names);\n  };\n\n  const handleUpdateRatings = (adjustedRatings) => {\n    // Convert array to object format and merge with existing ratings\n    const updatedRatings = { ...ratings };\n    adjustedRatings.forEach(({ name, rating, wins, losses }) => {\n      const existingRating = typeof updatedRatings[name] === 'object'\n        ? updatedRatings[name]\n        : { rating: updatedRatings[name] || 1500, wins: 0, losses: 0 };\n\n      updatedRatings[name] = {\n        name_id: existingRating.name_id,  // This should be the UUID from name_options table\n        rating: Math.round(rating),\n        wins: wins || existingRating.wins || 0,\n        losses: losses || existingRating.losses || 0\n      };\n    });\n\n    setRatings(updatedRatings);\n\n    // Update ratings in Supabase\n    const updateRatings = async () => {\n      try {\n        // Get the current user's name\n        const { data: { user } } = await supabase.auth.getUser();\n        if (!user) throw new Error('User not authenticated');\n\n        // First, get name_ids from name_options table\n        const { data: nameOptions, error: nameError } = await supabase\n          .from('name_options')\n          .select('id, name')\n          .in('name', Object.keys(updatedRatings));\n\n        if (nameError) throw nameError;\n\n        // Create a map of name to name_id\n        const nameToIdMap = nameOptions.reduce((acc, { id, name }) => {\n          acc[name] = id;\n          return acc;\n        }, {});\n\n        // Prepare records with proper name_ids\n        const recordsToUpsert = Object.entries(updatedRatings).map(([name, data]) => ({\n          user_name: user.id,\n          name_id: nameToIdMap[name],\n          rating: data.rating,\n          wins: data.wins || 0,\n          losses: data.losses || 0,\n          updated_at: new Date().toISOString()\n        })).filter(record => record.name_id); // Only include records with valid name_ids\n\n        // Use upsert operation (insert or update based on primary key)\n        const { error: upsertError } = await supabase\n          .from('cat_name_ratings')\n          .upsert(recordsToUpsert, {\n            onConflict: 'user_name,name_id'\n          });\n\n        if (upsertError) throw upsertError;\n      } catch (error) {\n        console.error('Error updating ratings:', error);\n        throw error;\n      }\n    };\n\n    // Execute the update\n    updateRatings();\n  };\n\n  const handleLogout = async () => {\n    logout();\n  };\n\n  if (!isLoggedIn) {\n    return <Login onLogin={login} />;\n  }\n\n  const renderMainContent = () => {\n    if (view === 'profile') {\n      return (\n        <Profile \n          userName={userName}\n          onStartNewTournament={handleStartNewTournament}\n          ratings={ratings}\n          onUpdateRatings={handleUpdateRatings}\n        />\n      );\n    }\n\n    if (tournamentComplete) {\n      return (\n        <Results \n          ratings={ratings}\n          onStartNew={handleStartNewTournament}\n          userName={userName}\n          onUpdateRatings={handleUpdateRatings}\n          currentTournamentNames={tournamentNames}\n        />\n      );\n    }\n\n    if (!tournamentNames) {\n      return (\n        <TournamentSetup \n          onStart={handleTournamentSetup}\n          userName={userName}\n          existingRatings={ratings}\n        />\n      );\n    }\n\n    return (\n      <Tournament \n        onComplete={handleTournamentComplete}\n        existingRatings={ratings}\n        names={tournamentNames}\n        userName={userName}\n      />\n    );\n  };\n\n  return (\n    <div className=\"app\">\n      <header>\n        <div \n          className=\"header-background\"\n          style={{ \n            backgroundImage: `url(${process.env.PUBLIC_URL}/images/cat.gif)` \n          }}\n        ></div>\n        <img src={`${process.env.PUBLIC_URL}/images/cat.gif`} alt=\"Cat animation\" className=\"header-image\" />\n        <h1>Cat Name Picker</h1>\n        <div className=\"user-controls\">\n          <div className=\"nav-menu\">\n            <button \n              onClick={() => setView('tournament')}\n              className={view === 'tournament' ? 'active' : ''}\n            >\n              Tournament\n            </button>\n            <button \n              onClick={() => setView('profile')}\n              className={view === 'profile' ? 'active' : ''}\n            >\n              My Profile\n            </button>\n          </div>\n          <span className=\"user-welcome\">Welcome, {userName}!</span>\n          <button onClick={handleLogout} className=\"logout-button\">\n            Logout\n          </button>\n        </div>\n      </header>\n\n      <main>\n        <ErrorBoundary>\n          {renderMainContent()}\n        </ErrorBoundary>\n      </main>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}