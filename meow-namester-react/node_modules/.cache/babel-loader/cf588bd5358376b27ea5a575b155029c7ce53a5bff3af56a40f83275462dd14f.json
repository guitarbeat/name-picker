{"ast":null,"code":"/**\n * @module PreferenceSorter\n * @description A class that implements a merge sort algorithm with custom comparisons\n * for sorting cat names based on user preferences.\n */\n\nexport class PreferenceSorter {\n  constructor(items) {\n    this.items = items;\n    this.preferences = new Map();\n    this.currentRankings = [...items];\n  }\n\n  // When comparing items, we'll use the name property for the map key\n  addPreference(item1, item2, value) {\n    const key = `${item1.name}-${item2.name}`;\n    this.preferences.set(key, value);\n  }\n  getPreference(item1, item2) {\n    const key = `${item1.name}-${item2.name}`;\n    const reverseKey = `${item2.name}-${item1.name}`;\n    if (this.preferences.has(key)) {\n      return this.preferences.get(key);\n    }\n    if (this.preferences.has(reverseKey)) {\n      return -this.preferences.get(reverseKey);\n    }\n    return 0;\n  }\n  getCurrentRankings() {\n    return this.currentRankings;\n  }\n  async sort(compareCallback) {\n    console.log('Starting sort process with items:', this.items);\n    const n = this.items.length;\n    for (let i = 0; i < n; i++) {\n      this.rec[i] = 0;\n    }\n    let mid = Math.floor(n / 2);\n    await this.sortRecursive(0, n - 1, compareCallback);\n    console.log('Sort completed. Final ranks:', this.ranks);\n    return this.ranks;\n  }\n  async sortRecursive(left, right, compareCallback) {\n    if (right - left < 1) {\n      if (left === right) {\n        this.ranks.push(this.items[left]);\n        console.log(`Added single item to ranks: ${this.items[left]}`);\n      }\n      return;\n    }\n    const mid = Math.floor((left + right) / 2);\n    console.log(`Splitting array at indices ${left}-${mid} and ${mid + 1}-${right}`);\n    await this.sortRecursive(left, mid, compareCallback);\n    await this.sortRecursive(mid + 1, right, compareCallback);\n    await this.mergeSubGroups(left, mid, right, compareCallback);\n  }\n  async mergeSubGroups(left, mid, right, compareCallback) {\n    console.log(`Merging subarrays: ${left}-${mid} with ${mid + 1}-${right}`);\n    let i = left;\n    let j = mid + 1;\n    const merged = [];\n    while (i <= mid && j <= right) {\n      console.log(`Comparing ${this.items[i].name} with ${this.items[j].name}`);\n      const result = await compareCallback(this.items[i], this.items[j]);\n      console.log(`Comparison result: ${result}`);\n      if (result <= -0.5) {\n        // First name preferred\n        console.log(`${this.items[i].name} preferred over ${this.items[j].name}`);\n        merged.push(this.items[i++]); // Add preferred name first\n      } else if (result >= 0.5) {\n        // Second name preferred\n        console.log(`${this.items[j].name} preferred over ${this.items[i].name}`);\n        merged.push(this.items[j++]); // Add preferred name first\n      } else {\n        // Handle near-ties with slight preference\n        console.log(`Near tie between ${this.items[i].name} and ${this.items[j].name}`);\n        if (result < 0) {\n          merged.push(this.items[i++]);\n          merged.push(this.items[j++]);\n        } else {\n          merged.push(this.items[j++]);\n          merged.push(this.items[i++]);\n        }\n      }\n    }\n\n    // Add remaining elements\n    while (i <= mid) {\n      console.log(`Adding remaining left item: ${this.items[i].name}`);\n      merged.push(this.items[i++]);\n    }\n    while (j <= right) {\n      console.log(`Adding remaining right item: ${this.items[j].name}`);\n      merged.push(this.items[j++]);\n    }\n\n    // Update original array\n    for (let k = 0; k < merged.length; k++) {\n      this.items[left + k] = merged[k];\n    }\n\n    // Only update ranks at the final merge\n    if (left === 0 && right === this.items.length - 1) {\n      this.ranks = [...merged];\n    }\n    console.log(`Merged result: ${merged.map(item => item.name).join(', ')}`);\n  }\n}","map":{"version":3,"names":["PreferenceSorter","constructor","items","preferences","Map","currentRankings","addPreference","item1","item2","value","key","name","set","getPreference","reverseKey","has","get","getCurrentRankings","sort","compareCallback","console","log","n","length","i","rec","mid","Math","floor","sortRecursive","ranks","left","right","push","mergeSubGroups","j","merged","result","k","map","item","join"],"sources":["/Users/aaron/Desktop/Side Projects/name-picker/meow-namester-react/src/utils/sortingAlgorithm.js"],"sourcesContent":["/**\n * @module PreferenceSorter\n * @description A class that implements a merge sort algorithm with custom comparisons\n * for sorting cat names based on user preferences.\n */\n\nexport class PreferenceSorter {\n    constructor(items) {\n        this.items = items;\n        this.preferences = new Map();\n        this.currentRankings = [...items];\n    }\n\n    // When comparing items, we'll use the name property for the map key\n    addPreference(item1, item2, value) {\n        const key = `${item1.name}-${item2.name}`;\n        this.preferences.set(key, value);\n    }\n\n    getPreference(item1, item2) {\n        const key = `${item1.name}-${item2.name}`;\n        const reverseKey = `${item2.name}-${item1.name}`;\n        \n        if (this.preferences.has(key)) {\n            return this.preferences.get(key);\n        }\n        if (this.preferences.has(reverseKey)) {\n            return -this.preferences.get(reverseKey);\n        }\n        return 0;\n    }\n\n    getCurrentRankings() {\n        return this.currentRankings;\n    }\n\n    async sort(compareCallback) {\n        console.log('Starting sort process with items:', this.items);\n        const n = this.items.length;\n        for (let i = 0; i < n; i++) {\n            this.rec[i] = 0;\n        }\n        let mid = Math.floor(n / 2);\n        await this.sortRecursive(0, n - 1, compareCallback);\n        console.log('Sort completed. Final ranks:', this.ranks);\n        return this.ranks;\n    }\n\n    async sortRecursive(left, right, compareCallback) {\n        if (right - left < 1) {\n            if (left === right) {\n                this.ranks.push(this.items[left]);\n                console.log(`Added single item to ranks: ${this.items[left]}`);\n            }\n            return;\n        }\n\n        const mid = Math.floor((left + right) / 2);\n        console.log(`Splitting array at indices ${left}-${mid} and ${mid + 1}-${right}`);\n        await this.sortRecursive(left, mid, compareCallback);\n        await this.sortRecursive(mid + 1, right, compareCallback);\n        await this.mergeSubGroups(left, mid, right, compareCallback);\n    }\n\n    async mergeSubGroups(left, mid, right, compareCallback) {\n        console.log(`Merging subarrays: ${left}-${mid} with ${mid + 1}-${right}`);\n        let i = left;\n        let j = mid + 1;\n        const merged = [];\n\n        while (i <= mid && j <= right) {\n            console.log(`Comparing ${this.items[i].name} with ${this.items[j].name}`);\n            const result = await compareCallback(this.items[i], this.items[j]);\n            console.log(`Comparison result: ${result}`);\n\n            if (result <= -0.5) {  // First name preferred\n                console.log(`${this.items[i].name} preferred over ${this.items[j].name}`);\n                merged.push(this.items[i++]);  // Add preferred name first\n            } else if (result >= 0.5) {  // Second name preferred\n                console.log(`${this.items[j].name} preferred over ${this.items[i].name}`);\n                merged.push(this.items[j++]);  // Add preferred name first\n            } else {\n                // Handle near-ties with slight preference\n                console.log(`Near tie between ${this.items[i].name} and ${this.items[j].name}`);\n                if (result < 0) {\n                    merged.push(this.items[i++]);\n                    merged.push(this.items[j++]);\n                } else {\n                    merged.push(this.items[j++]);\n                    merged.push(this.items[i++]);\n                }\n            }\n        }\n\n        // Add remaining elements\n        while (i <= mid) {\n            console.log(`Adding remaining left item: ${this.items[i].name}`);\n            merged.push(this.items[i++]);\n        }\n        while (j <= right) {\n            console.log(`Adding remaining right item: ${this.items[j].name}`);\n            merged.push(this.items[j++]);\n        }\n\n        // Update original array\n        for (let k = 0; k < merged.length; k++) {\n            this.items[left + k] = merged[k];\n        }\n\n        // Only update ranks at the final merge\n        if (left === 0 && right === this.items.length - 1) {\n            this.ranks = [...merged];\n        }\n\n        console.log(`Merged result: ${merged.map(item => item.name).join(', ')}`);\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}