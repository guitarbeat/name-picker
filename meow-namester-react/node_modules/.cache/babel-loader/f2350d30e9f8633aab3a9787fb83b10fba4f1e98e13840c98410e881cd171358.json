{"ast":null,"code":"/**\n * @module useUserSession\n * @description A custom React hook that manages user session state and authentication.\n * Handles user login/logout and persists user data in both localStorage and Supabase.\n * \n * @example\n * // Using the hook in a component\n * const { userName, isLoggedIn, error, login, logout } = useUserSession();\n * \n * // Login a user\n * await login('JohnDoe');\n * \n * // Logout\n * await logout();\n * \n * @returns {Object} Session management object\n * @property {string} userName - Current user's username\n * @property {boolean} isLoggedIn - Whether a user is currently logged in\n * @property {string|null} error - Any error message from login/logout operations\n * @property {Function} login - Async function to log in a user\n * @property {Function} logout - Async function to log out the current user\n */import{useState,useEffect}from'react';import{supabase}from'../supabase/supabaseClient';function useUserSession(){const[userName,setUserName]=useState('');const[isLoggedIn,setIsLoggedIn]=useState(false);const[error,setError]=useState(null);useEffect(()=>{const storedUser=localStorage.getItem('catNamesUser');if(storedUser){console.log('Found stored user:',storedUser);setUserName(storedUser);setIsLoggedIn(true);}else{console.log('No stored user found');}},[]);/**\n   * Logs in a user with the given name\n   * @param {string} name - The username to login with\n   * @throws {Error} If the name is invalid or if there's a database error\n   */const login=async name=>{try{console.log('Attempting to login with name:',name);if(!name||typeof name!=='string'||name.trim()===''){console.error('Invalid name provided');throw new Error('Please enter a valid name');}const trimmedName=name.trim();console.log('Trimmed name:',trimmedName);// Create/update user in app_users table\nconst{data:userData,error:upsertError}=await supabase.from('app_users').insert({user_name:trimmedName,created_at:new Date().toISOString()}).select().single();if(upsertError){// If insert fails due to unique constraint, user already exists\nif(upsertError.code==='23505'){console.log('User already exists, proceeding with login');}else{console.error('Error creating user:',upsertError);throw upsertError;}}console.log('User data:',userData);localStorage.setItem('catNamesUser',trimmedName);setUserName(trimmedName);setIsLoggedIn(true);setError(null);console.log('Login successful. Current user:',trimmedName);}catch(err){console.error('Login error:',err);setError(err.message);throw err;}};/**\n   * Logs out the current user\n   * Clears local storage and resets session state\n   */const logout=async()=>{console.log('Logging out user:',userName);localStorage.removeItem('catNamesUser');setUserName('');setIsLoggedIn(false);setError(null);console.log('Logout complete');};// Add a debug log whenever userName changes\nuseEffect(()=>{console.log('Current user session state:',{userName,isLoggedIn,error});},[userName,isLoggedIn,error]);return{userName,isLoggedIn,error,login,logout};}export default useUserSession;","map":{"version":3,"names":["useState","useEffect","supabase","useUserSession","userName","setUserName","isLoggedIn","setIsLoggedIn","error","setError","storedUser","localStorage","getItem","console","log","login","name","trim","Error","trimmedName","data","userData","upsertError","from","insert","user_name","created_at","Date","toISOString","select","single","code","setItem","err","message","logout","removeItem"],"sources":["/Users/aaron/Desktop/Side Projects/name-picker/meow-namester-react/src/hooks/useUserSession.js"],"sourcesContent":["/**\n * @module useUserSession\n * @description A custom React hook that manages user session state and authentication.\n * Handles user login/logout and persists user data in both localStorage and Supabase.\n * \n * @example\n * // Using the hook in a component\n * const { userName, isLoggedIn, error, login, logout } = useUserSession();\n * \n * // Login a user\n * await login('JohnDoe');\n * \n * // Logout\n * await logout();\n * \n * @returns {Object} Session management object\n * @property {string} userName - Current user's username\n * @property {boolean} isLoggedIn - Whether a user is currently logged in\n * @property {string|null} error - Any error message from login/logout operations\n * @property {Function} login - Async function to log in a user\n * @property {Function} logout - Async function to log out the current user\n */\n\nimport { useState, useEffect } from 'react';\nimport { supabase } from '../supabase/supabaseClient';\n\nfunction useUserSession() {\n  const [userName, setUserName] = useState('');\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const storedUser = localStorage.getItem('catNamesUser');\n    if (storedUser) {\n      console.log('Found stored user:', storedUser);\n      setUserName(storedUser);\n      setIsLoggedIn(true);\n    } else {\n      console.log('No stored user found');\n    }\n  }, []);\n\n  /**\n   * Logs in a user with the given name\n   * @param {string} name - The username to login with\n   * @throws {Error} If the name is invalid or if there's a database error\n   */\n  const login = async (name) => {\n    try {\n      console.log('Attempting to login with name:', name);\n      \n      if (!name || typeof name !== 'string' || name.trim() === '') {\n        console.error('Invalid name provided');\n        throw new Error('Please enter a valid name');\n      }\n      \n      const trimmedName = name.trim();\n      console.log('Trimmed name:', trimmedName);\n\n      // Create/update user in app_users table\n      const { data: userData, error: upsertError } = await supabase\n        .from('app_users')\n        .insert({ \n          user_name: trimmedName,\n          created_at: new Date().toISOString()\n        })\n        .select()\n        .single();\n\n      if (upsertError) {\n        // If insert fails due to unique constraint, user already exists\n        if (upsertError.code === '23505') {\n          console.log('User already exists, proceeding with login');\n        } else {\n          console.error('Error creating user:', upsertError);\n          throw upsertError;\n        }\n      }\n\n      console.log('User data:', userData);\n\n      localStorage.setItem('catNamesUser', trimmedName);\n      setUserName(trimmedName);\n      setIsLoggedIn(true);\n      setError(null);\n      \n      console.log('Login successful. Current user:', trimmedName);\n    } catch (err) {\n      console.error('Login error:', err);\n      setError(err.message);\n      throw err;\n    }\n  };\n\n  /**\n   * Logs out the current user\n   * Clears local storage and resets session state\n   */\n  const logout = async () => {\n    console.log('Logging out user:', userName);\n    localStorage.removeItem('catNamesUser');\n    setUserName('');\n    setIsLoggedIn(false);\n    setError(null);\n    console.log('Logout complete');\n  };\n\n  // Add a debug log whenever userName changes\n  useEffect(() => {\n    console.log('Current user session state:', {\n      userName,\n      isLoggedIn,\n      error\n    });\n  }, [userName, isLoggedIn, error]);\n\n  return {\n    userName,\n    isLoggedIn,\n    error,\n    login,\n    logout\n  };\n}\n\nexport default useUserSession; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}