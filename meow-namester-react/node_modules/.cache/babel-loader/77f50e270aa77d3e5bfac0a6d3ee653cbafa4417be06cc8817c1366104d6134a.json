{"ast":null,"code":"/**\n * @module useNameOptions\n * @description A custom React hook that manages cat name options in Supabase.\n */import{useState,useEffect}from'react';import{supabase}from'./supabaseClient';function useNameOptions(){const[nameOptions,setNameOptions]=useState([]);const[loading,setLoading]=useState(true);const[error,setError]=useState(null);useEffect(()=>{fetchNameOptions();// Set up real-time subscription\nconst subscription=supabase.channel('name_options_changes').on('postgres_changes',{event:'*',schema:'public',table:'name_options'},()=>{fetchNameOptions();}).subscribe();return()=>{subscription.unsubscribe();};},[]);async function fetchNameOptions(){try{setLoading(true);const{data,error:fetchError}=await supabase.from('name_options').select('name, description').order('created_at',{ascending:true});if(fetchError)throw fetchError;setNameOptions(data);}catch(err){console.error('Error fetching name options:',err);setError(err);}finally{setLoading(false);}}async function addNameOption(newName){let description=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'';if(!(newName!==null&&newName!==void 0&&newName.trim()))return;try{setLoading(true);const{error:insertError}=await supabase.from('name_options').insert([{name:newName.trim(),description:description.trim()}]).select();// Add select() to ensure proper error handling\nif(insertError){console.error('Insert error details:',insertError);throw insertError;}// Fetch updated data after successful insert\nawait fetchNameOptions();}catch(err){console.error('Error adding name option:',err);setError(err);throw err;}finally{setLoading(false);}}async function removeNameOption(name){try{setLoading(true);const{error:deleteError}=await supabase.from('name_options').delete().eq('name',name);if(deleteError)throw deleteError;}catch(err){console.error('Error removing name option:',err);setError(err);}finally{setLoading(false);}}return{nameOptions,loading,error,addNameOption,removeNameOption};}export default useNameOptions;","map":{"version":3,"names":["useState","useEffect","supabase","useNameOptions","nameOptions","setNameOptions","loading","setLoading","error","setError","fetchNameOptions","subscription","channel","on","event","schema","table","subscribe","unsubscribe","data","fetchError","from","select","order","ascending","err","console","addNameOption","newName","description","arguments","length","undefined","trim","insertError","insert","name","removeNameOption","deleteError","delete","eq"],"sources":["/Users/aaron/Desktop/Side Projects/name-picker/meow-namester-react/src/supabase/useNameOptions.js"],"sourcesContent":["/**\n * @module useNameOptions\n * @description A custom React hook that manages cat name options in Supabase.\n */\n\nimport { useState, useEffect } from 'react';\nimport { supabase } from './supabaseClient';\n\nfunction useNameOptions() {\n  const [nameOptions, setNameOptions] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    fetchNameOptions();\n    \n    // Set up real-time subscription\n    const subscription = supabase\n      .channel('name_options_changes')\n      .on('postgres_changes', \n        { \n          event: '*', \n          schema: 'public', \n          table: 'name_options' \n        }, \n        () => {\n          fetchNameOptions();\n        }\n      )\n      .subscribe();\n\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, []);\n\n  async function fetchNameOptions() {\n    try {\n      setLoading(true);\n      const { data, error: fetchError } = await supabase\n        .from('name_options')\n        .select('name, description')\n        .order('created_at', { ascending: true });\n\n      if (fetchError) throw fetchError;\n\n      setNameOptions(data);\n    } catch (err) {\n      console.error('Error fetching name options:', err);\n      setError(err);\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  async function addNameOption(newName, description = '') {\n    if (!newName?.trim()) return;\n    \n    try {\n      setLoading(true);\n      const { error: insertError } = await supabase\n        .from('name_options')\n        .insert([{ \n          name: newName.trim(),\n          description: description.trim()\n        }])\n        .select();  // Add select() to ensure proper error handling\n\n      if (insertError) {\n        console.error('Insert error details:', insertError);\n        throw insertError;\n      }\n      \n      // Fetch updated data after successful insert\n      await fetchNameOptions();\n      \n    } catch (err) {\n      console.error('Error adding name option:', err);\n      setError(err);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  async function removeNameOption(name) {\n    try {\n      setLoading(true);\n      const { error: deleteError } = await supabase\n        .from('name_options')\n        .delete()\n        .eq('name', name);\n\n      if (deleteError) throw deleteError;\n    } catch (err) {\n      console.error('Error removing name option:', err);\n      setError(err);\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  return {\n    nameOptions,\n    loading,\n    error,\n    addNameOption,\n    removeNameOption\n  };\n}\n\nexport default useNameOptions;"],"mappings":"AAAA;AACA;AACA;AACA,GAEA,OAASA,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAC3C,OAASC,QAAQ,KAAQ,kBAAkB,CAE3C,QAAS,CAAAC,cAAcA,CAAA,CAAG,CACxB,KAAM,CAACC,WAAW,CAAEC,cAAc,CAAC,CAAGL,QAAQ,CAAC,EAAE,CAAC,CAClD,KAAM,CAACM,OAAO,CAAEC,UAAU,CAAC,CAAGP,QAAQ,CAAC,IAAI,CAAC,CAC5C,KAAM,CAACQ,KAAK,CAAEC,QAAQ,CAAC,CAAGT,QAAQ,CAAC,IAAI,CAAC,CAExCC,SAAS,CAAC,IAAM,CACdS,gBAAgB,CAAC,CAAC,CAElB;AACA,KAAM,CAAAC,YAAY,CAAGT,QAAQ,CAC1BU,OAAO,CAAC,sBAAsB,CAAC,CAC/BC,EAAE,CAAC,kBAAkB,CACpB,CACEC,KAAK,CAAE,GAAG,CACVC,MAAM,CAAE,QAAQ,CAChBC,KAAK,CAAE,cACT,CAAC,CACD,IAAM,CACJN,gBAAgB,CAAC,CAAC,CACpB,CACF,CAAC,CACAO,SAAS,CAAC,CAAC,CAEd,MAAO,IAAM,CACXN,YAAY,CAACO,WAAW,CAAC,CAAC,CAC5B,CAAC,CACH,CAAC,CAAE,EAAE,CAAC,CAEN,cAAe,CAAAR,gBAAgBA,CAAA,CAAG,CAChC,GAAI,CACFH,UAAU,CAAC,IAAI,CAAC,CAChB,KAAM,CAAEY,IAAI,CAAEX,KAAK,CAAEY,UAAW,CAAC,CAAG,KAAM,CAAAlB,QAAQ,CAC/CmB,IAAI,CAAC,cAAc,CAAC,CACpBC,MAAM,CAAC,mBAAmB,CAAC,CAC3BC,KAAK,CAAC,YAAY,CAAE,CAAEC,SAAS,CAAE,IAAK,CAAC,CAAC,CAE3C,GAAIJ,UAAU,CAAE,KAAM,CAAAA,UAAU,CAEhCf,cAAc,CAACc,IAAI,CAAC,CACtB,CAAE,MAAOM,GAAG,CAAE,CACZC,OAAO,CAAClB,KAAK,CAAC,8BAA8B,CAAEiB,GAAG,CAAC,CAClDhB,QAAQ,CAACgB,GAAG,CAAC,CACf,CAAC,OAAS,CACRlB,UAAU,CAAC,KAAK,CAAC,CACnB,CACF,CAEA,cAAe,CAAAoB,aAAaA,CAACC,OAAO,CAAoB,IAAlB,CAAAC,WAAW,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,EAAE,CACpD,GAAI,EAACF,OAAO,SAAPA,OAAO,WAAPA,OAAO,CAAEK,IAAI,CAAC,CAAC,EAAE,OAEtB,GAAI,CACF1B,UAAU,CAAC,IAAI,CAAC,CAChB,KAAM,CAAEC,KAAK,CAAE0B,WAAY,CAAC,CAAG,KAAM,CAAAhC,QAAQ,CAC1CmB,IAAI,CAAC,cAAc,CAAC,CACpBc,MAAM,CAAC,CAAC,CACPC,IAAI,CAAER,OAAO,CAACK,IAAI,CAAC,CAAC,CACpBJ,WAAW,CAAEA,WAAW,CAACI,IAAI,CAAC,CAChC,CAAC,CAAC,CAAC,CACFX,MAAM,CAAC,CAAC,CAAG;AAEd,GAAIY,WAAW,CAAE,CACfR,OAAO,CAAClB,KAAK,CAAC,uBAAuB,CAAE0B,WAAW,CAAC,CACnD,KAAM,CAAAA,WAAW,CACnB,CAEA;AACA,KAAM,CAAAxB,gBAAgB,CAAC,CAAC,CAE1B,CAAE,MAAOe,GAAG,CAAE,CACZC,OAAO,CAAClB,KAAK,CAAC,2BAA2B,CAAEiB,GAAG,CAAC,CAC/ChB,QAAQ,CAACgB,GAAG,CAAC,CACb,KAAM,CAAAA,GAAG,CACX,CAAC,OAAS,CACRlB,UAAU,CAAC,KAAK,CAAC,CACnB,CACF,CAEA,cAAe,CAAA8B,gBAAgBA,CAACD,IAAI,CAAE,CACpC,GAAI,CACF7B,UAAU,CAAC,IAAI,CAAC,CAChB,KAAM,CAAEC,KAAK,CAAE8B,WAAY,CAAC,CAAG,KAAM,CAAApC,QAAQ,CAC1CmB,IAAI,CAAC,cAAc,CAAC,CACpBkB,MAAM,CAAC,CAAC,CACRC,EAAE,CAAC,MAAM,CAAEJ,IAAI,CAAC,CAEnB,GAAIE,WAAW,CAAE,KAAM,CAAAA,WAAW,CACpC,CAAE,MAAOb,GAAG,CAAE,CACZC,OAAO,CAAClB,KAAK,CAAC,6BAA6B,CAAEiB,GAAG,CAAC,CACjDhB,QAAQ,CAACgB,GAAG,CAAC,CACf,CAAC,OAAS,CACRlB,UAAU,CAAC,KAAK,CAAC,CACnB,CACF,CAEA,MAAO,CACLH,WAAW,CACXE,OAAO,CACPE,KAAK,CACLmB,aAAa,CACbU,gBACF,CAAC,CACH,CAEA,cAAe,CAAAlC,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}