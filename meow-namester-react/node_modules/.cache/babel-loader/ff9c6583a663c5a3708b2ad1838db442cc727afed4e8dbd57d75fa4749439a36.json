{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useCallback } from 'react';\nimport { PreferenceSorter } from '../components/Tournament/PreferenceSorter';\nimport EloRating from '../components/Tournament/EloRating';\nexport function useTournament({\n  names = [],\n  existingRatings = {},\n  onComplete\n}) {\n  _s();\n  const [currentMatch, setCurrentMatch] = useState(null);\n  const [isTransitioning, setIsTransitioning] = useState(false);\n  const [roundNumber, setRoundNumber] = useState(1);\n  const [currentMatchNumber, setCurrentMatchNumber] = useState(1);\n  const [totalMatches, setTotalMatches] = useState(1);\n  const [sorter, setSorter] = useState(null);\n  const [elo] = useState(() => new EloRating());\n  const [resolveVote, setResolveVote] = useState(null);\n  const [voteHistory, setVoteHistory] = useState([]);\n  const [canUndo, setCanUndo] = useState(false);\n  useEffect(() => {\n    if (!names || names.length === 0) {\n      console.log('No names provided for tournament');\n      return;\n    }\n    console.log('Starting new tournament with names:', names);\n    const nameStrings = names.map(n => n.name);\n    const newSorter = new PreferenceSorter(nameStrings);\n    setSorter(newSorter);\n    const n = names.length;\n    const estimatedMatches = Math.ceil(n * Math.log2(n));\n    setTotalMatches(estimatedMatches);\n    setCurrentMatchNumber(1);\n    setRoundNumber(1);\n    setVoteHistory([]);\n    setCanUndo(false);\n    runTournament(newSorter);\n  }, [names]);\n  const runTournament = async tournamentSorter => {\n    try {\n      const initialState = {\n        names,\n        existingRatings,\n        currentMatchNumber: 1,\n        roundNumber: 1,\n        voteHistory: []\n      };\n      localStorage.setItem('tournamentState', JSON.stringify(initialState));\n      const sortedResults = await tournamentSorter.sort(async (leftName, rightName) => {\n        const left = names.find(n => n.name === leftName);\n        const right = names.find(n => n.name === rightName);\n        setCurrentMatch({\n          left,\n          right\n        });\n        return new Promise(resolve => {\n          setResolveVote(() => resolve);\n        });\n      });\n      const ratingsArray = sortedResults.map((name, index) => {\n        const existingData = typeof existingRatings[name] === 'object' ? existingRatings[name] : {\n          rating: existingRatings[name] || 1500,\n          matches: 0\n        };\n        const totalNames = sortedResults.length;\n        const position = index;\n        const ratingSpread = Math.min(1000, totalNames * 25);\n        const positionValue = (totalNames - position - 1) / (totalNames - 1) * ratingSpread;\n        const newPositionRating = 1500 + positionValue;\n        const matchesPlayed = currentMatchNumber;\n        const maxMatches = totalMatches;\n        const blendFactor = Math.min(0.8, matchesPlayed / maxMatches * 0.9);\n        const newRating = Math.round(blendFactor * newPositionRating + (1 - blendFactor) * existingData.rating);\n        const minRating = 1000;\n        const maxRating = 2000;\n        const finalRating = Math.max(minRating, Math.min(maxRating, newRating));\n        return {\n          name,\n          rating: finalRating,\n          confidence: matchesPlayed / maxMatches\n        };\n      });\n      localStorage.removeItem('tournamentState');\n      onComplete(ratingsArray);\n    } catch (error) {\n      console.error('Tournament error:', error);\n      const savedState = localStorage.getItem('tournamentState');\n      if (savedState) {\n        const state = JSON.parse(savedState);\n        setCurrentMatchNumber(state.currentMatchNumber);\n        setRoundNumber(state.roundNumber);\n        setVoteHistory(state.voteHistory || []);\n      }\n    }\n  };\n  const handleVote = useCallback(result => {\n    if (isTransitioning || !resolveVote) return;\n    setIsTransitioning(true);\n    let voteValue;\n    switch (result) {\n      case 'left':\n        voteValue = -1;\n        break;\n      case 'right':\n        voteValue = 1;\n        break;\n      case 'both':\n        voteValue = Math.random() * 0.2 - 0.1;\n        break;\n      case 'none':\n        voteValue = Math.random() * 0.1 - 0.05;\n        break;\n      default:\n        voteValue = 0;\n    }\n    const voteData = {\n      matchNumber: currentMatchNumber,\n      result: voteValue,\n      timestamp: Date.now(),\n      match: currentMatch\n    };\n    setVoteHistory(prev => [...prev, voteData]);\n    setCanUndo(true);\n    localStorage.setItem('lastVote', JSON.stringify(voteData));\n    resolveVote(voteValue);\n    setCurrentMatchNumber(prev => prev + 1);\n    if (currentMatchNumber % Math.ceil(names.length / 2) === 0) {\n      setRoundNumber(prev => prev + 1);\n    }\n    setTimeout(() => {\n      setIsTransitioning(false);\n    }, 500);\n  }, [resolveVote, isTransitioning, currentMatchNumber, names.length, currentMatch]);\n  const handleUndo = useCallback(() => {\n    if (isTransitioning || !canUndo || voteHistory.length === 0) return;\n    setIsTransitioning(true);\n    const lastVote = voteHistory[voteHistory.length - 1];\n    setCurrentMatch(lastVote.match);\n    setCurrentMatchNumber(lastVote.matchNumber);\n    setVoteHistory(prev => prev.slice(0, -1));\n    if (sorter) {\n      sorter.undoLastPreference();\n    }\n    if (currentMatchNumber % Math.ceil(names.length / 2) === 1) {\n      setRoundNumber(prev => prev - 1);\n    }\n    setCanUndo(voteHistory.length > 1);\n    setTimeout(() => {\n      setIsTransitioning(false);\n    }, 500);\n  }, [isTransitioning, canUndo, voteHistory, names.length, sorter]);\n  const progress = Math.round(currentMatchNumber / totalMatches * 100);\n  return {\n    currentMatch,\n    isTransitioning,\n    roundNumber,\n    currentMatchNumber,\n    totalMatches,\n    progress,\n    handleVote,\n    handleUndo,\n    canUndo\n  };\n}\n_s(useTournament, \"TGEfK14oFNC+nEa/ZBar42ZeRTg=\");","map":{"version":3,"names":["useState","useEffect","useCallback","PreferenceSorter","EloRating","useTournament","names","existingRatings","onComplete","_s","currentMatch","setCurrentMatch","isTransitioning","setIsTransitioning","roundNumber","setRoundNumber","currentMatchNumber","setCurrentMatchNumber","totalMatches","setTotalMatches","sorter","setSorter","elo","resolveVote","setResolveVote","voteHistory","setVoteHistory","canUndo","setCanUndo","length","console","log","nameStrings","map","n","name","newSorter","estimatedMatches","Math","ceil","log2","runTournament","tournamentSorter","initialState","localStorage","setItem","JSON","stringify","sortedResults","sort","leftName","rightName","left","find","right","Promise","resolve","ratingsArray","index","existingData","rating","matches","totalNames","position","ratingSpread","min","positionValue","newPositionRating","matchesPlayed","maxMatches","blendFactor","newRating","round","minRating","maxRating","finalRating","max","confidence","removeItem","error","savedState","getItem","state","parse","handleVote","result","voteValue","random","voteData","matchNumber","timestamp","Date","now","match","prev","setTimeout","handleUndo","lastVote","slice","undoLastPreference","progress"],"sources":["/Users/aaron/Desktop/Side Projects/name-picker/meow-namester-react/src/hooks/useTournament.js"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\nimport { PreferenceSorter } from '../components/Tournament/PreferenceSorter';\nimport EloRating from '../components/Tournament/EloRating';\n\nexport function useTournament({ names = [], existingRatings = {}, onComplete }) {\n  const [currentMatch, setCurrentMatch] = useState(null);\n  const [isTransitioning, setIsTransitioning] = useState(false);\n  const [roundNumber, setRoundNumber] = useState(1);\n  const [currentMatchNumber, setCurrentMatchNumber] = useState(1);\n  const [totalMatches, setTotalMatches] = useState(1);\n  const [sorter, setSorter] = useState(null);\n  const [elo] = useState(() => new EloRating());\n  const [resolveVote, setResolveVote] = useState(null);\n  const [voteHistory, setVoteHistory] = useState([]);\n  const [canUndo, setCanUndo] = useState(false);\n\n  useEffect(() => {\n    if (!names || names.length === 0) {\n      console.log('No names provided for tournament');\n      return;\n    }\n\n    console.log('Starting new tournament with names:', names);\n    const nameStrings = names.map(n => n.name);\n    const newSorter = new PreferenceSorter(nameStrings);\n    setSorter(newSorter);\n    \n    const n = names.length;\n    const estimatedMatches = Math.ceil(n * Math.log2(n));\n    setTotalMatches(estimatedMatches);\n    setCurrentMatchNumber(1);\n    setRoundNumber(1);\n    setVoteHistory([]);\n    setCanUndo(false);\n\n    runTournament(newSorter);\n  }, [names]);\n\n  const runTournament = async (tournamentSorter) => {\n    try {\n      const initialState = {\n        names,\n        existingRatings,\n        currentMatchNumber: 1,\n        roundNumber: 1,\n        voteHistory: []\n      };\n      localStorage.setItem('tournamentState', JSON.stringify(initialState));\n\n      const sortedResults = await tournamentSorter.sort(async (leftName, rightName) => {\n        const left = names.find(n => n.name === leftName);\n        const right = names.find(n => n.name === rightName);\n        setCurrentMatch({ left, right });\n        return new Promise((resolve) => {\n          setResolveVote(() => resolve);\n        });\n      });\n\n      const ratingsArray = sortedResults.map((name, index) => {\n        const existingData = typeof existingRatings[name] === 'object'\n          ? existingRatings[name]\n          : { rating: existingRatings[name] || 1500, matches: 0 };\n\n        const totalNames = sortedResults.length;\n        const position = index;\n        const ratingSpread = Math.min(1000, totalNames * 25);\n        const positionValue = ((totalNames - position - 1) / (totalNames - 1)) * ratingSpread;\n        const newPositionRating = 1500 + positionValue;\n        const matchesPlayed = currentMatchNumber;\n        const maxMatches = totalMatches;\n        const blendFactor = Math.min(0.8, (matchesPlayed / maxMatches) * 0.9);\n        const newRating = Math.round(\n          (blendFactor * newPositionRating) +\n          ((1 - blendFactor) * existingData.rating)\n        );\n        const minRating = 1000;\n        const maxRating = 2000;\n        const finalRating = Math.max(minRating, Math.min(maxRating, newRating));\n\n        return {\n          name,\n          rating: finalRating,\n          confidence: (matchesPlayed / maxMatches)\n        };\n      });\n\n      localStorage.removeItem('tournamentState');\n      onComplete(ratingsArray);\n    } catch (error) {\n      console.error('Tournament error:', error);\n      const savedState = localStorage.getItem('tournamentState');\n      if (savedState) {\n        const state = JSON.parse(savedState);\n        setCurrentMatchNumber(state.currentMatchNumber);\n        setRoundNumber(state.roundNumber);\n        setVoteHistory(state.voteHistory || []);\n      }\n    }\n  };\n\n  const handleVote = useCallback((result) => {\n    if (isTransitioning || !resolveVote) return;\n\n    setIsTransitioning(true);\n    \n    let voteValue;\n    switch (result) {\n      case 'left':\n        voteValue = -1;\n        break;\n      case 'right':\n        voteValue = 1;\n        break;\n      case 'both':\n        voteValue = Math.random() * 0.2 - 0.1;\n        break;\n      case 'none':\n        voteValue = Math.random() * 0.1 - 0.05;\n        break;\n      default:\n        voteValue = 0;\n    }\n    \n    const voteData = {\n      matchNumber: currentMatchNumber,\n      result: voteValue,\n      timestamp: Date.now(),\n      match: currentMatch\n    };\n\n    setVoteHistory(prev => [...prev, voteData]);\n    setCanUndo(true);\n    \n    localStorage.setItem('lastVote', JSON.stringify(voteData));\n\n    resolveVote(voteValue);\n    setCurrentMatchNumber(prev => prev + 1);\n    \n    if (currentMatchNumber % Math.ceil(names.length / 2) === 0) {\n      setRoundNumber(prev => prev + 1);\n    }\n    \n    setTimeout(() => {\n      setIsTransitioning(false);\n    }, 500);\n  }, [resolveVote, isTransitioning, currentMatchNumber, names.length, currentMatch]);\n\n  const handleUndo = useCallback(() => {\n    if (isTransitioning || !canUndo || voteHistory.length === 0) return;\n\n    setIsTransitioning(true);\n\n    const lastVote = voteHistory[voteHistory.length - 1];\n    setCurrentMatch(lastVote.match);\n    setCurrentMatchNumber(lastVote.matchNumber);\n    setVoteHistory(prev => prev.slice(0, -1));\n    \n    if (sorter) {\n      sorter.undoLastPreference();\n    }\n\n    if (currentMatchNumber % Math.ceil(names.length / 2) === 1) {\n      setRoundNumber(prev => prev - 1);\n    }\n\n    setCanUndo(voteHistory.length > 1);\n    \n    setTimeout(() => {\n      setIsTransitioning(false);\n    }, 500);\n  }, [isTransitioning, canUndo, voteHistory, names.length, sorter]);\n\n  const progress = Math.round((currentMatchNumber / totalMatches) * 100);\n\n  return {\n    currentMatch,\n    isTransitioning,\n    roundNumber,\n    currentMatchNumber,\n    totalMatches,\n    progress,\n    handleVote,\n    handleUndo,\n    canUndo\n  };\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}