{"ast":null,"code":"var _s = $RefreshSig$();\n/**\n * @module useSupabaseStorage\n * @description A custom React hook that provides persistent storage using Supabase.\n * It syncs state with Supabase and handles real-time updates.\n * \n * @example\n * // Using the hook in a component\n * const [value, setValue, { loading, error }] = useSupabaseStorage('cat_names', defaultValue);\n */\n\nimport { useState, useEffect } from 'react';\nimport { supabase } from './supabaseClient';\nfunction useSupabaseStorage(tableName, initialValue = []) {\n  _s();\n  const [storedValue, setStoredValue] = useState(initialValue);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Initial fetch of data\n  useEffect(() => {\n    fetchData();\n\n    // Set up real-time subscription\n    const subscription = supabase.channel(`${tableName}_changes`).on('postgres_changes', {\n      event: '*',\n      schema: 'public',\n      table: tableName\n    }, payload => {\n      console.log('Change received!', payload);\n      fetchData();\n    }).subscribe();\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, [tableName]);\n  async function fetchData() {\n    try {\n      setLoading(true);\n      const {\n        data,\n        error: fetchError\n      } = await supabase.from(tableName).select('*').order('rating', {\n        ascending: false\n      }).order('created_at', {\n        ascending: true\n      });\n      if (fetchError) throw fetchError;\n      setStoredValue(data || initialValue);\n    } catch (err) {\n      console.error('Error fetching data:', err);\n      setError(err);\n    } finally {\n      setLoading(false);\n    }\n  }\n  async function setValue(newValue) {\n    try {\n      setLoading(true);\n      if (Array.isArray(newValue)) {\n        // Handle array updates (e.g., ranked cat names)\n        const {\n          error: upsertError\n        } = await supabase.from(tableName).upsert(newValue.map((item, index) => ({\n          name: item.name || item,\n          rating: item.rating || 1500 - index * 10,\n          // Default rating based on rank if not provided\n          updated_at: new Date().toISOString()\n        })));\n        if (upsertError) throw upsertError;\n      } else {\n        // Handle single record updates\n        const {\n          error: upsertError\n        } = await supabase.from(tableName).upsert({\n          name: newValue.name || newValue,\n          rating: newValue.rating || 1500,\n          updated_at: new Date().toISOString()\n        });\n        if (upsertError) throw upsertError;\n      }\n      setStoredValue(newValue);\n    } catch (err) {\n      console.error('Error setting value:', err);\n      setError(err);\n    } finally {\n      setLoading(false);\n    }\n  }\n  return [storedValue, setValue, {\n    loading,\n    error\n  }];\n}\n_s(useSupabaseStorage, \"7I0FNrSbcRydL4YWfLrml+7znFU=\");\nexport default useSupabaseStorage;","map":{"version":3,"names":["useState","useEffect","supabase","useSupabaseStorage","tableName","initialValue","_s","storedValue","setStoredValue","loading","setLoading","error","setError","fetchData","subscription","channel","on","event","schema","table","payload","console","log","subscribe","unsubscribe","data","fetchError","from","select","order","ascending","err","setValue","newValue","Array","isArray","upsertError","upsert","map","item","index","name","rating","updated_at","Date","toISOString"],"sources":["/Users/aaron/Desktop/Side Projects/name-picker/meow-namester-react/src/lib/supabase/useSupabaseStorage.js"],"sourcesContent":["/**\n * @module useSupabaseStorage\n * @description A custom React hook that provides persistent storage using Supabase.\n * It syncs state with Supabase and handles real-time updates.\n * \n * @example\n * // Using the hook in a component\n * const [value, setValue, { loading, error }] = useSupabaseStorage('cat_names', defaultValue);\n */\n\nimport { useState, useEffect } from 'react';\nimport { supabase } from './supabaseClient';\n\nfunction useSupabaseStorage(tableName, initialValue = []) {\n  const [storedValue, setStoredValue] = useState(initialValue);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Initial fetch of data\n  useEffect(() => {\n    fetchData();\n    \n    // Set up real-time subscription\n    const subscription = supabase\n      .channel(`${tableName}_changes`)\n      .on('postgres_changes', \n        { \n          event: '*', \n          schema: 'public', \n          table: tableName \n        }, \n        (payload) => {\n          console.log('Change received!', payload);\n          fetchData();\n        }\n      )\n      .subscribe();\n\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, [tableName]);\n\n  async function fetchData() {\n    try {\n      setLoading(true);\n      const { data, error: fetchError } = await supabase\n        .from(tableName)\n        .select('*')\n        .order('rating', { ascending: false })\n        .order('created_at', { ascending: true });\n\n      if (fetchError) throw fetchError;\n\n      setStoredValue(data || initialValue);\n    } catch (err) {\n      console.error('Error fetching data:', err);\n      setError(err);\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  async function setValue(newValue) {\n    try {\n      setLoading(true);\n      \n      if (Array.isArray(newValue)) {\n        // Handle array updates (e.g., ranked cat names)\n        const { error: upsertError } = await supabase\n          .from(tableName)\n          .upsert(\n            newValue.map((item, index) => ({\n              name: item.name || item,\n              rating: item.rating || 1500 - index * 10, // Default rating based on rank if not provided\n              updated_at: new Date().toISOString()\n            }))\n          );\n\n        if (upsertError) throw upsertError;\n      } else {\n        // Handle single record updates\n        const { error: upsertError } = await supabase\n          .from(tableName)\n          .upsert({\n            name: newValue.name || newValue,\n            rating: newValue.rating || 1500,\n            updated_at: new Date().toISOString()\n          });\n\n        if (upsertError) throw upsertError;\n      }\n\n      setStoredValue(newValue);\n    } catch (err) {\n      console.error('Error setting value:', err);\n      setError(err);\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  return [storedValue, setValue, { loading, error }];\n}\n\nexport default useSupabaseStorage; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}