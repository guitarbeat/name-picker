{"ast":null,"code":"var _s = $RefreshSig$();\n/**\n * @module useUserSession\n * @description A custom React hook that manages user session state and authentication.\n * Handles user login/logout and persists user data in both localStorage and Supabase.\n * \n * @example\n * // Using the hook in a component\n * const { userName, isLoggedIn, error, login, logout } = useUserSession();\n * \n * // Login a user\n * await login('JohnDoe');\n * \n * // Logout\n * await logout();\n * \n * @returns {Object} Session management object\n * @property {string} userName - Current user's username\n * @property {boolean} isLoggedIn - Whether a user is currently logged in\n * @property {string|null} error - Any error message from login/logout operations\n * @property {Function} login - Async function to log in a user\n * @property {Function} logout - Async function to log out the current user\n */\n\nimport { useState, useEffect } from 'react';\nimport { supabase } from '../supabase/supabaseClient';\nfunction useUserSession() {\n  _s();\n  const [userName, setUserName] = useState('');\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const storedUser = localStorage.getItem('catNamesUser');\n    if (storedUser) {\n      setUserName(storedUser);\n      setIsLoggedIn(true);\n    }\n  }, []);\n\n  /**\n   * Logs in a user with the given name\n   * @param {string} name - The username to login with\n   * @throws {Error} If the name is invalid or if there's a database error\n   */\n  const login = async name => {\n    try {\n      if (!name || typeof name !== 'string' || name.trim() === '') {\n        throw new Error('Please enter a valid name');\n      }\n      const trimmedName = name.trim();\n\n      // Try to create user in app_users table\n      const {\n        error: upsertError\n      } = await supabase.from('app_users').upsert({\n        user_name: trimmedName\n      }, {\n        onConflict: 'user_name'\n      });\n      if (upsertError) throw upsertError;\n      localStorage.setItem('catNamesUser', trimmedName);\n      setUserName(trimmedName);\n      setIsLoggedIn(true);\n      setError(null);\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    }\n  };\n\n  /**\n   * Logs out the current user\n   * Clears local storage and resets session state\n   */\n  const logout = async () => {\n    localStorage.removeItem('catNamesUser');\n    setUserName('');\n    setIsLoggedIn(false);\n    setError(null);\n  };\n  return {\n    userName,\n    isLoggedIn,\n    error,\n    login,\n    logout\n  };\n}\n_s(useUserSession, \"R95YNE++Hq3dRChk5v1+6Me6ZEo=\");\nexport default useUserSession;","map":{"version":3,"names":["useState","useEffect","supabase","useUserSession","_s","userName","setUserName","isLoggedIn","setIsLoggedIn","error","setError","storedUser","localStorage","getItem","login","name","trim","Error","trimmedName","upsertError","from","upsert","user_name","onConflict","setItem","err","message","logout","removeItem"],"sources":["/Users/aaron/Desktop/Side Projects/name-picker/meow-namester-react/src/hooks/useUserSession.js"],"sourcesContent":["/**\n * @module useUserSession\n * @description A custom React hook that manages user session state and authentication.\n * Handles user login/logout and persists user data in both localStorage and Supabase.\n * \n * @example\n * // Using the hook in a component\n * const { userName, isLoggedIn, error, login, logout } = useUserSession();\n * \n * // Login a user\n * await login('JohnDoe');\n * \n * // Logout\n * await logout();\n * \n * @returns {Object} Session management object\n * @property {string} userName - Current user's username\n * @property {boolean} isLoggedIn - Whether a user is currently logged in\n * @property {string|null} error - Any error message from login/logout operations\n * @property {Function} login - Async function to log in a user\n * @property {Function} logout - Async function to log out the current user\n */\n\nimport { useState, useEffect } from 'react';\nimport { supabase } from '../supabase/supabaseClient';\n\nfunction useUserSession() {\n  const [userName, setUserName] = useState('');\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const storedUser = localStorage.getItem('catNamesUser');\n    if (storedUser) {\n      setUserName(storedUser);\n      setIsLoggedIn(true);\n    }\n  }, []);\n\n  /**\n   * Logs in a user with the given name\n   * @param {string} name - The username to login with\n   * @throws {Error} If the name is invalid or if there's a database error\n   */\n  const login = async (name) => {\n    try {\n      if (!name || typeof name !== 'string' || name.trim() === '') {\n        throw new Error('Please enter a valid name');\n      }\n      \n      const trimmedName = name.trim();\n      \n      // Try to create user in app_users table\n      const { error: upsertError } = await supabase\n        .from('app_users')\n        .upsert({ \n          user_name: trimmedName,\n        }, {\n          onConflict: 'user_name'\n        });\n\n      if (upsertError) throw upsertError;\n\n      localStorage.setItem('catNamesUser', trimmedName);\n      setUserName(trimmedName);\n      setIsLoggedIn(true);\n      setError(null);\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    }\n  };\n\n  /**\n   * Logs out the current user\n   * Clears local storage and resets session state\n   */\n  const logout = async () => {\n    localStorage.removeItem('catNamesUser');\n    setUserName('');\n    setIsLoggedIn(false);\n    setError(null);\n  };\n\n  return {\n    userName,\n    isLoggedIn,\n    error,\n    login,\n    logout\n  };\n}\n\nexport default useUserSession; "],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,QAAQ,QAAQ,4BAA4B;AAErD,SAASC,cAAcA,CAAA,EAAG;EAAAC,EAAA;EACxB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACO,UAAU,EAAEC,aAAa,CAAC,GAAGR,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAM,CAACS,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAExCC,SAAS,CAAC,MAAM;IACd,MAAMU,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;IACvD,IAAIF,UAAU,EAAE;MACdL,WAAW,CAACK,UAAU,CAAC;MACvBH,aAAa,CAAC,IAAI,CAAC;IACrB;EACF,CAAC,EAAE,EAAE,CAAC;;EAEN;AACF;AACA;AACA;AACA;EACE,MAAMM,KAAK,GAAG,MAAOC,IAAI,IAAK;IAC5B,IAAI;MACF,IAAI,CAACA,IAAI,IAAI,OAAOA,IAAI,KAAK,QAAQ,IAAIA,IAAI,CAACC,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;QAC3D,MAAM,IAAIC,KAAK,CAAC,2BAA2B,CAAC;MAC9C;MAEA,MAAMC,WAAW,GAAGH,IAAI,CAACC,IAAI,CAAC,CAAC;;MAE/B;MACA,MAAM;QAAEP,KAAK,EAAEU;MAAY,CAAC,GAAG,MAAMjB,QAAQ,CAC1CkB,IAAI,CAAC,WAAW,CAAC,CACjBC,MAAM,CAAC;QACNC,SAAS,EAAEJ;MACb,CAAC,EAAE;QACDK,UAAU,EAAE;MACd,CAAC,CAAC;MAEJ,IAAIJ,WAAW,EAAE,MAAMA,WAAW;MAElCP,YAAY,CAACY,OAAO,CAAC,cAAc,EAAEN,WAAW,CAAC;MACjDZ,WAAW,CAACY,WAAW,CAAC;MACxBV,aAAa,CAAC,IAAI,CAAC;MACnBE,QAAQ,CAAC,IAAI,CAAC;IAChB,CAAC,CAAC,OAAOe,GAAG,EAAE;MACZf,QAAQ,CAACe,GAAG,CAACC,OAAO,CAAC;MACrB,MAAMD,GAAG;IACX;EACF,CAAC;;EAED;AACF;AACA;AACA;EACE,MAAME,MAAM,GAAG,MAAAA,CAAA,KAAY;IACzBf,YAAY,CAACgB,UAAU,CAAC,cAAc,CAAC;IACvCtB,WAAW,CAAC,EAAE,CAAC;IACfE,aAAa,CAAC,KAAK,CAAC;IACpBE,QAAQ,CAAC,IAAI,CAAC;EAChB,CAAC;EAED,OAAO;IACLL,QAAQ;IACRE,UAAU;IACVE,KAAK;IACLK,KAAK;IACLa;EACF,CAAC;AACH;AAACvB,EAAA,CAjEQD,cAAc;AAmEvB,eAAeA,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}