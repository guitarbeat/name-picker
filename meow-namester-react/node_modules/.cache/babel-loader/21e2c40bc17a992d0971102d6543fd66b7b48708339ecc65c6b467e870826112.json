{"ast":null,"code":"var _jsxFileName = \"/Users/aaron/Desktop/Side Projects/name-picker/meow-namester-react/src/App.js\",\n  _s = $RefreshSig$();\n/**\n * @module App\n * @description Main application component for the cat name tournament app.\n * Manages the overall application state and tournament flow, including:\n * - Name input and management\n * - Tournament progression\n * - Rating calculations\n * - Results display\n * \n * Uses the Elo rating system for ranking and a custom sorting algorithm\n * for determining the best cat name through user preferences.\n * \n * @component\n * @returns {JSX.Element} The complete application UI\n */\n\nimport React, { useState } from 'react';\nimport { Tournament, Results, ErrorBoundary, Login, Profile, TournamentSetup } from './components';\nimport useUserSession from './hooks/useUserSession';\nimport useSupabaseStorage from './supabase/useSupabaseStorage';\nimport { supabase } from './supabase/supabaseClient';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const {\n    userName,\n    isLoggedIn,\n    login,\n    logout,\n    session\n  } = useUserSession();\n  const [ratings, setRatings] = useState({});\n  const [view, setView] = useState('tournament');\n  const [tournamentComplete, setTournamentComplete] = useState(false);\n  const [tournamentNames, setTournamentNames] = useState(null);\n  console.log('App - Current ratings:', ratings);\n  console.log('App - Tournament names:', tournamentNames);\n  const handleTournamentComplete = async finalRatings => {\n    try {\n      if (!userName) {\n        console.error('No user name available');\n        return;\n      }\n\n      // Merge new ratings with existing ones, preserving wins/losses\n      const updatedRatings = {\n        ...ratings\n      };\n      finalRatings.forEach(({\n        name,\n        rating\n      }) => {\n        const existingRating = typeof updatedRatings[name] === 'object' ? updatedRatings[name] : {\n          rating: updatedRatings[name] || 1500,\n          wins: 0,\n          losses: 0\n        };\n\n        // If rating improved, count as a win, otherwise a loss\n        const isImprovement = rating > (existingRating.rating || 1500);\n        updatedRatings[name] = {\n          rating: Math.round(rating),\n          wins: (existingRating.wins || 0) + (isImprovement ? 1 : 0),\n          losses: (existingRating.losses || 0) + (isImprovement ? 0 : 1)\n        };\n      });\n\n      // Get name_ids from name_options table\n      const {\n        data: nameOptions,\n        error: nameError\n      } = await supabase.from('name_options').select('id, name').in('name', Object.keys(updatedRatings));\n      if (nameError) {\n        console.error('Error fetching name options:', nameError);\n        return;\n      }\n\n      // Create a map of name to name_id\n      const nameToIdMap = nameOptions.reduce((acc, {\n        id,\n        name\n      }) => {\n        acc[name] = id;\n        return acc;\n      }, {});\n\n      // Prepare records for database\n      const recordsToUpsert = Object.entries(updatedRatings).map(([name, data]) => {\n        const name_id = nameToIdMap[name];\n        if (!name_id) {\n          console.warn(`No name_id found for ${name}`);\n          return null;\n        }\n        return {\n          user_name: userName,\n          // Use userName directly\n          name_id,\n          rating: data.rating,\n          wins: data.wins,\n          losses: data.losses,\n          updated_at: new Date().toISOString()\n        };\n      }).filter(Boolean);\n      if (recordsToUpsert.length > 0) {\n        // First ensure user exists in app_users\n        const {\n          error: userError\n        } = await supabase.from('app_users').insert({\n          user_name: userName\n        }).select().single();\n\n        // Ignore unique violation error as it means user already exists\n        if (userError && userError.code !== '23505') {\n          console.error('Error ensuring user exists:', userError);\n          return;\n        }\n\n        // Then update ratings\n        const {\n          error: upsertError\n        } = await supabase.from('cat_name_ratings').upsert(recordsToUpsert, {\n          onConflict: 'user_name,name_id',\n          returning: 'minimal'\n        });\n        if (upsertError) {\n          console.error('Error updating ratings:', upsertError);\n          return;\n        }\n      }\n\n      // Update local state\n      setRatings(updatedRatings);\n      setTournamentComplete(true);\n    } catch (error) {\n      console.error('Tournament completion error:', error);\n    }\n  };\n  const handleStartNewTournament = () => {\n    setTournamentComplete(false);\n    setTournamentNames(null);\n    setView('tournament');\n  };\n  const handleTournamentSetup = names => {\n    console.log('App - Setting up tournament with names:', names);\n    setTournamentNames(names);\n  };\n  const handleUpdateRatings = adjustedRatings => {\n    // Convert array to object format and merge with existing ratings\n    const updatedRatings = {\n      ...ratings\n    };\n    adjustedRatings.forEach(({\n      name,\n      rating,\n      wins,\n      losses\n    }) => {\n      const existingRating = typeof updatedRatings[name] === 'object' ? updatedRatings[name] : {\n        rating: updatedRatings[name] || 1500,\n        wins: 0,\n        losses: 0\n      };\n      updatedRatings[name] = {\n        name_id: existingRating.name_id,\n        rating: Math.round(rating),\n        wins: wins || existingRating.wins || 0,\n        losses: losses || existingRating.losses || 0\n      };\n    });\n    setRatings(updatedRatings);\n\n    // Update ratings in Supabase\n    const updateRatings = async () => {\n      try {\n        // Get the current session\n        const {\n          data: {\n            session\n          },\n          error: sessionError\n        } = await supabase.auth.getSession();\n        if (sessionError) throw sessionError;\n        if (!session) throw new Error('No active session');\n\n        // First, get name_ids from name_options table\n        const {\n          data: nameOptions,\n          error: nameError\n        } = await supabase.from('name_options').select('id, name').in('name', Object.keys(updatedRatings));\n        if (nameError) throw nameError;\n        if (!(nameOptions !== null && nameOptions !== void 0 && nameOptions.length)) {\n          console.warn('No matching name options found');\n          return;\n        }\n\n        // Create a map of name to name_id\n        const nameToIdMap = nameOptions.reduce((acc, {\n          id,\n          name\n        }) => {\n          acc[name] = id;\n          return acc;\n        }, {});\n\n        // Prepare records with proper name_ids\n        const recordsToUpsert = Object.entries(updatedRatings).map(([name, data]) => {\n          const name_id = nameToIdMap[name];\n          if (!name_id) {\n            console.warn(`No name_id found for ${name}`);\n            return null;\n          }\n          return {\n            user_name: session.user.id,\n            name_id: name_id,\n            rating: data.rating,\n            wins: data.wins || 0,\n            losses: data.losses || 0,\n            updated_at: new Date().toISOString()\n          };\n        }).filter(Boolean); // Remove null entries\n\n        if (!recordsToUpsert.length) {\n          console.warn('No valid records to update');\n          return;\n        }\n\n        // Use upsert operation (insert or update based on primary key)\n        const {\n          error: upsertError\n        } = await supabase.from('cat_name_ratings').upsert(recordsToUpsert, {\n          onConflict: 'user_name,name_id',\n          returning: 'minimal' // Don't need to return the updated records\n        });\n        if (upsertError) throw upsertError;\n      } catch (error) {\n        console.error('Error updating ratings:', error);\n        // Don't throw here, just log the error\n        // This prevents the unhandled promise rejection\n      }\n    };\n\n    // Execute the update\n    updateRatings();\n  };\n  const handleLogout = async () => {\n    logout();\n  };\n  if (!isLoggedIn) {\n    return /*#__PURE__*/_jsxDEV(Login, {\n      onLogin: login\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 12\n    }, this);\n  }\n  const renderMainContent = () => {\n    if (view === 'profile') {\n      return /*#__PURE__*/_jsxDEV(Profile, {\n        userName: userName,\n        onStartNewTournament: handleStartNewTournament,\n        ratings: ratings,\n        onUpdateRatings: handleUpdateRatings\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 9\n      }, this);\n    }\n    if (tournamentComplete) {\n      return /*#__PURE__*/_jsxDEV(Results, {\n        ratings: ratings,\n        onStartNew: handleStartNewTournament,\n        userName: userName,\n        onUpdateRatings: handleUpdateRatings,\n        currentTournamentNames: tournamentNames\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 9\n      }, this);\n    }\n    if (!tournamentNames) {\n      return /*#__PURE__*/_jsxDEV(TournamentSetup, {\n        onStart: handleTournamentSetup,\n        userName: userName,\n        existingRatings: ratings\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 9\n      }, this);\n    }\n    return /*#__PURE__*/_jsxDEV(Tournament, {\n      onComplete: handleTournamentComplete,\n      existingRatings: ratings,\n      names: tournamentNames,\n      userName: userName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-background\",\n        style: {\n          backgroundImage: `url(${process.env.PUBLIC_URL}/images/cat.gif)`\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: `${process.env.PUBLIC_URL}/images/cat.gif`,\n        alt: \"Cat animation\",\n        className: \"header-image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Cat Name Picker\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"user-controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"nav-menu\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setView('tournament'),\n            className: view === 'tournament' ? 'active' : '',\n            children: \"Tournament\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 302,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setView('profile'),\n            className: view === 'profile' ? 'active' : '',\n            children: \"My Profile\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 308,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 301,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"user-welcome\",\n          children: [\"Welcome, \", userName, \"!\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 315,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleLogout,\n          className: \"logout-button\",\n          children: \"Logout\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 316,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: /*#__PURE__*/_jsxDEV(ErrorBoundary, {\n        children: renderMainContent()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 322,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 290,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"E84eBk8RR1At08JZ0cGFZmYQ3Qc=\", false, function () {\n  return [useUserSession];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Tournament","Results","ErrorBoundary","Login","Profile","TournamentSetup","useUserSession","useSupabaseStorage","supabase","jsxDEV","_jsxDEV","App","_s","userName","isLoggedIn","login","logout","session","ratings","setRatings","view","setView","tournamentComplete","setTournamentComplete","tournamentNames","setTournamentNames","console","log","handleTournamentComplete","finalRatings","error","updatedRatings","forEach","name","rating","existingRating","wins","losses","isImprovement","Math","round","data","nameOptions","nameError","from","select","in","Object","keys","nameToIdMap","reduce","acc","id","recordsToUpsert","entries","map","name_id","warn","user_name","updated_at","Date","toISOString","filter","Boolean","length","userError","insert","single","code","upsertError","upsert","onConflict","returning","handleStartNewTournament","handleTournamentSetup","names","handleUpdateRatings","adjustedRatings","updateRatings","sessionError","auth","getSession","Error","user","handleLogout","onLogin","fileName","_jsxFileName","lineNumber","columnNumber","renderMainContent","onStartNewTournament","onUpdateRatings","onStartNew","currentTournamentNames","onStart","existingRatings","onComplete","className","children","style","backgroundImage","process","env","PUBLIC_URL","src","alt","onClick","_c","$RefreshReg$"],"sources":["/Users/aaron/Desktop/Side Projects/name-picker/meow-namester-react/src/App.js"],"sourcesContent":["/**\n * @module App\n * @description Main application component for the cat name tournament app.\n * Manages the overall application state and tournament flow, including:\n * - Name input and management\n * - Tournament progression\n * - Rating calculations\n * - Results display\n * \n * Uses the Elo rating system for ranking and a custom sorting algorithm\n * for determining the best cat name through user preferences.\n * \n * @component\n * @returns {JSX.Element} The complete application UI\n */\n\nimport React, { useState } from 'react';\nimport { \n  Tournament, \n  Results, \n  ErrorBoundary,\n  Login,\n  Profile,\n  TournamentSetup\n} from './components';\nimport useUserSession from './hooks/useUserSession';\nimport useSupabaseStorage from './supabase/useSupabaseStorage';\nimport { supabase } from './supabase/supabaseClient';\n\nfunction App() {\n  const { userName, isLoggedIn, login, logout, session } = useUserSession();\n  const [ratings, setRatings] = useState({});\n  const [view, setView] = useState('tournament');\n  const [tournamentComplete, setTournamentComplete] = useState(false);\n  const [tournamentNames, setTournamentNames] = useState(null);\n\n  console.log('App - Current ratings:', ratings);\n  console.log('App - Tournament names:', tournamentNames);\n\n  const handleTournamentComplete = async (finalRatings) => {\n    try {\n      if (!userName) {\n        console.error('No user name available');\n        return;\n      }\n\n      // Merge new ratings with existing ones, preserving wins/losses\n      const updatedRatings = { ...ratings };\n      finalRatings.forEach(({ name, rating }) => {\n        const existingRating = typeof updatedRatings[name] === 'object'\n          ? updatedRatings[name]\n          : { rating: updatedRatings[name] || 1500, wins: 0, losses: 0 };\n\n        // If rating improved, count as a win, otherwise a loss\n        const isImprovement = rating > (existingRating.rating || 1500);\n        updatedRatings[name] = {\n          rating: Math.round(rating),\n          wins: (existingRating.wins || 0) + (isImprovement ? 1 : 0),\n          losses: (existingRating.losses || 0) + (isImprovement ? 0 : 1)\n        };\n      });\n\n      // Get name_ids from name_options table\n      const { data: nameOptions, error: nameError } = await supabase\n        .from('name_options')\n        .select('id, name')\n        .in('name', Object.keys(updatedRatings));\n\n      if (nameError) {\n        console.error('Error fetching name options:', nameError);\n        return;\n      }\n\n      // Create a map of name to name_id\n      const nameToIdMap = nameOptions.reduce((acc, { id, name }) => {\n        acc[name] = id;\n        return acc;\n      }, {});\n\n      // Prepare records for database\n      const recordsToUpsert = Object.entries(updatedRatings)\n        .map(([name, data]) => {\n          const name_id = nameToIdMap[name];\n          if (!name_id) {\n            console.warn(`No name_id found for ${name}`);\n            return null;\n          }\n          return {\n            user_name: userName,  // Use userName directly\n            name_id,\n            rating: data.rating,\n            wins: data.wins,\n            losses: data.losses,\n            updated_at: new Date().toISOString()\n          };\n        })\n        .filter(Boolean);\n\n      if (recordsToUpsert.length > 0) {\n        // First ensure user exists in app_users\n        const { error: userError } = await supabase\n          .from('app_users')\n          .insert({ \n            user_name: userName \n          })\n          .select()\n          .single();\n\n        // Ignore unique violation error as it means user already exists\n        if (userError && userError.code !== '23505') {\n          console.error('Error ensuring user exists:', userError);\n          return;\n        }\n\n        // Then update ratings\n        const { error: upsertError } = await supabase\n          .from('cat_name_ratings')\n          .upsert(recordsToUpsert, {\n            onConflict: 'user_name,name_id',\n            returning: 'minimal'\n          });\n\n        if (upsertError) {\n          console.error('Error updating ratings:', upsertError);\n          return;\n        }\n      }\n\n      // Update local state\n      setRatings(updatedRatings);\n      setTournamentComplete(true);\n\n    } catch (error) {\n      console.error('Tournament completion error:', error);\n    }\n  };\n\n  const handleStartNewTournament = () => {\n    setTournamentComplete(false);\n    setTournamentNames(null);\n    setView('tournament');\n  };\n\n  const handleTournamentSetup = (names) => {\n    console.log('App - Setting up tournament with names:', names);\n    setTournamentNames(names);\n  };\n\n  const handleUpdateRatings = (adjustedRatings) => {\n    // Convert array to object format and merge with existing ratings\n    const updatedRatings = { ...ratings };\n    adjustedRatings.forEach(({ name, rating, wins, losses }) => {\n      const existingRating = typeof updatedRatings[name] === 'object'\n        ? updatedRatings[name]\n        : { rating: updatedRatings[name] || 1500, wins: 0, losses: 0 };\n\n      updatedRatings[name] = {\n        name_id: existingRating.name_id,\n        rating: Math.round(rating),\n        wins: wins || existingRating.wins || 0,\n        losses: losses || existingRating.losses || 0\n      };\n    });\n\n    setRatings(updatedRatings);\n\n    // Update ratings in Supabase\n    const updateRatings = async () => {\n      try {\n        // Get the current session\n        const { data: { session }, error: sessionError } = await supabase.auth.getSession();\n        if (sessionError) throw sessionError;\n        if (!session) throw new Error('No active session');\n\n        // First, get name_ids from name_options table\n        const { data: nameOptions, error: nameError } = await supabase\n          .from('name_options')\n          .select('id, name')\n          .in('name', Object.keys(updatedRatings));\n\n        if (nameError) throw nameError;\n        if (!nameOptions?.length) {\n          console.warn('No matching name options found');\n          return;\n        }\n\n        // Create a map of name to name_id\n        const nameToIdMap = nameOptions.reduce((acc, { id, name }) => {\n          acc[name] = id;\n          return acc;\n        }, {});\n\n        // Prepare records with proper name_ids\n        const recordsToUpsert = Object.entries(updatedRatings)\n          .map(([name, data]) => {\n            const name_id = nameToIdMap[name];\n            if (!name_id) {\n              console.warn(`No name_id found for ${name}`);\n              return null;\n            }\n            return {\n              user_name: session.user.id,\n              name_id: name_id,\n              rating: data.rating,\n              wins: data.wins || 0,\n              losses: data.losses || 0,\n              updated_at: new Date().toISOString()\n            };\n          })\n          .filter(Boolean); // Remove null entries\n\n        if (!recordsToUpsert.length) {\n          console.warn('No valid records to update');\n          return;\n        }\n\n        // Use upsert operation (insert or update based on primary key)\n        const { error: upsertError } = await supabase\n          .from('cat_name_ratings')\n          .upsert(recordsToUpsert, {\n            onConflict: 'user_name,name_id',\n            returning: 'minimal' // Don't need to return the updated records\n          });\n\n        if (upsertError) throw upsertError;\n      } catch (error) {\n        console.error('Error updating ratings:', error);\n        // Don't throw here, just log the error\n        // This prevents the unhandled promise rejection\n      }\n    };\n\n    // Execute the update\n    updateRatings();\n  };\n\n  const handleLogout = async () => {\n    logout();\n  };\n\n  if (!isLoggedIn) {\n    return <Login onLogin={login} />;\n  }\n\n  const renderMainContent = () => {\n    if (view === 'profile') {\n      return (\n        <Profile \n          userName={userName}\n          onStartNewTournament={handleStartNewTournament}\n          ratings={ratings}\n          onUpdateRatings={handleUpdateRatings}\n        />\n      );\n    }\n\n    if (tournamentComplete) {\n      return (\n        <Results \n          ratings={ratings}\n          onStartNew={handleStartNewTournament}\n          userName={userName}\n          onUpdateRatings={handleUpdateRatings}\n          currentTournamentNames={tournamentNames}\n        />\n      );\n    }\n\n    if (!tournamentNames) {\n      return (\n        <TournamentSetup \n          onStart={handleTournamentSetup}\n          userName={userName}\n          existingRatings={ratings}\n        />\n      );\n    }\n\n    return (\n      <Tournament \n        onComplete={handleTournamentComplete}\n        existingRatings={ratings}\n        names={tournamentNames}\n        userName={userName}\n      />\n    );\n  };\n\n  return (\n    <div className=\"app\">\n      <header>\n        <div \n          className=\"header-background\"\n          style={{ \n            backgroundImage: `url(${process.env.PUBLIC_URL}/images/cat.gif)` \n          }}\n        ></div>\n        <img src={`${process.env.PUBLIC_URL}/images/cat.gif`} alt=\"Cat animation\" className=\"header-image\" />\n        <h1>Cat Name Picker</h1>\n        <div className=\"user-controls\">\n          <div className=\"nav-menu\">\n            <button \n              onClick={() => setView('tournament')}\n              className={view === 'tournament' ? 'active' : ''}\n            >\n              Tournament\n            </button>\n            <button \n              onClick={() => setView('profile')}\n              className={view === 'profile' ? 'active' : ''}\n            >\n              My Profile\n            </button>\n          </div>\n          <span className=\"user-welcome\">Welcome, {userName}!</span>\n          <button onClick={handleLogout} className=\"logout-button\">\n            Logout\n          </button>\n        </div>\n      </header>\n\n      <main>\n        <ErrorBoundary>\n          {renderMainContent()}\n        </ErrorBoundary>\n      </main>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}