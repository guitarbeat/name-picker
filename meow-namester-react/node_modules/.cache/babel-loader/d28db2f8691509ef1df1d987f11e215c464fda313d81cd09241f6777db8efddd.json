{"ast":null,"code":"var _jsxFileName = \"/Users/aaron/Desktop/Side Projects/name-picker/meow-namester-react/src/App.js\",\n  _s = $RefreshSig$();\n/**\n * @module App\n * @description Main application component for the cat name tournament app.\n * Manages the overall application state and tournament flow, including:\n * - Name input and management\n * - Tournament progression\n * - Rating calculations\n * - Results display\n * \n * Uses the Elo rating system for ranking and a custom sorting algorithm\n * for determining the best cat name through user preferences.\n * \n * @component\n * @returns {JSX.Element} The complete application UI\n */\n\nimport React, { useState } from 'react';\nimport { Tournament, Results, ErrorBoundary, Login, Profile, TournamentSetup } from './components';\nimport useUserSession from './hooks/useUserSession';\nimport useSupabaseStorage from './supabase/useSupabaseStorage';\nimport { supabase } from './supabase/supabaseClient';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const {\n    userName,\n    isLoggedIn,\n    login,\n    logout,\n    session\n  } = useUserSession();\n  const [ratings, setRatings] = useState({});\n  const [view, setView] = useState('tournament');\n  const [tournamentComplete, setTournamentComplete] = useState(false);\n  const [tournamentNames, setTournamentNames] = useState(null);\n  console.log('App - Current ratings:', ratings);\n  console.log('App - Tournament names:', tournamentNames);\n  const handleTournamentComplete = finalRatings => {\n    console.log('App - Tournament complete with ratings:', finalRatings);\n\n    // Merge new ratings with existing ones\n    const updatedRatings = {\n      ...ratings\n    };\n    finalRatings.forEach(({\n      name,\n      rating\n    }) => {\n      updatedRatings[name] = rating;\n    });\n    console.log('App - Updated ratings after merge:', updatedRatings);\n    setRatings(updatedRatings);\n    setTournamentComplete(true);\n  };\n  const handleStartNewTournament = () => {\n    setTournamentComplete(false);\n    setTournamentNames(null);\n    setView('tournament');\n  };\n  const handleTournamentSetup = names => {\n    console.log('App - Setting up tournament with names:', names);\n    setTournamentNames(names);\n  };\n  const handleUpdateRatings = adjustedRatings => {\n    console.log('App - Updating ratings with:', adjustedRatings);\n\n    // Ensure adjustedRatings is an array\n    const ratingsArray = Array.isArray(adjustedRatings) ? adjustedRatings : Object.entries(adjustedRatings).map(([name, rating]) => ({\n      name,\n      rating\n    }));\n\n    // Convert array to object format and merge with existing ratings\n    const updatedRatings = {\n      ...ratings\n    };\n    ratingsArray.forEach(({\n      name,\n      rating\n    }) => {\n      updatedRatings[name] = Math.round(rating);\n    });\n    console.log('App - Final updated ratings:', updatedRatings);\n    setRatings(updatedRatings);\n\n    // Update ratings in Supabase\n    const updateRatings = async () => {\n      try {\n        if (!(session !== null && session !== void 0 && session.user)) {\n          throw new Error('No active session');\n        }\n\n        // Prepare the data with the correct structure\n        const ratingsData = ratingsArray.map(({\n          name,\n          rating\n        }) => ({\n          user_name: session.user.user_metadata.user_name || session.user.email,\n          cat_name: name,\n          rating: Math.round(rating),\n          updated_at: new Date().toISOString()\n        }));\n\n        // Perform the upsert operation\n        const {\n          error: upsertError\n        } = await supabase.from('cat_name_ratings').upsert(ratingsData, {\n          onConflict: 'user_name,cat_name',\n          returning: true\n        });\n        if (upsertError) {\n          console.error('Upsert error:', upsertError);\n          throw upsertError;\n        }\n        console.log('Ratings updated successfully');\n      } catch (err) {\n        console.error('Error updating ratings:', err);\n        if (err.message === 'No active session') {\n          alert('Please log in again to save your ratings.');\n        } else if (err.code === '42501') {\n          alert('Permission denied. Please ensure you are logged in with the correct account.');\n        } else {\n          console.warn('Failed to save to database, but local state is updated');\n        }\n      }\n    };\n\n    // Execute the update\n    updateRatings();\n  };\n  const handleLogout = async () => {\n    logout();\n  };\n  if (!isLoggedIn) {\n    return /*#__PURE__*/_jsxDEV(Login, {\n      onLogin: login\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 12\n    }, this);\n  }\n  const renderMainContent = () => {\n    if (view === 'profile') {\n      return /*#__PURE__*/_jsxDEV(Profile, {\n        userName: userName,\n        onStartNewTournament: handleStartNewTournament,\n        ratings: ratings,\n        onUpdateRatings: handleUpdateRatings\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }, this);\n    }\n    if (tournamentComplete) {\n      return /*#__PURE__*/_jsxDEV(Results, {\n        ratings: ratings,\n        onStartNew: handleStartNewTournament,\n        userName: userName,\n        onUpdateRatings: handleUpdateRatings,\n        currentTournamentNames: tournamentNames\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 9\n      }, this);\n    }\n    if (!tournamentNames) {\n      return /*#__PURE__*/_jsxDEV(TournamentSetup, {\n        onStart: handleTournamentSetup,\n        userName: userName,\n        existingRatings: ratings\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 9\n      }, this);\n    }\n    return /*#__PURE__*/_jsxDEV(Tournament, {\n      onComplete: handleTournamentComplete,\n      existingRatings: ratings,\n      names: tournamentNames,\n      userName: userName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-background\",\n        style: {\n          backgroundImage: `url(${process.env.PUBLIC_URL}/images/cat.gif)`\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: `${process.env.PUBLIC_URL}/images/cat.gif`,\n        alt: \"Cat animation\",\n        className: \"header-image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Cat Name Picker\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"user-controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"nav-menu\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setView('tournament'),\n            className: view === 'tournament' ? 'active' : '',\n            children: \"Tournament\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 192,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setView('profile'),\n            className: view === 'profile' ? 'active' : '',\n            children: \"My Profile\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"user-welcome\",\n          children: [\"Welcome, \", userName, \"!\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleLogout,\n          className: \"logout-button\",\n          children: \"Logout\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: /*#__PURE__*/_jsxDEV(ErrorBoundary, {\n        children: renderMainContent()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 180,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"E84eBk8RR1At08JZ0cGFZmYQ3Qc=\", false, function () {\n  return [useUserSession];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Tournament","Results","ErrorBoundary","Login","Profile","TournamentSetup","useUserSession","useSupabaseStorage","supabase","jsxDEV","_jsxDEV","App","_s","userName","isLoggedIn","login","logout","session","ratings","setRatings","view","setView","tournamentComplete","setTournamentComplete","tournamentNames","setTournamentNames","console","log","handleTournamentComplete","finalRatings","updatedRatings","forEach","name","rating","handleStartNewTournament","handleTournamentSetup","names","handleUpdateRatings","adjustedRatings","ratingsArray","Array","isArray","Object","entries","map","Math","round","updateRatings","user","Error","ratingsData","user_name","user_metadata","email","cat_name","updated_at","Date","toISOString","error","upsertError","from","upsert","onConflict","returning","err","message","alert","code","warn","handleLogout","onLogin","fileName","_jsxFileName","lineNumber","columnNumber","renderMainContent","onStartNewTournament","onUpdateRatings","onStartNew","currentTournamentNames","onStart","existingRatings","onComplete","className","children","style","backgroundImage","process","env","PUBLIC_URL","src","alt","onClick","_c","$RefreshReg$"],"sources":["/Users/aaron/Desktop/Side Projects/name-picker/meow-namester-react/src/App.js"],"sourcesContent":["/**\n * @module App\n * @description Main application component for the cat name tournament app.\n * Manages the overall application state and tournament flow, including:\n * - Name input and management\n * - Tournament progression\n * - Rating calculations\n * - Results display\n * \n * Uses the Elo rating system for ranking and a custom sorting algorithm\n * for determining the best cat name through user preferences.\n * \n * @component\n * @returns {JSX.Element} The complete application UI\n */\n\nimport React, { useState } from 'react';\nimport { \n  Tournament, \n  Results, \n  ErrorBoundary,\n  Login,\n  Profile,\n  TournamentSetup\n} from './components';\nimport useUserSession from './hooks/useUserSession';\nimport useSupabaseStorage from './supabase/useSupabaseStorage';\nimport { supabase } from './supabase/supabaseClient';\n\nfunction App() {\n  const { userName, isLoggedIn, login, logout, session } = useUserSession();\n  const [ratings, setRatings] = useState({});\n  const [view, setView] = useState('tournament');\n  const [tournamentComplete, setTournamentComplete] = useState(false);\n  const [tournamentNames, setTournamentNames] = useState(null);\n\n  console.log('App - Current ratings:', ratings);\n  console.log('App - Tournament names:', tournamentNames);\n\n  const handleTournamentComplete = (finalRatings) => {\n    console.log('App - Tournament complete with ratings:', finalRatings);\n    \n    // Merge new ratings with existing ones\n    const updatedRatings = { ...ratings };\n    finalRatings.forEach(({ name, rating }) => {\n      updatedRatings[name] = rating;\n    });\n\n    console.log('App - Updated ratings after merge:', updatedRatings);\n    setRatings(updatedRatings);\n    setTournamentComplete(true);\n  };\n\n  const handleStartNewTournament = () => {\n    setTournamentComplete(false);\n    setTournamentNames(null);\n    setView('tournament');\n  };\n\n  const handleTournamentSetup = (names) => {\n    console.log('App - Setting up tournament with names:', names);\n    setTournamentNames(names);\n  };\n\n  const handleUpdateRatings = (adjustedRatings) => {\n    console.log('App - Updating ratings with:', adjustedRatings);\n    \n    // Ensure adjustedRatings is an array\n    const ratingsArray = Array.isArray(adjustedRatings) \n      ? adjustedRatings \n      : Object.entries(adjustedRatings).map(([name, rating]) => ({ name, rating }));\n\n    // Convert array to object format and merge with existing ratings\n    const updatedRatings = { ...ratings };\n    ratingsArray.forEach(({ name, rating }) => {\n      updatedRatings[name] = Math.round(rating);\n    });\n\n    console.log('App - Final updated ratings:', updatedRatings);\n    setRatings(updatedRatings);\n\n    // Update ratings in Supabase\n    const updateRatings = async () => {\n      try {\n        if (!session?.user) {\n          throw new Error('No active session');\n        }\n\n        // Prepare the data with the correct structure\n        const ratingsData = ratingsArray.map(({ name, rating }) => ({\n          user_name: session.user.user_metadata.user_name || session.user.email,\n          cat_name: name,\n          rating: Math.round(rating),\n          updated_at: new Date().toISOString()\n        }));\n\n        // Perform the upsert operation\n        const { error: upsertError } = await supabase\n          .from('cat_name_ratings')\n          .upsert(ratingsData, {\n            onConflict: 'user_name,cat_name',\n            returning: true\n          });\n\n        if (upsertError) {\n          console.error('Upsert error:', upsertError);\n          throw upsertError;\n        }\n\n        console.log('Ratings updated successfully');\n      } catch (err) {\n        console.error('Error updating ratings:', err);\n        if (err.message === 'No active session') {\n          alert('Please log in again to save your ratings.');\n        } else if (err.code === '42501') {\n          alert('Permission denied. Please ensure you are logged in with the correct account.');\n        } else {\n          console.warn('Failed to save to database, but local state is updated');\n        }\n      }\n    };\n\n    // Execute the update\n    updateRatings();\n  };\n\n  const handleLogout = async () => {\n    logout();\n  };\n\n  if (!isLoggedIn) {\n    return <Login onLogin={login} />;\n  }\n\n  const renderMainContent = () => {\n    if (view === 'profile') {\n      return (\n        <Profile \n          userName={userName}\n          onStartNewTournament={handleStartNewTournament}\n          ratings={ratings}\n          onUpdateRatings={handleUpdateRatings}\n        />\n      );\n    }\n\n    if (tournamentComplete) {\n      return (\n        <Results \n          ratings={ratings}\n          onStartNew={handleStartNewTournament}\n          userName={userName}\n          onUpdateRatings={handleUpdateRatings}\n          currentTournamentNames={tournamentNames}\n        />\n      );\n    }\n\n    if (!tournamentNames) {\n      return (\n        <TournamentSetup \n          onStart={handleTournamentSetup}\n          userName={userName}\n          existingRatings={ratings}\n        />\n      );\n    }\n\n    return (\n      <Tournament \n        onComplete={handleTournamentComplete}\n        existingRatings={ratings}\n        names={tournamentNames}\n        userName={userName}\n      />\n    );\n  };\n\n  return (\n    <div className=\"app\">\n      <header>\n        <div \n          className=\"header-background\"\n          style={{ \n            backgroundImage: `url(${process.env.PUBLIC_URL}/images/cat.gif)` \n          }}\n        ></div>\n        <img src={`${process.env.PUBLIC_URL}/images/cat.gif`} alt=\"Cat animation\" className=\"header-image\" />\n        <h1>Cat Name Picker</h1>\n        <div className=\"user-controls\">\n          <div className=\"nav-menu\">\n            <button \n              onClick={() => setView('tournament')}\n              className={view === 'tournament' ? 'active' : ''}\n            >\n              Tournament\n            </button>\n            <button \n              onClick={() => setView('profile')}\n              className={view === 'profile' ? 'active' : ''}\n            >\n              My Profile\n            </button>\n          </div>\n          <span className=\"user-welcome\">Welcome, {userName}!</span>\n          <button onClick={handleLogout} className=\"logout-button\">\n            Logout\n          </button>\n        </div>\n      </header>\n\n      <main>\n        <ErrorBoundary>\n          {renderMainContent()}\n        </ErrorBoundary>\n      </main>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}