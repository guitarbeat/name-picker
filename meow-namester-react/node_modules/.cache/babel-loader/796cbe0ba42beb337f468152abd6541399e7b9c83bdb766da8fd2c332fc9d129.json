{"ast":null,"code":"var _jsxFileName = \"/Users/aaron/Desktop/Side Projects/name-picker/meow-namester-react/src/components/Results/ResultsTable.js\";\n/**\n * @module ResultsTable\n * @description A component that displays a sorted table of cat names and their ratings.\n * Handles the sorting and formatting of ratings data.\n * \n * @example\n * <ResultsTable \n *   ratings={[{ name: \"Whiskers\", rating: 1450 }, { name: \"Mittens\", rating: 1380 }]}\n * />\n * \n * @component\n * @param {Object} props\n * @param {Object} props.ratings - Object with name and rating properties\n * @param {Array} props.orderedNames - Array of ordered cat names\n * @returns {JSX.Element} Formatted table of cat names and their ratings\n */\n\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ResultsTable({\n  ratings = {},\n  orderedNames\n}) {\n  // Ensure ratings is an object and handle null/undefined\n  const ratingsObj = ratings || {};\n\n  // Convert ratings object to array and sort by rating, unless ordered names provided\n  const sortedRatings = orderedNames ? orderedNames.map(name => ({\n    name,\n    rating: Math.round(typeof ratingsObj[name] === 'number' ? ratingsObj[name] : typeof ratingsObj[name] === 'object' ? ratingsObj[name].rating : 1500)\n  })) : Object.entries(ratingsObj).map(([name, rating]) => ({\n    name,\n    rating: Math.round(typeof rating === 'number' ? rating : typeof rating === 'object' ? rating.rating : 1500)\n  })).sort((a, b) => b.rating - a.rating);\n  if (!sortedRatings.length) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"no-results\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No ratings available yet.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"help-text\",\n        children: \"Complete a tournament to see rankings here.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"ratings-list\",\n    children: sortedRatings.map(({\n      name,\n      rating\n    }, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"rating-item\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"rank\",\n        children: index + 1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"name\",\n        children: name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"rating\",\n        children: [\"Rating: \", Math.round(rating)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this)]\n    }, name, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n}\n_c = ResultsTable;\nexport default ResultsTable;\nvar _c;\n$RefreshReg$(_c, \"ResultsTable\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","ResultsTable","ratings","orderedNames","ratingsObj","sortedRatings","map","name","rating","Math","round","Object","entries","sort","a","b","length","className","children","fileName","_jsxFileName","lineNumber","columnNumber","index","_c","$RefreshReg$"],"sources":["/Users/aaron/Desktop/Side Projects/name-picker/meow-namester-react/src/components/Results/ResultsTable.js"],"sourcesContent":["/**\n * @module ResultsTable\n * @description A component that displays a sorted table of cat names and their ratings.\n * Handles the sorting and formatting of ratings data.\n * \n * @example\n * <ResultsTable \n *   ratings={[{ name: \"Whiskers\", rating: 1450 }, { name: \"Mittens\", rating: 1380 }]}\n * />\n * \n * @component\n * @param {Object} props\n * @param {Object} props.ratings - Object with name and rating properties\n * @param {Array} props.orderedNames - Array of ordered cat names\n * @returns {JSX.Element} Formatted table of cat names and their ratings\n */\n\nimport React from 'react';\n\nfunction ResultsTable({ ratings = {}, orderedNames }) {\n  // Ensure ratings is an object and handle null/undefined\n  const ratingsObj = ratings || {};\n  \n  // Convert ratings object to array and sort by rating, unless ordered names provided\n  const sortedRatings = orderedNames\n    ? orderedNames.map(name => ({\n        name,\n        rating: Math.round(typeof ratingsObj[name] === 'number' ? ratingsObj[name] : \n          (typeof ratingsObj[name] === 'object' ? ratingsObj[name].rating : 1500))\n      }))\n    : Object.entries(ratingsObj)\n        .map(([name, rating]) => ({\n          name,\n          rating: Math.round(typeof rating === 'number' ? rating : \n            (typeof rating === 'object' ? rating.rating : 1500))\n        }))\n        .sort((a, b) => b.rating - a.rating);\n\n  if (!sortedRatings.length) {\n    return (\n      <div className=\"no-results\">\n        <p>No ratings available yet.</p>\n        <p className=\"help-text\">Complete a tournament to see rankings here.</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"ratings-list\">\n      {sortedRatings.map(({ name, rating }, index) => (\n        <div key={name} className=\"rating-item\">\n          <span className=\"rank\">{index + 1}</span>\n          <span className=\"name\">{name}</span>\n          <span className=\"rating\">Rating: {Math.round(rating)}</span>\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default ResultsTable; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}