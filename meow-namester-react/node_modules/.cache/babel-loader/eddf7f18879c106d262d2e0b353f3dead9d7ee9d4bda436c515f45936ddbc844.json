{"ast":null,"code":"import{useState,useEffect,useCallback}from'react';import{PreferenceSorter}from'../components/Tournament/PreferenceSorter';import EloRating from'../components/Tournament/EloRating';export function useTournament(_ref){let{names=[],existingRatings={},onComplete}=_ref;const[currentMatch,setCurrentMatch]=useState(null);const[isTransitioning,setIsTransitioning]=useState(false);const[roundNumber,setRoundNumber]=useState(1);const[currentMatchNumber,setCurrentMatchNumber]=useState(1);const[totalMatches,setTotalMatches]=useState(1);const[sorter,setSorter]=useState(null);const[elo]=useState(()=>new EloRating());const[resolveVote,setResolveVote]=useState(null);useEffect(()=>{if(!names||names.length===0){console.log('No names provided for tournament');return;}console.log('Starting new tournament with names:',names);const nameStrings=names.map(n=>n.name);const newSorter=new PreferenceSorter(nameStrings);setSorter(newSorter);const n=names.length;const estimatedMatches=Math.ceil(n*Math.log2(n));setTotalMatches(estimatedMatches);setCurrentMatchNumber(1);setRoundNumber(1);runTournament(newSorter);},[names]);const runTournament=async tournamentSorter=>{try{const initialState={names,existingRatings,currentMatchNumber:1,roundNumber:1};localStorage.setItem('tournamentState',JSON.stringify(initialState));const sortedResults=await tournamentSorter.sort(async(leftName,rightName)=>{const left=names.find(n=>n.name===leftName);const right=names.find(n=>n.name===rightName);setCurrentMatch({left,right});return new Promise(resolve=>{setResolveVote(()=>resolve);});});const ratingsArray=sortedResults.map((name,index)=>{const existingData=typeof existingRatings[name]==='object'?existingRatings[name]:{rating:existingRatings[name]||1500,matches:0};const totalNames=sortedResults.length;const position=index;const ratingSpread=Math.min(1000,totalNames*25);const positionValue=(totalNames-position-1)/(totalNames-1)*ratingSpread;const newPositionRating=1500+positionValue;const matchesPlayed=currentMatchNumber;const maxMatches=totalMatches;const blendFactor=Math.min(0.8,matchesPlayed/maxMatches*0.9);const newRating=Math.round(blendFactor*newPositionRating+(1-blendFactor)*existingData.rating);const minRating=1000;const maxRating=2000;const finalRating=Math.max(minRating,Math.min(maxRating,newRating));return{name,rating:finalRating,confidence:matchesPlayed/maxMatches};});localStorage.removeItem('tournamentState');onComplete(ratingsArray);}catch(error){console.error('Tournament error:',error);const savedState=localStorage.getItem('tournamentState');if(savedState){const state=JSON.parse(savedState);setCurrentMatchNumber(state.currentMatchNumber);setRoundNumber(state.roundNumber);}}};const handleVote=useCallback(result=>{if(isTransitioning||!resolveVote)return;setIsTransitioning(true);let voteValue;switch(result){case'left':voteValue=-1;break;case'right':voteValue=1;break;case'both':voteValue=Math.random()*0.2-0.1;break;case'none':voteValue=Math.random()*0.1-0.05;break;default:voteValue=0;}localStorage.setItem('lastVote',JSON.stringify({matchNumber:currentMatchNumber,result:voteValue,timestamp:Date.now()}));resolveVote(voteValue);setCurrentMatchNumber(prev=>prev+1);if(currentMatchNumber%Math.ceil(names.length/2)===0){setRoundNumber(prev=>prev+1);}setTimeout(()=>{setIsTransitioning(false);},500);},[resolveVote,isTransitioning,currentMatchNumber,names.length]);const progress=Math.round(currentMatchNumber/totalMatches*100);return{currentMatch,isTransitioning,roundNumber,currentMatchNumber,totalMatches,progress,handleVote};}","map":{"version":3,"names":["useState","useEffect","useCallback","PreferenceSorter","EloRating","useTournament","_ref","names","existingRatings","onComplete","currentMatch","setCurrentMatch","isTransitioning","setIsTransitioning","roundNumber","setRoundNumber","currentMatchNumber","setCurrentMatchNumber","totalMatches","setTotalMatches","sorter","setSorter","elo","resolveVote","setResolveVote","length","console","log","nameStrings","map","n","name","newSorter","estimatedMatches","Math","ceil","log2","runTournament","tournamentSorter","initialState","localStorage","setItem","JSON","stringify","sortedResults","sort","leftName","rightName","left","find","right","Promise","resolve","ratingsArray","index","existingData","rating","matches","totalNames","position","ratingSpread","min","positionValue","newPositionRating","matchesPlayed","maxMatches","blendFactor","newRating","round","minRating","maxRating","finalRating","max","confidence","removeItem","error","savedState","getItem","state","parse","handleVote","result","voteValue","random","matchNumber","timestamp","Date","now","prev","setTimeout","progress"],"sources":["/Users/aaron/Desktop/Side Projects/name-picker/meow-namester-react/src/hooks/useTournament.js"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\nimport { PreferenceSorter } from '../components/Tournament/PreferenceSorter';\nimport EloRating from '../components/Tournament/EloRating';\n\nexport function useTournament({ names = [], existingRatings = {}, onComplete }) {\n  const [currentMatch, setCurrentMatch] = useState(null);\n  const [isTransitioning, setIsTransitioning] = useState(false);\n  const [roundNumber, setRoundNumber] = useState(1);\n  const [currentMatchNumber, setCurrentMatchNumber] = useState(1);\n  const [totalMatches, setTotalMatches] = useState(1);\n  const [sorter, setSorter] = useState(null);\n  const [elo] = useState(() => new EloRating());\n  const [resolveVote, setResolveVote] = useState(null);\n\n  useEffect(() => {\n    if (!names || names.length === 0) {\n      console.log('No names provided for tournament');\n      return;\n    }\n\n    console.log('Starting new tournament with names:', names);\n    const nameStrings = names.map(n => n.name);\n    const newSorter = new PreferenceSorter(nameStrings);\n    setSorter(newSorter);\n    \n    const n = names.length;\n    const estimatedMatches = Math.ceil(n * Math.log2(n));\n    setTotalMatches(estimatedMatches);\n    setCurrentMatchNumber(1);\n    setRoundNumber(1);\n\n    runTournament(newSorter);\n  }, [names]);\n\n  const runTournament = async (tournamentSorter) => {\n    try {\n      const initialState = {\n        names,\n        existingRatings,\n        currentMatchNumber: 1,\n        roundNumber: 1\n      };\n      localStorage.setItem('tournamentState', JSON.stringify(initialState));\n\n      const sortedResults = await tournamentSorter.sort(async (leftName, rightName) => {\n        const left = names.find(n => n.name === leftName);\n        const right = names.find(n => n.name === rightName);\n        setCurrentMatch({ left, right });\n        return new Promise((resolve) => {\n          setResolveVote(() => resolve);\n        });\n      });\n\n      const ratingsArray = sortedResults.map((name, index) => {\n        const existingData = typeof existingRatings[name] === 'object'\n          ? existingRatings[name]\n          : { rating: existingRatings[name] || 1500, matches: 0 };\n\n        const totalNames = sortedResults.length;\n        const position = index;\n        const ratingSpread = Math.min(1000, totalNames * 25);\n        const positionValue = ((totalNames - position - 1) / (totalNames - 1)) * ratingSpread;\n        const newPositionRating = 1500 + positionValue;\n        const matchesPlayed = currentMatchNumber;\n        const maxMatches = totalMatches;\n        const blendFactor = Math.min(0.8, (matchesPlayed / maxMatches) * 0.9);\n        const newRating = Math.round(\n          (blendFactor * newPositionRating) +\n          ((1 - blendFactor) * existingData.rating)\n        );\n        const minRating = 1000;\n        const maxRating = 2000;\n        const finalRating = Math.max(minRating, Math.min(maxRating, newRating));\n\n        return {\n          name,\n          rating: finalRating,\n          confidence: (matchesPlayed / maxMatches)\n        };\n      });\n\n      localStorage.removeItem('tournamentState');\n      onComplete(ratingsArray);\n    } catch (error) {\n      console.error('Tournament error:', error);\n      const savedState = localStorage.getItem('tournamentState');\n      if (savedState) {\n        const state = JSON.parse(savedState);\n        setCurrentMatchNumber(state.currentMatchNumber);\n        setRoundNumber(state.roundNumber);\n      }\n    }\n  };\n\n  const handleVote = useCallback((result) => {\n    if (isTransitioning || !resolveVote) return;\n\n    setIsTransitioning(true);\n    \n    let voteValue;\n    switch (result) {\n      case 'left':\n        voteValue = -1;\n        break;\n      case 'right':\n        voteValue = 1;\n        break;\n      case 'both':\n        voteValue = Math.random() * 0.2 - 0.1;\n        break;\n      case 'none':\n        voteValue = Math.random() * 0.1 - 0.05;\n        break;\n      default:\n        voteValue = 0;\n    }\n    \n    localStorage.setItem('lastVote', JSON.stringify({\n      matchNumber: currentMatchNumber,\n      result: voteValue,\n      timestamp: Date.now()\n    }));\n\n    resolveVote(voteValue);\n    setCurrentMatchNumber(prev => prev + 1);\n    \n    if (currentMatchNumber % Math.ceil(names.length / 2) === 0) {\n      setRoundNumber(prev => prev + 1);\n    }\n    \n    setTimeout(() => {\n      setIsTransitioning(false);\n    }, 500);\n  }, [resolveVote, isTransitioning, currentMatchNumber, names.length]);\n\n  const progress = Math.round((currentMatchNumber / totalMatches) * 100);\n\n  return {\n    currentMatch,\n    isTransitioning,\n    roundNumber,\n    currentMatchNumber,\n    totalMatches,\n    progress,\n    handleVote\n  };\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}