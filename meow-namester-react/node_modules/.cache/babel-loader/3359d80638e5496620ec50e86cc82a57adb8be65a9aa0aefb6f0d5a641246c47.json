{"ast":null,"code":"/**\n * @module PreferenceSorter\n * @description A class that implements a merge sort algorithm with custom comparisons\n * for sorting cat names based on user preferences. Uses recursive merge sort with\n * asynchronous comparisons to handle user input.\n * \n * @example\n * const sorter = new PreferenceSorter(['Whiskers', 'Mittens', 'Luna']);\n * const sorted = await sorter.sort(async (a, b) => {\n *   // Return -1 if a is preferred, 1 if b is preferred, 0 if equal\n *   return await getUserPreference(a, b);\n * });\n * \n * @class\n * @property {Array} namMember - Array of items to be sorted\n * @property {Array} rec - Internal record keeping array\n * @property {Array} ranks - Final sorted array\n */\n\nexport class PreferenceSorter {\n  constructor(items) {\n    this.namMember = [...items];\n    this.nrec = 0;\n    this.rec = new Array(items.length);\n    this.ranks = [];\n    console.log('PreferenceSorter initialized with items:', items);\n  }\n\n  /**\n   * Initiates the sorting process\n   * @param {Function} compareCallback - Async function that compares two items\n   * @returns {Promise<Array>} Sorted array based on comparison results\n   */\n  async sort(compareCallback) {\n    console.log('Starting sort process with items:', this.namMember);\n    const n = this.namMember.length;\n    for (let i = 0; i < n; i++) {\n      this.rec[i] = 0;\n    }\n    let mid = Math.floor(n / 2);\n    await this.sortRecursive(0, n - 1, compareCallback);\n    console.log('Sort completed. Final ranks:', this.ranks);\n    // Reverse the ranks array since we want winners at the top\n    this.ranks.reverse();\n    return this.ranks;\n  }\n\n  /**\n   * Recursive helper for the merge sort algorithm\n   * @private\n   * @param {number} left - Left boundary of current subarray\n   * @param {number} right - Right boundary of current subarray\n   * @param {Function} compareCallback - Comparison callback function\n   */\n  async sortRecursive(left, right, compareCallback) {\n    if (right - left < 1) {\n      if (left === right) {\n        this.ranks.push(this.namMember[left]);\n        console.log(`Added single item to ranks: ${this.namMember[left]}`);\n      }\n      return;\n    }\n    const mid = Math.floor((left + right) / 2);\n    console.log(`Splitting array at indices ${left}-${mid} and ${mid + 1}-${right}`);\n    await this.sortRecursive(left, mid, compareCallback);\n    await this.sortRecursive(mid + 1, right, compareCallback);\n    await this.mergeSubGroups(left, mid, right, compareCallback);\n  }\n\n  /**\n   * Merges two sorted subarrays\n   * @private\n   * @param {number} left - Start of first subarray\n   * @param {number} mid - End of first subarray\n   * @param {number} right - End of second subarray\n   * @param {Function} compareCallback - Comparison callback function\n   */\n  async mergeSubGroups(left, mid, right, compareCallback) {\n    console.log(`Merging subarrays: ${left}-${mid} with ${mid + 1}-${right}`);\n    let i = left;\n    let j = mid + 1;\n    const merged = [];\n    while (i <= mid && j <= right) {\n      console.log(`Comparing ${this.namMember[i]} with ${this.namMember[j]}`);\n      const result = await compareCallback(this.namMember[i], this.namMember[j]);\n      console.log(`Comparison result: ${result}`);\n      if (result <= -0.5) {\n        // Strong or slight preference for first name\n        console.log(`${this.namMember[i]} preferred over ${this.namMember[j]}`);\n        merged.push(this.namMember[i++]);\n      } else if (result >= 0.5) {\n        // Strong or slight preference for second name\n        console.log(`${this.namMember[j]} preferred over ${this.namMember[i]}`);\n        merged.push(this.namMember[j++]);\n      } else {\n        // Handle near-ties with slight preference\n        console.log(`Near tie between ${this.namMember[i]} and ${this.namMember[j]}`);\n        if (result < 0) {\n          merged.push(this.namMember[i++]);\n          merged.push(this.namMember[j++]);\n        } else {\n          merged.push(this.namMember[j++]);\n          merged.push(this.namMember[i++]);\n        }\n      }\n    }\n\n    // Add remaining elements\n    while (i <= mid) {\n      console.log(`Adding remaining left item: ${this.namMember[i]}`);\n      merged.push(this.namMember[i++]);\n    }\n    while (j <= right) {\n      console.log(`Adding remaining right item: ${this.namMember[j]}`);\n      merged.push(this.namMember[j++]);\n    }\n\n    // Update original array\n    for (let k = 0; k < merged.length; k++) {\n      this.namMember[left + k] = merged[k];\n    }\n    console.log(`Merged result: ${merged.join(', ')}`);\n  }\n}","map":{"version":3,"names":["PreferenceSorter","constructor","items","namMember","nrec","rec","Array","length","ranks","console","log","sort","compareCallback","n","i","mid","Math","floor","sortRecursive","reverse","left","right","push","mergeSubGroups","j","merged","result","k","join"],"sources":["/Users/aaron/Desktop/Side Projects/name-picker/meow-namester-react/src/utils/sortingAlgorithm.js"],"sourcesContent":["/**\n * @module PreferenceSorter\n * @description A class that implements a merge sort algorithm with custom comparisons\n * for sorting cat names based on user preferences. Uses recursive merge sort with\n * asynchronous comparisons to handle user input.\n * \n * @example\n * const sorter = new PreferenceSorter(['Whiskers', 'Mittens', 'Luna']);\n * const sorted = await sorter.sort(async (a, b) => {\n *   // Return -1 if a is preferred, 1 if b is preferred, 0 if equal\n *   return await getUserPreference(a, b);\n * });\n * \n * @class\n * @property {Array} namMember - Array of items to be sorted\n * @property {Array} rec - Internal record keeping array\n * @property {Array} ranks - Final sorted array\n */\n\nexport class PreferenceSorter {\n    constructor(items) {\n        this.namMember = [...items];\n        this.nrec = 0;\n        this.rec = new Array(items.length);\n        this.ranks = [];\n        console.log('PreferenceSorter initialized with items:', items);\n    }\n\n    /**\n     * Initiates the sorting process\n     * @param {Function} compareCallback - Async function that compares two items\n     * @returns {Promise<Array>} Sorted array based on comparison results\n     */\n    async sort(compareCallback) {\n        console.log('Starting sort process with items:', this.namMember);\n        const n = this.namMember.length;\n        for (let i = 0; i < n; i++) {\n            this.rec[i] = 0;\n        }\n        let mid = Math.floor(n / 2);\n        await this.sortRecursive(0, n - 1, compareCallback);\n        console.log('Sort completed. Final ranks:', this.ranks);\n        // Reverse the ranks array since we want winners at the top\n        this.ranks.reverse();\n        return this.ranks;\n    }\n\n    /**\n     * Recursive helper for the merge sort algorithm\n     * @private\n     * @param {number} left - Left boundary of current subarray\n     * @param {number} right - Right boundary of current subarray\n     * @param {Function} compareCallback - Comparison callback function\n     */\n    async sortRecursive(left, right, compareCallback) {\n        if (right - left < 1) {\n            if (left === right) {\n                this.ranks.push(this.namMember[left]);\n                console.log(`Added single item to ranks: ${this.namMember[left]}`);\n            }\n            return;\n        }\n\n        const mid = Math.floor((left + right) / 2);\n        console.log(`Splitting array at indices ${left}-${mid} and ${mid + 1}-${right}`);\n        await this.sortRecursive(left, mid, compareCallback);\n        await this.sortRecursive(mid + 1, right, compareCallback);\n        await this.mergeSubGroups(left, mid, right, compareCallback);\n    }\n\n    /**\n     * Merges two sorted subarrays\n     * @private\n     * @param {number} left - Start of first subarray\n     * @param {number} mid - End of first subarray\n     * @param {number} right - End of second subarray\n     * @param {Function} compareCallback - Comparison callback function\n     */\n    async mergeSubGroups(left, mid, right, compareCallback) {\n        console.log(`Merging subarrays: ${left}-${mid} with ${mid + 1}-${right}`);\n        let i = left;\n        let j = mid + 1;\n        const merged = [];\n\n        while (i <= mid && j <= right) {\n            console.log(`Comparing ${this.namMember[i]} with ${this.namMember[j]}`);\n            const result = await compareCallback(this.namMember[i], this.namMember[j]);\n            console.log(`Comparison result: ${result}`);\n\n            if (result <= -0.5) {  // Strong or slight preference for first name\n                console.log(`${this.namMember[i]} preferred over ${this.namMember[j]}`);\n                merged.push(this.namMember[i++]);\n            } else if (result >= 0.5) {  // Strong or slight preference for second name\n                console.log(`${this.namMember[j]} preferred over ${this.namMember[i]}`);\n                merged.push(this.namMember[j++]);\n            } else {\n                // Handle near-ties with slight preference\n                console.log(`Near tie between ${this.namMember[i]} and ${this.namMember[j]}`);\n                if (result < 0) {\n                    merged.push(this.namMember[i++]);\n                    merged.push(this.namMember[j++]);\n                } else {\n                    merged.push(this.namMember[j++]);\n                    merged.push(this.namMember[i++]);\n                }\n            }\n        }\n\n        // Add remaining elements\n        while (i <= mid) {\n            console.log(`Adding remaining left item: ${this.namMember[i]}`);\n            merged.push(this.namMember[i++]);\n        }\n        while (j <= right) {\n            console.log(`Adding remaining right item: ${this.namMember[j]}`);\n            merged.push(this.namMember[j++]);\n        }\n\n        // Update original array\n        for (let k = 0; k < merged.length; k++) {\n            this.namMember[left + k] = merged[k];\n        }\n        console.log(`Merged result: ${merged.join(', ')}`);\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}