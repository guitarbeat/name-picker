{"ast":null,"code":"/**\n * @module supabaseClient\n * @description Configures and exports the Supabase client instance.\n * Sets up the connection to Supabase with proper authentication and headers.\n * \n * @example\n * // Import and use the client\n * import { supabase } from './supabaseClient';\n * \n * // Make a query\n * const { data, error } = await supabase\n *   .from('table_name')\n *   .select('*');\n * \n * @requires REACT_APP_SUPABASE_URL - Environment variable for Supabase project URL\n * @requires REACT_APP_SUPABASE_ANON_KEY - Environment variable for Supabase anonymous key\n */\n\nimport { createClient } from '@supabase/supabase-js';\nconst supabaseUrl = process.env.REACT_APP_SUPABASE_URL;\nconst supabaseAnonKey = process.env.REACT_APP_SUPABASE_ANON_KEY;\nif (!supabaseUrl || !supabaseAnonKey) {\n  throw new Error('Missing Supabase environment variables. Please check your .env file.');\n}\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey);\n\n// Add this function to get names with descriptions\nexport const getNamesWithDescriptions = async () => {\n  try {\n    console.log('Fetching names from database...'); // Debug log\n\n    // First get hidden name IDs\n    const {\n      data: hiddenData,\n      error: hiddenError\n    } = await supabase.from('hidden_names').select('name_id');\n    if (hiddenError) {\n      console.error('Error fetching hidden names:', hiddenError);\n      throw hiddenError;\n    }\n    const hiddenIds = (hiddenData === null || hiddenData === void 0 ? void 0 : hiddenData.map(item => item.name_id)) || [];\n    console.log('Hidden IDs:', hiddenIds);\n\n    // Build query\n    let query = supabase.from('name_options').select(`\n        id,\n        name,\n        description\n      `);\n\n    // Only apply the not.in filter if we have hidden IDs\n    if (hiddenIds.length > 0) {\n      query = query.not('id', 'in', `(${hiddenIds.join(',')})`);\n    }\n\n    // Execute query with ordering\n    const {\n      data,\n      error\n    } = await query.order('name');\n    if (error) throw error;\n    console.log('Received data from database:', data); // Debug log\n    return data || [];\n  } catch (error) {\n    console.error('Error fetching names:', error);\n    throw error;\n  }\n};\n\n// Add this function to track rating history\nexport const addRatingHistory = async (userName, nameId, oldRating, newRating) => {\n  try {\n    const {\n      error\n    } = await supabase.from('rating_history').insert({\n      user_name: userName,\n      name_id: nameId,\n      old_rating: oldRating,\n      new_rating: newRating,\n      timestamp: new Date().toISOString()\n    });\n    if (error) throw error;\n  } catch (error) {\n    console.error('Error saving rating history:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["createClient","supabaseUrl","process","env","REACT_APP_SUPABASE_URL","supabaseAnonKey","REACT_APP_SUPABASE_ANON_KEY","Error","supabase","getNamesWithDescriptions","console","log","data","hiddenData","error","hiddenError","from","select","hiddenIds","map","item","name_id","query","length","not","join","order","addRatingHistory","userName","nameId","oldRating","newRating","insert","user_name","old_rating","new_rating","timestamp","Date","toISOString"],"sources":["/Users/aaron/Desktop/Side Projects/name-picker/meow-namester-react/src/supabase/supabaseClient.js"],"sourcesContent":["/**\n * @module supabaseClient\n * @description Configures and exports the Supabase client instance.\n * Sets up the connection to Supabase with proper authentication and headers.\n * \n * @example\n * // Import and use the client\n * import { supabase } from './supabaseClient';\n * \n * // Make a query\n * const { data, error } = await supabase\n *   .from('table_name')\n *   .select('*');\n * \n * @requires REACT_APP_SUPABASE_URL - Environment variable for Supabase project URL\n * @requires REACT_APP_SUPABASE_ANON_KEY - Environment variable for Supabase anonymous key\n */\n\nimport { createClient } from '@supabase/supabase-js';\n\nconst supabaseUrl = process.env.REACT_APP_SUPABASE_URL;\nconst supabaseAnonKey = process.env.REACT_APP_SUPABASE_ANON_KEY;\n\nif (!supabaseUrl || !supabaseAnonKey) {\n  throw new Error('Missing Supabase environment variables. Please check your .env file.');\n}\n\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey);\n\n// Add this function to get names with descriptions\nexport const getNamesWithDescriptions = async () => {\n  try {\n    console.log('Fetching names from database...'); // Debug log\n    \n    // First get hidden name IDs\n    const { data: hiddenData, error: hiddenError } = await supabase\n      .from('hidden_names')\n      .select('name_id');\n    \n    if (hiddenError) {\n      console.error('Error fetching hidden names:', hiddenError);\n      throw hiddenError;\n    }\n\n    const hiddenIds = hiddenData?.map(item => item.name_id) || [];\n    console.log('Hidden IDs:', hiddenIds);\n\n    // Build query\n    let query = supabase\n      .from('name_options')\n      .select(`\n        id,\n        name,\n        description\n      `);\n    \n    // Only apply the not.in filter if we have hidden IDs\n    if (hiddenIds.length > 0) {\n      query = query.not('id', 'in', `(${hiddenIds.join(',')})`);\n    }\n\n    // Execute query with ordering\n    const { data, error } = await query.order('name');\n\n    if (error) throw error;\n    \n    console.log('Received data from database:', data); // Debug log\n    return data || [];\n  } catch (error) {\n    console.error('Error fetching names:', error);\n    throw error;\n  }\n};\n\n// Add this function to track rating history\nexport const addRatingHistory = async (userName, nameId, oldRating, newRating) => {\n  try {\n    const { error } = await supabase\n      .from('rating_history')\n      .insert({\n        user_name: userName,\n        name_id: nameId,\n        old_rating: oldRating,\n        new_rating: newRating,\n        timestamp: new Date().toISOString()\n      });\n      \n    if (error) throw error;\n  } catch (error) {\n    console.error('Error saving rating history:', error);\n    throw error;\n  }\n};"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,YAAY,QAAQ,uBAAuB;AAEpD,MAAMC,WAAW,GAAGC,OAAO,CAACC,GAAG,CAACC,sBAAsB;AACtD,MAAMC,eAAe,GAAGH,OAAO,CAACC,GAAG,CAACG,2BAA2B;AAE/D,IAAI,CAACL,WAAW,IAAI,CAACI,eAAe,EAAE;EACpC,MAAM,IAAIE,KAAK,CAAC,sEAAsE,CAAC;AACzF;AAEA,OAAO,MAAMC,QAAQ,GAAGR,YAAY,CAACC,WAAW,EAAEI,eAAe,CAAC;;AAElE;AACA,OAAO,MAAMI,wBAAwB,GAAG,MAAAA,CAAA,KAAY;EAClD,IAAI;IACFC,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC,CAAC,CAAC;;IAEhD;IACA,MAAM;MAAEC,IAAI,EAAEC,UAAU;MAAEC,KAAK,EAAEC;IAAY,CAAC,GAAG,MAAMP,QAAQ,CAC5DQ,IAAI,CAAC,cAAc,CAAC,CACpBC,MAAM,CAAC,SAAS,CAAC;IAEpB,IAAIF,WAAW,EAAE;MACfL,OAAO,CAACI,KAAK,CAAC,8BAA8B,EAAEC,WAAW,CAAC;MAC1D,MAAMA,WAAW;IACnB;IAEA,MAAMG,SAAS,GAAG,CAAAL,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAEM,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACC,OAAO,CAAC,KAAI,EAAE;IAC7DX,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEO,SAAS,CAAC;;IAErC;IACA,IAAII,KAAK,GAAGd,QAAQ,CACjBQ,IAAI,CAAC,cAAc,CAAC,CACpBC,MAAM,CAAC;AACd;AACA;AACA;AACA,OAAO,CAAC;;IAEJ;IACA,IAAIC,SAAS,CAACK,MAAM,GAAG,CAAC,EAAE;MACxBD,KAAK,GAAGA,KAAK,CAACE,GAAG,CAAC,IAAI,EAAE,IAAI,EAAE,IAAIN,SAAS,CAACO,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC;IAC3D;;IAEA;IACA,MAAM;MAAEb,IAAI;MAAEE;IAAM,CAAC,GAAG,MAAMQ,KAAK,CAACI,KAAK,CAAC,MAAM,CAAC;IAEjD,IAAIZ,KAAK,EAAE,MAAMA,KAAK;IAEtBJ,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAEC,IAAI,CAAC,CAAC,CAAC;IACnD,OAAOA,IAAI,IAAI,EAAE;EACnB,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdJ,OAAO,CAACI,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC7C,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAMa,gBAAgB,GAAG,MAAAA,CAAOC,QAAQ,EAAEC,MAAM,EAAEC,SAAS,EAAEC,SAAS,KAAK;EAChF,IAAI;IACF,MAAM;MAAEjB;IAAM,CAAC,GAAG,MAAMN,QAAQ,CAC7BQ,IAAI,CAAC,gBAAgB,CAAC,CACtBgB,MAAM,CAAC;MACNC,SAAS,EAAEL,QAAQ;MACnBP,OAAO,EAAEQ,MAAM;MACfK,UAAU,EAAEJ,SAAS;MACrBK,UAAU,EAAEJ,SAAS;MACrBK,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;IACpC,CAAC,CAAC;IAEJ,IAAIxB,KAAK,EAAE,MAAMA,KAAK;EACxB,CAAC,CAAC,OAAOA,KAAK,EAAE;IACdJ,OAAO,CAACI,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACpD,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}