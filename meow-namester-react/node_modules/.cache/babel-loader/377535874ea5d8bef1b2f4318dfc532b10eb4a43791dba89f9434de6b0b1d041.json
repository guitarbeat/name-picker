{"ast":null,"code":"var _s = $RefreshSig$();\n/**\n * @module useSupabaseStorage\n * @description A custom React hook that provides persistent storage using Supabase.\n * It syncs state with Supabase and handles real-time updates.\n * \n * @example\n * // Using the hook in a component\n * const [value, setValue, { loading, error }] = useSupabaseStorage('cat_names', defaultValue);\n */\n\nimport { useState, useEffect } from 'react';\nimport { supabase } from '../utils/supabaseClient';\nfunction useSupabaseStorage(tableName, initialValue = []) {\n  _s();\n  const [storedValue, setStoredValue] = useState(initialValue);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Initial fetch of data\n  useEffect(() => {\n    fetchData();\n\n    // Set up real-time subscription\n    const subscription = supabase.channel(`${tableName}_changes`).on('postgres_changes', {\n      event: '*',\n      schema: 'public',\n      table: tableName\n    }, payload => {\n      console.log('Change received!', payload);\n      fetchData();\n    }).subscribe();\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, [tableName]);\n  async function fetchData() {\n    try {\n      setLoading(true);\n      let query = supabase.from(tableName).select('*');\n\n      // Add specific joins and selections based on table\n      if (tableName === 'cat_names') {\n        query = supabase.from('cat_names').select(`\n            id,\n            name_options (\n              name\n            ),\n            user_name,\n            elo_rating,\n            wins,\n            losses,\n            created_at,\n            updated_at\n          `);\n      } else if (tableName === 'cat_name_ratings') {\n        query = supabase.from('cat_name_ratings').select(`\n            user_name,\n            name_options (\n              id,\n              name\n            ),\n            rating,\n            updated_at\n          `);\n      }\n      const {\n        data,\n        error: fetchError\n      } = await query.order('created_at', {\n        ascending: false\n      });\n      if (fetchError) throw fetchError;\n\n      // Transform data to match expected format\n      let transformedData = data;\n      if (tableName === 'cat_names') {\n        transformedData = data.map(item => ({\n          ...item,\n          name: item.name_options.name,\n          name_options: undefined\n        }));\n      } else if (tableName === 'cat_name_ratings') {\n        transformedData = data.map(item => ({\n          ...item,\n          cat_name: item.name_options.name,\n          name_options: undefined\n        }));\n      }\n      setStoredValue(transformedData || initialValue);\n    } catch (err) {\n      console.error('Error fetching data:', err);\n      setError(err);\n    } finally {\n      setLoading(false);\n    }\n  }\n  async function setValue(newValue) {\n    try {\n      setLoading(true);\n      if (tableName === 'cat_name_ratings') {\n        // Handle ratings updates (which come in as an object)\n        if (!Array.isArray(newValue)) {\n          const entries = Object.entries(newValue);\n          const transformPromises = entries.map(async ([name, rating]) => {\n            // Get name_option id\n            const {\n              data: nameOption,\n              error: nameError\n            } = await supabase.from('name_options').select('id').eq('name', name).single();\n            if (nameError) throw nameError;\n            return {\n              user_name: storedValue.user_name || localStorage.getItem('catNamesUser'),\n              name_id: nameOption.id,\n              rating: rating,\n              updated_at: new Date().toISOString()\n            };\n          });\n          const transformedItems = await Promise.all(transformPromises);\n          const {\n            error: upsertError\n          } = await supabase.from('cat_name_ratings').upsert(transformedItems, {\n            onConflict: 'user_name,name_id'\n          });\n          if (upsertError) throw upsertError;\n        } else {\n          // Handle array updates for ratings\n          const transformPromises = newValue.map(async item => {\n            const {\n              data: nameOption,\n              error: nameError\n            } = await supabase.from('name_options').select('id').eq('name', item.cat_name).single();\n            if (nameError) throw nameError;\n            return {\n              user_name: item.user_name,\n              name_id: nameOption.id,\n              rating: item.rating,\n              updated_at: new Date().toISOString()\n            };\n          });\n          const transformedItems = await Promise.all(transformPromises);\n          const {\n            error: upsertError\n          } = await supabase.from('cat_name_ratings').upsert(transformedItems, {\n            onConflict: 'user_name,name_id'\n          });\n          if (upsertError) throw upsertError;\n        }\n      } else {\n        // Handle other table updates\n        if (Array.isArray(newValue)) {\n          const transformPromises = newValue.map(async item => {\n            if (tableName === 'cat_names') {\n              const {\n                data: nameOption,\n                error: nameError\n              } = await supabase.from('name_options').select('id').eq('name', item.name).single();\n              if (nameError) throw nameError;\n              return {\n                ...item,\n                name_id: nameOption.id,\n                name: undefined,\n                updated_at: new Date().toISOString()\n              };\n            }\n            return item;\n          });\n          const transformedItems = await Promise.all(transformPromises);\n          const {\n            error: upsertError\n          } = await supabase.from(tableName).upsert(transformedItems);\n          if (upsertError) throw upsertError;\n        } else {\n          let transformedValue = {\n            ...newValue\n          };\n          if (tableName === 'cat_names') {\n            const {\n              data: nameOption,\n              error: nameError\n            } = await supabase.from('name_options').select('id').eq('name', newValue.name).single();\n            if (nameError) throw nameError;\n            transformedValue = {\n              ...transformedValue,\n              name_id: nameOption.id,\n              name: undefined,\n              updated_at: new Date().toISOString()\n            };\n          }\n          const {\n            error: upsertError\n          } = await supabase.from(tableName).upsert(transformedValue);\n          if (upsertError) throw upsertError;\n        }\n      }\n\n      // Refresh data to get the latest state\n      await fetchData();\n    } catch (err) {\n      console.error('Error setting value:', err);\n      setError(err);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  }\n  return [storedValue, setValue, {\n    loading,\n    error\n  }];\n}\n_s(useSupabaseStorage, \"7I0FNrSbcRydL4YWfLrml+7znFU=\");\nexport default useSupabaseStorage;","map":{"version":3,"names":["useState","useEffect","supabase","useSupabaseStorage","tableName","initialValue","_s","storedValue","setStoredValue","loading","setLoading","error","setError","fetchData","subscription","channel","on","event","schema","table","payload","console","log","subscribe","unsubscribe","query","from","select","data","fetchError","order","ascending","transformedData","map","item","name","name_options","undefined","cat_name","err","setValue","newValue","Array","isArray","entries","Object","transformPromises","rating","nameOption","nameError","eq","single","user_name","localStorage","getItem","name_id","id","updated_at","Date","toISOString","transformedItems","Promise","all","upsertError","upsert","onConflict","transformedValue"],"sources":["/Users/aaron/Desktop/Side Projects/name-picker/meow-namester-react/src/hooks/useSupabaseStorage.js"],"sourcesContent":["/**\n * @module useSupabaseStorage\n * @description A custom React hook that provides persistent storage using Supabase.\n * It syncs state with Supabase and handles real-time updates.\n * \n * @example\n * // Using the hook in a component\n * const [value, setValue, { loading, error }] = useSupabaseStorage('cat_names', defaultValue);\n */\n\nimport { useState, useEffect } from 'react';\nimport { supabase } from '../utils/supabaseClient';\n\nfunction useSupabaseStorage(tableName, initialValue = []) {\n  const [storedValue, setStoredValue] = useState(initialValue);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Initial fetch of data\n  useEffect(() => {\n    fetchData();\n    \n    // Set up real-time subscription\n    const subscription = supabase\n      .channel(`${tableName}_changes`)\n      .on('postgres_changes', \n        { \n          event: '*', \n          schema: 'public', \n          table: tableName \n        }, \n        (payload) => {\n          console.log('Change received!', payload);\n          fetchData();\n        }\n      )\n      .subscribe();\n\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, [tableName]);\n\n  async function fetchData() {\n    try {\n      setLoading(true);\n      let query = supabase.from(tableName).select('*');\n\n      // Add specific joins and selections based on table\n      if (tableName === 'cat_names') {\n        query = supabase\n          .from('cat_names')\n          .select(`\n            id,\n            name_options (\n              name\n            ),\n            user_name,\n            elo_rating,\n            wins,\n            losses,\n            created_at,\n            updated_at\n          `);\n      } else if (tableName === 'cat_name_ratings') {\n        query = supabase\n          .from('cat_name_ratings')\n          .select(`\n            user_name,\n            name_options (\n              id,\n              name\n            ),\n            rating,\n            updated_at\n          `);\n      }\n\n      const { data, error: fetchError } = await query\n        .order('created_at', { ascending: false });\n\n      if (fetchError) throw fetchError;\n\n      // Transform data to match expected format\n      let transformedData = data;\n      if (tableName === 'cat_names') {\n        transformedData = data.map(item => ({\n          ...item,\n          name: item.name_options.name,\n          name_options: undefined\n        }));\n      } else if (tableName === 'cat_name_ratings') {\n        transformedData = data.map(item => ({\n          ...item,\n          cat_name: item.name_options.name,\n          name_options: undefined\n        }));\n      }\n\n      setStoredValue(transformedData || initialValue);\n    } catch (err) {\n      console.error('Error fetching data:', err);\n      setError(err);\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  async function setValue(newValue) {\n    try {\n      setLoading(true);\n      \n      if (tableName === 'cat_name_ratings') {\n        // Handle ratings updates (which come in as an object)\n        if (!Array.isArray(newValue)) {\n          const entries = Object.entries(newValue);\n          const transformPromises = entries.map(async ([name, rating]) => {\n            // Get name_option id\n            const { data: nameOption, error: nameError } = await supabase\n              .from('name_options')\n              .select('id')\n              .eq('name', name)\n              .single();\n\n            if (nameError) throw nameError;\n\n            return {\n              user_name: storedValue.user_name || localStorage.getItem('catNamesUser'),\n              name_id: nameOption.id,\n              rating: rating,\n              updated_at: new Date().toISOString()\n            };\n          });\n\n          const transformedItems = await Promise.all(transformPromises);\n          const { error: upsertError } = await supabase\n            .from('cat_name_ratings')\n            .upsert(transformedItems, {\n              onConflict: 'user_name,name_id'\n            });\n\n          if (upsertError) throw upsertError;\n        } else {\n          // Handle array updates for ratings\n          const transformPromises = newValue.map(async (item) => {\n            const { data: nameOption, error: nameError } = await supabase\n              .from('name_options')\n              .select('id')\n              .eq('name', item.cat_name)\n              .single();\n\n            if (nameError) throw nameError;\n\n            return {\n              user_name: item.user_name,\n              name_id: nameOption.id,\n              rating: item.rating,\n              updated_at: new Date().toISOString()\n            };\n          });\n\n          const transformedItems = await Promise.all(transformPromises);\n          const { error: upsertError } = await supabase\n            .from('cat_name_ratings')\n            .upsert(transformedItems, {\n              onConflict: 'user_name,name_id'\n            });\n\n          if (upsertError) throw upsertError;\n        }\n      } else {\n        // Handle other table updates\n        if (Array.isArray(newValue)) {\n          const transformPromises = newValue.map(async (item) => {\n            if (tableName === 'cat_names') {\n              const { data: nameOption, error: nameError } = await supabase\n                .from('name_options')\n                .select('id')\n                .eq('name', item.name)\n                .single();\n\n              if (nameError) throw nameError;\n\n              return {\n                ...item,\n                name_id: nameOption.id,\n                name: undefined,\n                updated_at: new Date().toISOString()\n              };\n            }\n            return item;\n          });\n\n          const transformedItems = await Promise.all(transformPromises);\n          const { error: upsertError } = await supabase\n            .from(tableName)\n            .upsert(transformedItems);\n\n          if (upsertError) throw upsertError;\n        } else {\n          let transformedValue = { ...newValue };\n          \n          if (tableName === 'cat_names') {\n            const { data: nameOption, error: nameError } = await supabase\n              .from('name_options')\n              .select('id')\n              .eq('name', newValue.name)\n              .single();\n\n            if (nameError) throw nameError;\n            \n            transformedValue = {\n              ...transformedValue,\n              name_id: nameOption.id,\n              name: undefined,\n              updated_at: new Date().toISOString()\n            };\n          }\n\n          const { error: upsertError } = await supabase\n            .from(tableName)\n            .upsert(transformedValue);\n\n          if (upsertError) throw upsertError;\n        }\n      }\n\n      // Refresh data to get the latest state\n      await fetchData();\n    } catch (err) {\n      console.error('Error setting value:', err);\n      setError(err);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  return [storedValue, setValue, { loading, error }];\n}\n\nexport default useSupabaseStorage; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}