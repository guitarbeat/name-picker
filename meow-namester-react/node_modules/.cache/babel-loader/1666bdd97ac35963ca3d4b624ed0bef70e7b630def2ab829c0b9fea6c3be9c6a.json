{"ast":null,"code":"/**\n * @module supabaseClient\n * @description Configures and exports the Supabase client instance.\n * Sets up the connection to Supabase with proper authentication and headers.\n * \n * @example\n * // Import and use the client\n * import { supabase } from './supabaseClient';\n * \n * // Make a query\n * const { data, error } = await supabase\n *   .from('table_name')\n *   .select('*');\n * \n * @requires REACT_APP_SUPABASE_URL - Environment variable for Supabase project URL\n * @requires REACT_APP_SUPABASE_ANON_KEY - Environment variable for Supabase anonymous key\n */import{createClient}from'@supabase/supabase-js';const supabaseUrl=process.env.REACT_APP_SUPABASE_URL;const supabaseKey=process.env.REACT_APP_SUPABASE_ANON_KEY;if(!supabaseUrl||!supabaseKey){throw new Error('Missing Supabase environment variables. Please check your .env file.');}export const supabase=createClient(supabaseUrl,supabaseKey,{headers:{'Content-Type':'application/json','Accept':'application/json'},auth:{persistSession:true}});// Add this function to get names with descriptions\nexport const getNamesWithDescriptions=async()=>{try{const{data,error}=await supabase.from('name_options').select('name, description').order('name');if(error)throw error;// Log the data to see what we're getting\nconsole.log('Fetched names with descriptions:',data);// Ensure each item has both name and description\nreturn data.map(item=>({name:item.name,description:item.description||'No description available'}));}catch(error){console.error('Error fetching names:',error);throw error;}};","map":{"version":3,"names":["createClient","supabaseUrl","process","env","REACT_APP_SUPABASE_URL","supabaseKey","REACT_APP_SUPABASE_ANON_KEY","Error","supabase","headers","auth","persistSession","getNamesWithDescriptions","data","error","from","select","order","console","log","map","item","name","description"],"sources":["/Users/aaron/Desktop/Side Projects/name-picker/meow-namester-react/src/supabase/supabaseClient.js"],"sourcesContent":["/**\n * @module supabaseClient\n * @description Configures and exports the Supabase client instance.\n * Sets up the connection to Supabase with proper authentication and headers.\n * \n * @example\n * // Import and use the client\n * import { supabase } from './supabaseClient';\n * \n * // Make a query\n * const { data, error } = await supabase\n *   .from('table_name')\n *   .select('*');\n * \n * @requires REACT_APP_SUPABASE_URL - Environment variable for Supabase project URL\n * @requires REACT_APP_SUPABASE_ANON_KEY - Environment variable for Supabase anonymous key\n */\n\nimport { createClient } from '@supabase/supabase-js';\n\nconst supabaseUrl = process.env.REACT_APP_SUPABASE_URL;\nconst supabaseKey = process.env.REACT_APP_SUPABASE_ANON_KEY;\n\nif (!supabaseUrl || !supabaseKey) {\n  throw new Error('Missing Supabase environment variables. Please check your .env file.');\n}\n\nexport const supabase = createClient(supabaseUrl, supabaseKey, {\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json'\n  },\n  auth: {\n    persistSession: true\n  }\n});\n\n// Add this function to get names with descriptions\nexport const getNamesWithDescriptions = async () => {\n  try {\n    const { data, error } = await supabase\n      .from('name_options')\n      .select('name, description')\n      .order('name');\n      \n    if (error) throw error;\n    \n    // Log the data to see what we're getting\n    console.log('Fetched names with descriptions:', data);\n    \n    // Ensure each item has both name and description\n    return data.map(item => ({\n      name: item.name,\n      description: item.description || 'No description available'\n    }));\n  } catch (error) {\n    console.error('Error fetching names:', error);\n    throw error;\n  }\n}; "],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAEA,OAASA,YAAY,KAAQ,uBAAuB,CAEpD,KAAM,CAAAC,WAAW,CAAGC,OAAO,CAACC,GAAG,CAACC,sBAAsB,CACtD,KAAM,CAAAC,WAAW,CAAGH,OAAO,CAACC,GAAG,CAACG,2BAA2B,CAE3D,GAAI,CAACL,WAAW,EAAI,CAACI,WAAW,CAAE,CAChC,KAAM,IAAI,CAAAE,KAAK,CAAC,sEAAsE,CAAC,CACzF,CAEA,MAAO,MAAM,CAAAC,QAAQ,CAAGR,YAAY,CAACC,WAAW,CAAEI,WAAW,CAAE,CAC7DI,OAAO,CAAE,CACP,cAAc,CAAE,kBAAkB,CAClC,QAAQ,CAAE,kBACZ,CAAC,CACDC,IAAI,CAAE,CACJC,cAAc,CAAE,IAClB,CACF,CAAC,CAAC,CAEF;AACA,MAAO,MAAM,CAAAC,wBAAwB,CAAG,KAAAA,CAAA,GAAY,CAClD,GAAI,CACF,KAAM,CAAEC,IAAI,CAAEC,KAAM,CAAC,CAAG,KAAM,CAAAN,QAAQ,CACnCO,IAAI,CAAC,cAAc,CAAC,CACpBC,MAAM,CAAC,mBAAmB,CAAC,CAC3BC,KAAK,CAAC,MAAM,CAAC,CAEhB,GAAIH,KAAK,CAAE,KAAM,CAAAA,KAAK,CAEtB;AACAI,OAAO,CAACC,GAAG,CAAC,kCAAkC,CAAEN,IAAI,CAAC,CAErD;AACA,MAAO,CAAAA,IAAI,CAACO,GAAG,CAACC,IAAI,GAAK,CACvBC,IAAI,CAAED,IAAI,CAACC,IAAI,CACfC,WAAW,CAAEF,IAAI,CAACE,WAAW,EAAI,0BACnC,CAAC,CAAC,CAAC,CACL,CAAE,MAAOT,KAAK,CAAE,CACdI,OAAO,CAACJ,KAAK,CAAC,uBAAuB,CAAEA,KAAK,CAAC,CAC7C,KAAM,CAAAA,KAAK,CACb,CACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}