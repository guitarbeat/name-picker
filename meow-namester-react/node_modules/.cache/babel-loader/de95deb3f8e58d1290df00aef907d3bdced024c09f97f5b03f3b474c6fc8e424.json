{"ast":null,"code":"/**\n * @module EloRating\n * @description A class that implements the Elo rating system for ranking cat names.\n * Used to calculate and update ratings based on head-to-head comparisons.\n * \n * @example\n * const elo = new EloRating();\n * const { newRatingA, newRatingB } = elo.calculateNewRatings(1400, 1400, 'left');\n * \n * @class\n * @property {number} defaultRating - Default rating for new names (default: 1400)\n * @property {number} kFactor - Factor affecting rating changes (default: 32)\n */\n\nclass EloRating {\n  constructor(defaultRating = 1400, kFactor = 32) {\n    this.defaultRating = defaultRating;\n    this.kFactor = kFactor;\n  }\n\n  /**\n   * Calculates the expected score for a matchup\n   * @param {number} ratingA - Rating of first name\n   * @param {number} ratingB - Rating of second name\n   * @returns {number} Expected score between 0 and 1\n   */\n  getExpectedScore(ratingA, ratingB) {\n    return 1 / (1 + Math.pow(10, (ratingB - ratingA) / 400));\n  }\n\n  /**\n   * Updates a rating based on expected and actual scores\n   * @param {number} rating - Current rating\n   * @param {number} expected - Expected score\n   * @param {number} actual - Actual score\n   * @returns {number} New rating\n   */\n  updateRating(rating, expected, actual) {\n    return Math.round(rating + this.kFactor * (actual - expected));\n  }\n\n  /**\n   * Calculates new ratings for both names after a comparison\n   * @param {number} ratingA - Rating of first name\n   * @param {number} ratingB - Rating of second name\n   * @param {string} outcome - Result ('left', 'right', or other for tie)\n   * @returns {Object} Object containing new ratings for both names\n   */\n  calculateNewRatings(ratingA, ratingB, outcome) {\n    const expectedA = this.getExpectedScore(ratingA, ratingB);\n    const expectedB = this.getExpectedScore(ratingB, ratingA);\n    let actualA, actualB;\n    switch (outcome) {\n      case 'left':\n        // A wins\n        actualA = 1;\n        actualB = 0;\n        break;\n      case 'right':\n        // B wins\n        actualA = 0;\n        actualB = 1;\n        break;\n      default:\n        // tie\n        actualA = 0.5;\n        actualB = 0.5;\n    }\n    return {\n      newRatingA: this.updateRating(ratingA, expectedA, actualA),\n      newRatingB: this.updateRating(ratingB, expectedB, actualB)\n    };\n  }\n}\nexport default EloRating;","map":{"version":3,"names":["EloRating","constructor","defaultRating","kFactor","getExpectedScore","ratingA","ratingB","Math","pow","updateRating","rating","expected","actual","round","calculateNewRatings","outcome","expectedA","expectedB","actualA","actualB","newRatingA","newRatingB"],"sources":["/Users/aaron/Desktop/Side Projects/name-picker/meow-namester-react/src/utils/EloRating.js"],"sourcesContent":["/**\n * @module EloRating\n * @description A class that implements the Elo rating system for ranking cat names.\n * Used to calculate and update ratings based on head-to-head comparisons.\n * \n * @example\n * const elo = new EloRating();\n * const { newRatingA, newRatingB } = elo.calculateNewRatings(1400, 1400, 'left');\n * \n * @class\n * @property {number} defaultRating - Default rating for new names (default: 1400)\n * @property {number} kFactor - Factor affecting rating changes (default: 32)\n */\n\nclass EloRating {\n  constructor(defaultRating = 1400, kFactor = 32) {\n    this.defaultRating = defaultRating;\n    this.kFactor = kFactor;\n  }\n\n  /**\n   * Calculates the expected score for a matchup\n   * @param {number} ratingA - Rating of first name\n   * @param {number} ratingB - Rating of second name\n   * @returns {number} Expected score between 0 and 1\n   */\n  getExpectedScore(ratingA, ratingB) {\n    return 1 / (1 + Math.pow(10, (ratingB - ratingA) / 400));\n  }\n\n  /**\n   * Updates a rating based on expected and actual scores\n   * @param {number} rating - Current rating\n   * @param {number} expected - Expected score\n   * @param {number} actual - Actual score\n   * @returns {number} New rating\n   */\n  updateRating(rating, expected, actual) {\n    return Math.round(rating + this.kFactor * (actual - expected));\n  }\n\n  /**\n   * Calculates new ratings for both names after a comparison\n   * @param {number} ratingA - Rating of first name\n   * @param {number} ratingB - Rating of second name\n   * @param {string} outcome - Result ('left', 'right', or other for tie)\n   * @returns {Object} Object containing new ratings for both names\n   */\n  calculateNewRatings(ratingA, ratingB, outcome) {\n    const expectedA = this.getExpectedScore(ratingA, ratingB);\n    const expectedB = this.getExpectedScore(ratingB, ratingA);\n    \n    let actualA, actualB;\n    switch(outcome) {\n      case 'left': // A wins\n        actualA = 1;\n        actualB = 0;\n        break;\n      case 'right': // B wins\n        actualA = 0;\n        actualB = 1;\n        break;\n      default: // tie\n        actualA = 0.5;\n        actualB = 0.5;\n    }\n\n    return {\n      newRatingA: this.updateRating(ratingA, expectedA, actualA),\n      newRatingB: this.updateRating(ratingB, expectedB, actualB)\n    };\n  }\n}\n\nexport default EloRating;"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMA,SAAS,CAAC;EACdC,WAAWA,CAACC,aAAa,GAAG,IAAI,EAAEC,OAAO,GAAG,EAAE,EAAE;IAC9C,IAAI,CAACD,aAAa,GAAGA,aAAa;IAClC,IAAI,CAACC,OAAO,GAAGA,OAAO;EACxB;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEC,gBAAgBA,CAACC,OAAO,EAAEC,OAAO,EAAE;IACjC,OAAO,CAAC,IAAI,CAAC,GAAGC,IAAI,CAACC,GAAG,CAAC,EAAE,EAAE,CAACF,OAAO,GAAGD,OAAO,IAAI,GAAG,CAAC,CAAC;EAC1D;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACEI,YAAYA,CAACC,MAAM,EAAEC,QAAQ,EAAEC,MAAM,EAAE;IACrC,OAAOL,IAAI,CAACM,KAAK,CAACH,MAAM,GAAG,IAAI,CAACP,OAAO,IAAIS,MAAM,GAAGD,QAAQ,CAAC,CAAC;EAChE;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACEG,mBAAmBA,CAACT,OAAO,EAAEC,OAAO,EAAES,OAAO,EAAE;IAC7C,MAAMC,SAAS,GAAG,IAAI,CAACZ,gBAAgB,CAACC,OAAO,EAAEC,OAAO,CAAC;IACzD,MAAMW,SAAS,GAAG,IAAI,CAACb,gBAAgB,CAACE,OAAO,EAAED,OAAO,CAAC;IAEzD,IAAIa,OAAO,EAAEC,OAAO;IACpB,QAAOJ,OAAO;MACZ,KAAK,MAAM;QAAE;QACXG,OAAO,GAAG,CAAC;QACXC,OAAO,GAAG,CAAC;QACX;MACF,KAAK,OAAO;QAAE;QACZD,OAAO,GAAG,CAAC;QACXC,OAAO,GAAG,CAAC;QACX;MACF;QAAS;QACPD,OAAO,GAAG,GAAG;QACbC,OAAO,GAAG,GAAG;IACjB;IAEA,OAAO;MACLC,UAAU,EAAE,IAAI,CAACX,YAAY,CAACJ,OAAO,EAAEW,SAAS,EAAEE,OAAO,CAAC;MAC1DG,UAAU,EAAE,IAAI,CAACZ,YAAY,CAACH,OAAO,EAAEW,SAAS,EAAEE,OAAO;IAC3D,CAAC;EACH;AACF;AAEA,eAAenB,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}