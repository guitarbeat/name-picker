{"ast":null,"code":"/**\n * @module PreferenceSorter\n * @description A class that implements a merge sort algorithm with custom comparisons\n * for sorting cat names based on user preferences.\n */\n\nexport class PreferenceSorter {\n  constructor(items) {\n    this.items = items.map(item => typeof item === 'object' && item.name ? item.name : String(item));\n    this.preferences = new Map();\n    this.currentRankings = [...this.items];\n    this.ranks = [];\n    this.rec = new Array(items.length).fill(0);\n  }\n\n  // When comparing items, we'll use the name property for the map key\n  addPreference(item1, item2, value) {\n    const key = `${item1.name}-${item2.name}`;\n    this.preferences.set(key, value);\n  }\n  getPreference(item1, item2) {\n    const key = `${item1.name}-${item2.name}`;\n    const reverseKey = `${item2.name}-${item1.name}`;\n    if (this.preferences.has(key)) {\n      return this.preferences.get(key);\n    }\n    if (this.preferences.has(reverseKey)) {\n      return -this.preferences.get(reverseKey);\n    }\n    return 0;\n  }\n  getCurrentRankings() {\n    if (this.ranks.length > 0) {\n      return this.ranks;\n    }\n    return this.currentRankings;\n  }\n  async sort(compareCallback) {\n    console.log('Starting sort process with items:', this.items);\n    this.ranks = await this.mergeSort(this.items, compareCallback);\n    return this.ranks;\n  }\n  async compare(a, b, compareCallback) {\n    // Ensure we're comparing clean strings\n    const itemA = typeof a === 'object' && a.name ? a.name : String(a);\n    const itemB = typeof b === 'object' && b.name ? b.name : String(b);\n    return await compareCallback(itemA, itemB);\n  }\n  async mergeSort(items, compareCallback) {\n    if (items.length <= 1) {\n      return items;\n    }\n    const mid = Math.floor(items.length / 2);\n    const left = await this.mergeSort(items.slice(0, mid), compareCallback);\n    const right = await this.mergeSort(items.slice(mid), compareCallback);\n    return this.merge(left, right, compareCallback);\n  }\n  async merge(left, right, compareCallback) {\n    const result = [];\n    let i = 0;\n    let j = 0;\n    while (i < left.length && j < right.length) {\n      const result = await this.compare(left[i], right[j], compareCallback);\n      if (result <= -0.5) {\n        // First name preferred\n        result.push(left[i++]);\n      } else if (result >= 0.5) {\n        // Second name preferred\n        result.push(right[j++]);\n      } else {\n        // Handle near-ties with slight preference\n        if (result < 0) {\n          result.push(left[i++]);\n          result.push(right[j++]);\n        } else {\n          result.push(right[j++]);\n          result.push(left[i++]);\n        }\n      }\n    }\n\n    // Add remaining elements\n    while (i < left.length) {\n      result.push(left[i++]);\n    }\n    while (j < right.length) {\n      result.push(right[j++]);\n    }\n    return result;\n  }\n}","map":{"version":3,"names":["PreferenceSorter","constructor","items","map","item","name","String","preferences","Map","currentRankings","ranks","rec","Array","length","fill","addPreference","item1","item2","value","key","set","getPreference","reverseKey","has","get","getCurrentRankings","sort","compareCallback","console","log","mergeSort","compare","a","b","itemA","itemB","mid","Math","floor","left","slice","right","merge","result","i","j","push"],"sources":["/Users/aaron/Desktop/Side Projects/name-picker/meow-namester-react/src/utils/sortingAlgorithm.js"],"sourcesContent":["/**\n * @module PreferenceSorter\n * @description A class that implements a merge sort algorithm with custom comparisons\n * for sorting cat names based on user preferences.\n */\n\nexport class PreferenceSorter {\n    constructor(items) {\n        this.items = items.map(item => \n            typeof item === 'object' && item.name ? item.name : String(item)\n        );\n        this.preferences = new Map();\n        this.currentRankings = [...this.items];\n        this.ranks = [];\n        this.rec = new Array(items.length).fill(0);\n    }\n\n    // When comparing items, we'll use the name property for the map key\n    addPreference(item1, item2, value) {\n        const key = `${item1.name}-${item2.name}`;\n        this.preferences.set(key, value);\n    }\n\n    getPreference(item1, item2) {\n        const key = `${item1.name}-${item2.name}`;\n        const reverseKey = `${item2.name}-${item1.name}`;\n        \n        if (this.preferences.has(key)) {\n            return this.preferences.get(key);\n        }\n        if (this.preferences.has(reverseKey)) {\n            return -this.preferences.get(reverseKey);\n        }\n        return 0;\n    }\n\n    getCurrentRankings() {\n        if (this.ranks.length > 0) {\n            return this.ranks;\n        }\n        return this.currentRankings;\n    }\n\n    async sort(compareCallback) {\n        console.log('Starting sort process with items:', this.items);\n        this.ranks = await this.mergeSort(this.items, compareCallback);\n        return this.ranks;\n    }\n\n    async compare(a, b, compareCallback) {\n        // Ensure we're comparing clean strings\n        const itemA = typeof a === 'object' && a.name ? a.name : String(a);\n        const itemB = typeof b === 'object' && b.name ? b.name : String(b);\n        return await compareCallback(itemA, itemB);\n    }\n\n    async mergeSort(items, compareCallback) {\n        if (items.length <= 1) {\n            return items;\n        }\n\n        const mid = Math.floor(items.length / 2);\n        const left = await this.mergeSort(items.slice(0, mid), compareCallback);\n        const right = await this.mergeSort(items.slice(mid), compareCallback);\n\n        return this.merge(left, right, compareCallback);\n    }\n\n    async merge(left, right, compareCallback) {\n        const result = [];\n        let i = 0;\n        let j = 0;\n\n        while (i < left.length && j < right.length) {\n            const result = await this.compare(left[i], right[j], compareCallback);\n            if (result <= -0.5) {  // First name preferred\n                result.push(left[i++]);\n            } else if (result >= 0.5) {  // Second name preferred\n                result.push(right[j++]);\n            } else {\n                // Handle near-ties with slight preference\n                if (result < 0) {\n                    result.push(left[i++]);\n                    result.push(right[j++]);\n                } else {\n                    result.push(right[j++]);\n                    result.push(left[i++]);\n                }\n            }\n        }\n\n        // Add remaining elements\n        while (i < left.length) {\n            result.push(left[i++]);\n        }\n        while (j < right.length) {\n            result.push(right[j++]);\n        }\n\n        return result;\n    }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMA,gBAAgB,CAAC;EAC1BC,WAAWA,CAACC,KAAK,EAAE;IACf,IAAI,CAACA,KAAK,GAAGA,KAAK,CAACC,GAAG,CAACC,IAAI,IACvB,OAAOA,IAAI,KAAK,QAAQ,IAAIA,IAAI,CAACC,IAAI,GAAGD,IAAI,CAACC,IAAI,GAAGC,MAAM,CAACF,IAAI,CACnE,CAAC;IACD,IAAI,CAACG,WAAW,GAAG,IAAIC,GAAG,CAAC,CAAC;IAC5B,IAAI,CAACC,eAAe,GAAG,CAAC,GAAG,IAAI,CAACP,KAAK,CAAC;IACtC,IAAI,CAACQ,KAAK,GAAG,EAAE;IACf,IAAI,CAACC,GAAG,GAAG,IAAIC,KAAK,CAACV,KAAK,CAACW,MAAM,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC;EAC9C;;EAEA;EACAC,aAAaA,CAACC,KAAK,EAAEC,KAAK,EAAEC,KAAK,EAAE;IAC/B,MAAMC,GAAG,GAAG,GAAGH,KAAK,CAACX,IAAI,IAAIY,KAAK,CAACZ,IAAI,EAAE;IACzC,IAAI,CAACE,WAAW,CAACa,GAAG,CAACD,GAAG,EAAED,KAAK,CAAC;EACpC;EAEAG,aAAaA,CAACL,KAAK,EAAEC,KAAK,EAAE;IACxB,MAAME,GAAG,GAAG,GAAGH,KAAK,CAACX,IAAI,IAAIY,KAAK,CAACZ,IAAI,EAAE;IACzC,MAAMiB,UAAU,GAAG,GAAGL,KAAK,CAACZ,IAAI,IAAIW,KAAK,CAACX,IAAI,EAAE;IAEhD,IAAI,IAAI,CAACE,WAAW,CAACgB,GAAG,CAACJ,GAAG,CAAC,EAAE;MAC3B,OAAO,IAAI,CAACZ,WAAW,CAACiB,GAAG,CAACL,GAAG,CAAC;IACpC;IACA,IAAI,IAAI,CAACZ,WAAW,CAACgB,GAAG,CAACD,UAAU,CAAC,EAAE;MAClC,OAAO,CAAC,IAAI,CAACf,WAAW,CAACiB,GAAG,CAACF,UAAU,CAAC;IAC5C;IACA,OAAO,CAAC;EACZ;EAEAG,kBAAkBA,CAAA,EAAG;IACjB,IAAI,IAAI,CAACf,KAAK,CAACG,MAAM,GAAG,CAAC,EAAE;MACvB,OAAO,IAAI,CAACH,KAAK;IACrB;IACA,OAAO,IAAI,CAACD,eAAe;EAC/B;EAEA,MAAMiB,IAAIA,CAACC,eAAe,EAAE;IACxBC,OAAO,CAACC,GAAG,CAAC,mCAAmC,EAAE,IAAI,CAAC3B,KAAK,CAAC;IAC5D,IAAI,CAACQ,KAAK,GAAG,MAAM,IAAI,CAACoB,SAAS,CAAC,IAAI,CAAC5B,KAAK,EAAEyB,eAAe,CAAC;IAC9D,OAAO,IAAI,CAACjB,KAAK;EACrB;EAEA,MAAMqB,OAAOA,CAACC,CAAC,EAAEC,CAAC,EAAEN,eAAe,EAAE;IACjC;IACA,MAAMO,KAAK,GAAG,OAAOF,CAAC,KAAK,QAAQ,IAAIA,CAAC,CAAC3B,IAAI,GAAG2B,CAAC,CAAC3B,IAAI,GAAGC,MAAM,CAAC0B,CAAC,CAAC;IAClE,MAAMG,KAAK,GAAG,OAAOF,CAAC,KAAK,QAAQ,IAAIA,CAAC,CAAC5B,IAAI,GAAG4B,CAAC,CAAC5B,IAAI,GAAGC,MAAM,CAAC2B,CAAC,CAAC;IAClE,OAAO,MAAMN,eAAe,CAACO,KAAK,EAAEC,KAAK,CAAC;EAC9C;EAEA,MAAML,SAASA,CAAC5B,KAAK,EAAEyB,eAAe,EAAE;IACpC,IAAIzB,KAAK,CAACW,MAAM,IAAI,CAAC,EAAE;MACnB,OAAOX,KAAK;IAChB;IAEA,MAAMkC,GAAG,GAAGC,IAAI,CAACC,KAAK,CAACpC,KAAK,CAACW,MAAM,GAAG,CAAC,CAAC;IACxC,MAAM0B,IAAI,GAAG,MAAM,IAAI,CAACT,SAAS,CAAC5B,KAAK,CAACsC,KAAK,CAAC,CAAC,EAAEJ,GAAG,CAAC,EAAET,eAAe,CAAC;IACvE,MAAMc,KAAK,GAAG,MAAM,IAAI,CAACX,SAAS,CAAC5B,KAAK,CAACsC,KAAK,CAACJ,GAAG,CAAC,EAAET,eAAe,CAAC;IAErE,OAAO,IAAI,CAACe,KAAK,CAACH,IAAI,EAAEE,KAAK,EAAEd,eAAe,CAAC;EACnD;EAEA,MAAMe,KAAKA,CAACH,IAAI,EAAEE,KAAK,EAAEd,eAAe,EAAE;IACtC,MAAMgB,MAAM,GAAG,EAAE;IACjB,IAAIC,CAAC,GAAG,CAAC;IACT,IAAIC,CAAC,GAAG,CAAC;IAET,OAAOD,CAAC,GAAGL,IAAI,CAAC1B,MAAM,IAAIgC,CAAC,GAAGJ,KAAK,CAAC5B,MAAM,EAAE;MACxC,MAAM8B,MAAM,GAAG,MAAM,IAAI,CAACZ,OAAO,CAACQ,IAAI,CAACK,CAAC,CAAC,EAAEH,KAAK,CAACI,CAAC,CAAC,EAAElB,eAAe,CAAC;MACrE,IAAIgB,MAAM,IAAI,CAAC,GAAG,EAAE;QAAG;QACnBA,MAAM,CAACG,IAAI,CAACP,IAAI,CAACK,CAAC,EAAE,CAAC,CAAC;MAC1B,CAAC,MAAM,IAAID,MAAM,IAAI,GAAG,EAAE;QAAG;QACzBA,MAAM,CAACG,IAAI,CAACL,KAAK,CAACI,CAAC,EAAE,CAAC,CAAC;MAC3B,CAAC,MAAM;QACH;QACA,IAAIF,MAAM,GAAG,CAAC,EAAE;UACZA,MAAM,CAACG,IAAI,CAACP,IAAI,CAACK,CAAC,EAAE,CAAC,CAAC;UACtBD,MAAM,CAACG,IAAI,CAACL,KAAK,CAACI,CAAC,EAAE,CAAC,CAAC;QAC3B,CAAC,MAAM;UACHF,MAAM,CAACG,IAAI,CAACL,KAAK,CAACI,CAAC,EAAE,CAAC,CAAC;UACvBF,MAAM,CAACG,IAAI,CAACP,IAAI,CAACK,CAAC,EAAE,CAAC,CAAC;QAC1B;MACJ;IACJ;;IAEA;IACA,OAAOA,CAAC,GAAGL,IAAI,CAAC1B,MAAM,EAAE;MACpB8B,MAAM,CAACG,IAAI,CAACP,IAAI,CAACK,CAAC,EAAE,CAAC,CAAC;IAC1B;IACA,OAAOC,CAAC,GAAGJ,KAAK,CAAC5B,MAAM,EAAE;MACrB8B,MAAM,CAACG,IAAI,CAACL,KAAK,CAACI,CAAC,EAAE,CAAC,CAAC;IAC3B;IAEA,OAAOF,MAAM;EACjB;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}