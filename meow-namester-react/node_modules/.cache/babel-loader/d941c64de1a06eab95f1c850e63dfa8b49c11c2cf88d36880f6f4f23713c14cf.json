{"ast":null,"code":"var _s = $RefreshSig$();\n/**\n * @module useNameOptions\n * @description A custom React hook that manages cat name options in Supabase.\n */\n\nimport { useState, useEffect } from 'react';\nimport { supabase } from './supabaseClient';\nfunction useNameOptions() {\n  _s();\n  const [nameOptions, setNameOptions] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    fetchNameOptions();\n\n    // Set up real-time subscription\n    const subscription = supabase.channel('name_options_changes').on('postgres_changes', {\n      event: '*',\n      schema: 'public',\n      table: 'name_options'\n    }, () => {\n      fetchNameOptions();\n    }).subscribe();\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, []);\n  async function fetchNameOptions() {\n    try {\n      setLoading(true);\n      const {\n        data,\n        error: fetchError\n      } = await supabase.from('name_options').select('name, description').order('created_at', {\n        ascending: true\n      });\n      if (fetchError) throw fetchError;\n      setNameOptions(data);\n    } catch (err) {\n      console.error('Error fetching name options:', err);\n      setError(err);\n    } finally {\n      setLoading(false);\n    }\n  }\n  async function addNameOption(newName, description = '') {\n    if (!(newName !== null && newName !== void 0 && newName.trim())) return;\n    try {\n      setLoading(true);\n      const {\n        error: insertError\n      } = await supabase.from('name_options').insert([{\n        name: newName.trim(),\n        description: description.trim()\n      }]).select(); // Add select() to ensure proper error handling\n\n      if (insertError) {\n        console.error('Insert error details:', insertError);\n        throw insertError;\n      }\n\n      // Fetch updated data after successful insert\n      await fetchNameOptions();\n    } catch (err) {\n      console.error('Error adding name option:', err);\n      setError(err);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  }\n  async function removeNameOption(name) {\n    try {\n      setLoading(true);\n      const {\n        error: deleteError\n      } = await supabase.from('name_options').delete().eq('name', name);\n      if (deleteError) throw deleteError;\n    } catch (err) {\n      console.error('Error removing name option:', err);\n      setError(err);\n    } finally {\n      setLoading(false);\n    }\n  }\n  return {\n    nameOptions,\n    loading,\n    error,\n    addNameOption,\n    removeNameOption\n  };\n}\n_s(useNameOptions, \"Daiu+cOcMCmeHtRWhFICx8ARoGk=\");\nexport default useNameOptions;","map":{"version":3,"names":["useState","useEffect","supabase","useNameOptions","_s","nameOptions","setNameOptions","loading","setLoading","error","setError","fetchNameOptions","subscription","channel","on","event","schema","table","subscribe","unsubscribe","data","fetchError","from","select","order","ascending","err","console","addNameOption","newName","description","trim","insertError","insert","name","removeNameOption","deleteError","delete","eq"],"sources":["/Users/aaron/Desktop/Side Projects/name-picker/meow-namester-react/src/supabase/useNameOptions.js"],"sourcesContent":["/**\n * @module useNameOptions\n * @description A custom React hook that manages cat name options in Supabase.\n */\n\nimport { useState, useEffect } from 'react';\nimport { supabase } from './supabaseClient';\n\nfunction useNameOptions() {\n  const [nameOptions, setNameOptions] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    fetchNameOptions();\n    \n    // Set up real-time subscription\n    const subscription = supabase\n      .channel('name_options_changes')\n      .on('postgres_changes', \n        { \n          event: '*', \n          schema: 'public', \n          table: 'name_options' \n        }, \n        () => {\n          fetchNameOptions();\n        }\n      )\n      .subscribe();\n\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, []);\n\n  async function fetchNameOptions() {\n    try {\n      setLoading(true);\n      const { data, error: fetchError } = await supabase\n        .from('name_options')\n        .select('name, description')\n        .order('created_at', { ascending: true });\n\n      if (fetchError) throw fetchError;\n\n      setNameOptions(data);\n    } catch (err) {\n      console.error('Error fetching name options:', err);\n      setError(err);\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  async function addNameOption(newName, description = '') {\n    if (!newName?.trim()) return;\n    \n    try {\n      setLoading(true);\n      const { error: insertError } = await supabase\n        .from('name_options')\n        .insert([{ \n          name: newName.trim(),\n          description: description.trim()\n        }])\n        .select();  // Add select() to ensure proper error handling\n\n      if (insertError) {\n        console.error('Insert error details:', insertError);\n        throw insertError;\n      }\n      \n      // Fetch updated data after successful insert\n      await fetchNameOptions();\n      \n    } catch (err) {\n      console.error('Error adding name option:', err);\n      setError(err);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  async function removeNameOption(name) {\n    try {\n      setLoading(true);\n      const { error: deleteError } = await supabase\n        .from('name_options')\n        .delete()\n        .eq('name', name);\n\n      if (deleteError) throw deleteError;\n    } catch (err) {\n      console.error('Error removing name option:', err);\n      setError(err);\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  return {\n    nameOptions,\n    loading,\n    error,\n    addNameOption,\n    removeNameOption\n  };\n}\n\nexport default useNameOptions;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}