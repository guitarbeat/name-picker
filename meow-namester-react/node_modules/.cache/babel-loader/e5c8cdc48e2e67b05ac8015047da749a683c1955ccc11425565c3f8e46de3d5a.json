{"ast":null,"code":"var _jsxFileName = \"/Users/aaron/Desktop/Side Projects/name-picker/meow-namester-react/src/App.js\",\n  _s = $RefreshSig$();\n/**\n * @module App\n * @description Main application component for the cat name tournament app.\n * Manages the overall application state and tournament flow, including:\n * - Name input and management\n * - Tournament progression\n * - Rating calculations\n * - Results display\n * \n * Uses the Elo rating system for ranking and a custom sorting algorithm\n * for determining the best cat name through user preferences.\n * \n * @component\n * @returns {JSX.Element} The complete application UI\n */\n\nimport React, { useState, useEffect } from 'react';\nimport { Tournament, Results, ErrorBoundary, Login, Profile, TournamentSetup } from './components';\nimport useUserSession from './hooks/useUserSession';\nimport useSupabaseStorage from './supabase/useSupabaseStorage';\nimport { supabase, getNamesWithDescriptions } from './supabase/supabaseClient';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const {\n    userName,\n    isLoggedIn,\n    login,\n    logout,\n    session\n  } = useUserSession();\n  const [ratings, setRatings] = useState({});\n  const [view, setView] = useState('tournament');\n  const [tournamentComplete, setTournamentComplete] = useState(false);\n  const [tournamentNames, setTournamentNames] = useState(null);\n  const [names, setNames] = useState([]);\n  console.log('App - Current ratings:', ratings);\n  console.log('App - Tournament names:', tournamentNames);\n  useEffect(() => {\n    const loadNames = async () => {\n      try {\n        const namesData = await getNamesWithDescriptions();\n        console.log('Loaded names:', namesData); // Debug log\n        setNames(namesData);\n      } catch (error) {\n        console.error('Error loading names:', error);\n      }\n    };\n    loadNames();\n  }, []);\n\n  // Reset tournament state when changing views\n  useEffect(() => {\n    if (view !== 'tournament') {\n      setTournamentNames(null);\n      setTournamentComplete(false);\n    }\n  }, [view]);\n  const handleTournamentComplete = async finalRatings => {\n    try {\n      if (!userName) {\n        console.error('No user name available');\n        return;\n      }\n      console.log('Starting tournament completion for user:', userName);\n\n      // Merge new ratings with existing ones, preserving wins/losses\n      const updatedRatings = {\n        ...ratings\n      };\n      finalRatings.forEach(({\n        name,\n        rating\n      }) => {\n        const existingRating = typeof updatedRatings[name] === 'object' ? updatedRatings[name] : {\n          rating: updatedRatings[name] || 1500,\n          wins: 0,\n          losses: 0\n        };\n\n        // If rating improved, count as a win, otherwise a loss\n        const isImprovement = rating > (existingRating.rating || 1500);\n        updatedRatings[name] = {\n          rating: Math.round(rating),\n          wins: (existingRating.wins || 0) + (isImprovement ? 1 : 0),\n          losses: (existingRating.losses || 0) + (isImprovement ? 0 : 1)\n        };\n      });\n      console.log('Fetching name_ids for:', Object.keys(updatedRatings));\n\n      // Get name_ids from name_options table\n      const {\n        data: nameOptions,\n        error: nameError\n      } = await supabase.from('name_options').select('id, name').in('name', Object.keys(updatedRatings));\n      if (nameError) {\n        console.error('Error fetching name options:', nameError);\n        return;\n      }\n      console.log('Retrieved name options:', nameOptions);\n\n      // Create a map of name to name_id\n      const nameToIdMap = nameOptions.reduce((acc, {\n        id,\n        name\n      }) => {\n        acc[name] = id;\n        return acc;\n      }, {});\n\n      // Prepare records for database\n      const recordsToUpsert = Object.entries(updatedRatings).map(([name, data]) => {\n        const name_id = nameToIdMap[name];\n        if (!name_id) {\n          console.warn(`No name_id found for ${name}`);\n          return null;\n        }\n        return {\n          user_name: userName,\n          name_id,\n          rating: data.rating,\n          wins: data.wins,\n          losses: data.losses,\n          updated_at: new Date().toISOString()\n        };\n      }).filter(Boolean);\n      console.log('Prepared records for upsert:', recordsToUpsert);\n      if (recordsToUpsert.length > 0) {\n        // Update ratings directly without checking user\n        const {\n          error: upsertError\n        } = await supabase.from('cat_name_ratings').upsert(recordsToUpsert, {\n          onConflict: 'user_name,name_id',\n          returning: 'minimal'\n        });\n        if (upsertError) {\n          console.error('Error updating ratings:', upsertError);\n          return;\n        }\n        console.log('Successfully updated ratings');\n      }\n\n      // Update local state\n      setRatings(updatedRatings);\n      setTournamentComplete(true);\n    } catch (error) {\n      console.error('Tournament completion error:', error);\n    }\n  };\n  const handleStartNewTournament = () => {\n    setTournamentComplete(false);\n    setTournamentNames(null);\n    setView('tournament');\n  };\n  const handleTournamentSetup = names => {\n    console.log('App - Setting up tournament with names:', names);\n    setTournamentNames(names);\n  };\n\n  // Simplified ratings update logic\n  const handleUpdateRatings = async adjustedRatings => {\n    try {\n      // Convert array format to consistent object format\n      const updatedRatings = adjustedRatings.reduce((acc, {\n        name,\n        rating,\n        wins = 0,\n        losses = 0\n      }) => {\n        acc[name] = {\n          rating: Math.round(rating),\n          wins: wins,\n          losses: losses\n        };\n        return acc;\n      }, {});\n\n      // Get name_ids in a single query\n      const {\n        data: nameOptions,\n        error: nameError\n      } = await supabase.from('name_options').select('id, name').in('name', Object.keys(updatedRatings));\n      if (nameError) throw nameError;\n\n      // Create records for database update\n      const recordsToUpsert = nameOptions.map(({\n        id,\n        name\n      }) => ({\n        user_name: userName,\n        name_id: id,\n        rating: updatedRatings[name].rating,\n        wins: updatedRatings[name].wins,\n        losses: updatedRatings[name].losses,\n        updated_at: new Date().toISOString()\n      }));\n      if (recordsToUpsert.length === 0) {\n        throw new Error('No valid records to update');\n      }\n\n      // Update database\n      const {\n        error: upsertError\n      } = await supabase.from('cat_name_ratings').upsert(recordsToUpsert, {\n        onConflict: 'user_name,name_id',\n        returning: 'minimal'\n      });\n      if (upsertError) throw upsertError;\n\n      // Update local state\n      setRatings(updatedRatings);\n      return true;\n    } catch (error) {\n      console.error('Error updating ratings:', error);\n      throw error;\n    }\n  };\n  const handleLogout = async () => {\n    logout();\n  };\n  if (!isLoggedIn) {\n    return /*#__PURE__*/_jsxDEV(Login, {\n      onLogin: login\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 12\n    }, this);\n  }\n  const renderMainContent = () => {\n    if (view === 'profile') {\n      return /*#__PURE__*/_jsxDEV(Profile, {\n        userName: userName,\n        onStartNewTournament: handleStartNewTournament,\n        ratings: ratings,\n        onUpdateRatings: handleUpdateRatings\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 9\n      }, this);\n    }\n    if (tournamentComplete) {\n      return /*#__PURE__*/_jsxDEV(Results, {\n        ratings: ratings,\n        onStartNew: handleStartNewTournament,\n        userName: userName,\n        onUpdateRatings: handleUpdateRatings,\n        currentTournamentNames: tournamentNames\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 9\n      }, this);\n    }\n    if (!tournamentNames) {\n      return /*#__PURE__*/_jsxDEV(TournamentSetup, {\n        onStart: handleTournamentSetup,\n        userName: userName,\n        existingRatings: ratings\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 9\n      }, this);\n    }\n    return /*#__PURE__*/_jsxDEV(Tournament, {\n      names: tournamentNames,\n      existingRatings: ratings,\n      onComplete: handleTournamentComplete,\n      userName: userName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-background\",\n        style: {\n          backgroundImage: `url(${process.env.PUBLIC_URL}/images/cat.gif)`\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: `${process.env.PUBLIC_URL}/images/cat.gif`,\n        alt: \"Cat animation\",\n        className: \"header-image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Cat Name Picker\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"user-controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"nav-menu\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setView('tournament'),\n            className: view === 'tournament' ? 'active' : '',\n            children: \"Tournament\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 287,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setView('profile'),\n            className: view === 'profile' ? 'active' : '',\n            children: \"My Profile\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 293,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"user-welcome\",\n          children: [\"Welcome, \", userName, \"!\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 300,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleLogout,\n          className: \"logout-button\",\n          children: \"Logout\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 301,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: /*#__PURE__*/_jsxDEV(ErrorBoundary, {\n        children: renderMainContent()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 307,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 275,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"IqW/7HN9pJX/HzOKdVKDou/uhRU=\", false, function () {\n  return [useUserSession];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Tournament","Results","ErrorBoundary","Login","Profile","TournamentSetup","useUserSession","useSupabaseStorage","supabase","getNamesWithDescriptions","jsxDEV","_jsxDEV","App","_s","userName","isLoggedIn","login","logout","session","ratings","setRatings","view","setView","tournamentComplete","setTournamentComplete","tournamentNames","setTournamentNames","names","setNames","console","log","loadNames","namesData","error","handleTournamentComplete","finalRatings","updatedRatings","forEach","name","rating","existingRating","wins","losses","isImprovement","Math","round","Object","keys","data","nameOptions","nameError","from","select","in","nameToIdMap","reduce","acc","id","recordsToUpsert","entries","map","name_id","warn","user_name","updated_at","Date","toISOString","filter","Boolean","length","upsertError","upsert","onConflict","returning","handleStartNewTournament","handleTournamentSetup","handleUpdateRatings","adjustedRatings","Error","handleLogout","onLogin","fileName","_jsxFileName","lineNumber","columnNumber","renderMainContent","onStartNewTournament","onUpdateRatings","onStartNew","currentTournamentNames","onStart","existingRatings","onComplete","className","children","style","backgroundImage","process","env","PUBLIC_URL","src","alt","onClick","_c","$RefreshReg$"],"sources":["/Users/aaron/Desktop/Side Projects/name-picker/meow-namester-react/src/App.js"],"sourcesContent":["/**\n * @module App\n * @description Main application component for the cat name tournament app.\n * Manages the overall application state and tournament flow, including:\n * - Name input and management\n * - Tournament progression\n * - Rating calculations\n * - Results display\n * \n * Uses the Elo rating system for ranking and a custom sorting algorithm\n * for determining the best cat name through user preferences.\n * \n * @component\n * @returns {JSX.Element} The complete application UI\n */\n\nimport React, { useState, useEffect } from 'react';\nimport { \n  Tournament, \n  Results, \n  ErrorBoundary,\n  Login,\n  Profile,\n  TournamentSetup\n} from './components';\nimport useUserSession from './hooks/useUserSession';\nimport useSupabaseStorage from './supabase/useSupabaseStorage';\nimport { supabase, getNamesWithDescriptions } from './supabase/supabaseClient';\n\nfunction App() {\n  const { userName, isLoggedIn, login, logout, session } = useUserSession();\n  const [ratings, setRatings] = useState({});\n  const [view, setView] = useState('tournament');\n  const [tournamentComplete, setTournamentComplete] = useState(false);\n  const [tournamentNames, setTournamentNames] = useState(null);\n  const [names, setNames] = useState([]);\n\n  console.log('App - Current ratings:', ratings);\n  console.log('App - Tournament names:', tournamentNames);\n\n  useEffect(() => {\n    const loadNames = async () => {\n      try {\n        const namesData = await getNamesWithDescriptions();\n        console.log('Loaded names:', namesData); // Debug log\n        setNames(namesData);\n      } catch (error) {\n        console.error('Error loading names:', error);\n      }\n    };\n\n    loadNames();\n  }, []);\n\n  // Reset tournament state when changing views\n  useEffect(() => {\n    if (view !== 'tournament') {\n      setTournamentNames(null);\n      setTournamentComplete(false);\n    }\n  }, [view]);\n\n  const handleTournamentComplete = async (finalRatings) => {\n    try {\n      if (!userName) {\n        console.error('No user name available');\n        return;\n      }\n\n      console.log('Starting tournament completion for user:', userName);\n\n      // Merge new ratings with existing ones, preserving wins/losses\n      const updatedRatings = { ...ratings };\n      finalRatings.forEach(({ name, rating }) => {\n        const existingRating = typeof updatedRatings[name] === 'object'\n          ? updatedRatings[name]\n          : { rating: updatedRatings[name] || 1500, wins: 0, losses: 0 };\n\n        // If rating improved, count as a win, otherwise a loss\n        const isImprovement = rating > (existingRating.rating || 1500);\n        updatedRatings[name] = {\n          rating: Math.round(rating),\n          wins: (existingRating.wins || 0) + (isImprovement ? 1 : 0),\n          losses: (existingRating.losses || 0) + (isImprovement ? 0 : 1)\n        };\n      });\n\n      console.log('Fetching name_ids for:', Object.keys(updatedRatings));\n\n      // Get name_ids from name_options table\n      const { data: nameOptions, error: nameError } = await supabase\n        .from('name_options')\n        .select('id, name')\n        .in('name', Object.keys(updatedRatings));\n\n      if (nameError) {\n        console.error('Error fetching name options:', nameError);\n        return;\n      }\n\n      console.log('Retrieved name options:', nameOptions);\n\n      // Create a map of name to name_id\n      const nameToIdMap = nameOptions.reduce((acc, { id, name }) => {\n        acc[name] = id;\n        return acc;\n      }, {});\n\n      // Prepare records for database\n      const recordsToUpsert = Object.entries(updatedRatings)\n        .map(([name, data]) => {\n          const name_id = nameToIdMap[name];\n          if (!name_id) {\n            console.warn(`No name_id found for ${name}`);\n            return null;\n          }\n          return {\n            user_name: userName,\n            name_id,\n            rating: data.rating,\n            wins: data.wins,\n            losses: data.losses,\n            updated_at: new Date().toISOString()\n          };\n        })\n        .filter(Boolean);\n\n      console.log('Prepared records for upsert:', recordsToUpsert);\n\n      if (recordsToUpsert.length > 0) {\n        // Update ratings directly without checking user\n        const { error: upsertError } = await supabase\n          .from('cat_name_ratings')\n          .upsert(recordsToUpsert, {\n            onConflict: 'user_name,name_id',\n            returning: 'minimal'\n          });\n\n        if (upsertError) {\n          console.error('Error updating ratings:', upsertError);\n          return;\n        }\n\n        console.log('Successfully updated ratings');\n      }\n\n      // Update local state\n      setRatings(updatedRatings);\n      setTournamentComplete(true);\n\n    } catch (error) {\n      console.error('Tournament completion error:', error);\n    }\n  };\n\n  const handleStartNewTournament = () => {\n    setTournamentComplete(false);\n    setTournamentNames(null);\n    setView('tournament');\n  };\n\n  const handleTournamentSetup = (names) => {\n    console.log('App - Setting up tournament with names:', names);\n    setTournamentNames(names);\n  };\n\n  // Simplified ratings update logic\n  const handleUpdateRatings = async (adjustedRatings) => {\n    try {\n      // Convert array format to consistent object format\n      const updatedRatings = adjustedRatings.reduce((acc, { name, rating, wins = 0, losses = 0 }) => {\n        acc[name] = {\n          rating: Math.round(rating),\n          wins: wins,\n          losses: losses\n        };\n        return acc;\n      }, {});\n\n      // Get name_ids in a single query\n      const { data: nameOptions, error: nameError } = await supabase\n        .from('name_options')\n        .select('id, name')\n        .in('name', Object.keys(updatedRatings));\n\n      if (nameError) throw nameError;\n\n      // Create records for database update\n      const recordsToUpsert = nameOptions\n        .map(({ id, name }) => ({\n          user_name: userName,\n          name_id: id,\n          rating: updatedRatings[name].rating,\n          wins: updatedRatings[name].wins,\n          losses: updatedRatings[name].losses,\n          updated_at: new Date().toISOString()\n        }));\n\n      if (recordsToUpsert.length === 0) {\n        throw new Error('No valid records to update');\n      }\n\n      // Update database\n      const { error: upsertError } = await supabase\n        .from('cat_name_ratings')\n        .upsert(recordsToUpsert, {\n          onConflict: 'user_name,name_id',\n          returning: 'minimal'\n        });\n\n      if (upsertError) throw upsertError;\n\n      // Update local state\n      setRatings(updatedRatings);\n      return true;\n    } catch (error) {\n      console.error('Error updating ratings:', error);\n      throw error;\n    }\n  };\n\n  const handleLogout = async () => {\n    logout();\n  };\n\n  if (!isLoggedIn) {\n    return <Login onLogin={login} />;\n  }\n\n  const renderMainContent = () => {\n    if (view === 'profile') {\n      return (\n        <Profile \n          userName={userName}\n          onStartNewTournament={handleStartNewTournament}\n          ratings={ratings}\n          onUpdateRatings={handleUpdateRatings}\n        />\n      );\n    }\n\n    if (tournamentComplete) {\n      return (\n        <Results \n          ratings={ratings}\n          onStartNew={handleStartNewTournament}\n          userName={userName}\n          onUpdateRatings={handleUpdateRatings}\n          currentTournamentNames={tournamentNames}\n        />\n      );\n    }\n\n    if (!tournamentNames) {\n      return (\n        <TournamentSetup \n          onStart={handleTournamentSetup}\n          userName={userName}\n          existingRatings={ratings}\n        />\n      );\n    }\n\n    return (\n      <Tournament \n        names={tournamentNames}\n        existingRatings={ratings}\n        onComplete={handleTournamentComplete}\n        userName={userName}\n      />\n    );\n  };\n\n  return (\n    <div className=\"app\">\n      <header>\n        <div \n          className=\"header-background\"\n          style={{ \n            backgroundImage: `url(${process.env.PUBLIC_URL}/images/cat.gif)` \n          }}\n        ></div>\n        <img src={`${process.env.PUBLIC_URL}/images/cat.gif`} alt=\"Cat animation\" className=\"header-image\" />\n        <h1>Cat Name Picker</h1>\n        <div className=\"user-controls\">\n          <div className=\"nav-menu\">\n            <button \n              onClick={() => setView('tournament')}\n              className={view === 'tournament' ? 'active' : ''}\n            >\n              Tournament\n            </button>\n            <button \n              onClick={() => setView('profile')}\n              className={view === 'profile' ? 'active' : ''}\n            >\n              My Profile\n            </button>\n          </div>\n          <span className=\"user-welcome\">Welcome, {userName}!</span>\n          <button onClick={handleLogout} className=\"logout-button\">\n            Logout\n          </button>\n        </div>\n      </header>\n\n      <main>\n        <ErrorBoundary>\n          {renderMainContent()}\n        </ErrorBoundary>\n      </main>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}