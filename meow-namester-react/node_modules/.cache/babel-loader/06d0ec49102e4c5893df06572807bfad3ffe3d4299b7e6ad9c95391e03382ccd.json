{"ast":null,"code":"var _jsxFileName = \"/Users/aaron/Desktop/Side Projects/name-picker/meow-namester-react/src/App.js\",\n  _s = $RefreshSig$();\n/**\n * @module App\n * @description Main application component for the cat name tournament app.\n * Manages the overall application state and tournament flow, including:\n * - Name input and management\n * - Tournament progression\n * - Rating calculations\n * - Results display\n * \n * Uses the Elo rating system for ranking and a custom sorting algorithm\n * for determining the best cat name through user preferences.\n * \n * @component\n * @returns {JSX.Element} The complete application UI\n */\n\nimport React, { useState, useEffect } from 'react';\nimport { Tournament, Results, ErrorBoundary, Login, Profile, TournamentSetup } from './components';\nimport useUserSession from './hooks/useUserSession';\nimport useSupabaseStorage from './supabase/useSupabaseStorage';\nimport { supabase, getNamesWithDescriptions } from './supabase/supabaseClient';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const {\n    userName,\n    isLoggedIn,\n    login,\n    logout,\n    session\n  } = useUserSession();\n  const [ratings, setRatings] = useState({});\n  const [view, setView] = useState('tournament');\n  const [tournamentComplete, setTournamentComplete] = useState(false);\n  const [tournamentNames, setTournamentNames] = useState(null);\n  const [names, setNames] = useState([]);\n  console.log('App - Current ratings:', ratings);\n  console.log('App - Tournament names:', tournamentNames);\n  useEffect(() => {\n    const loadNames = async () => {\n      try {\n        const namesData = await getNamesWithDescriptions();\n        console.log('Loaded names:', namesData); // Debug log\n        setNames(namesData);\n      } catch (error) {\n        console.error('Error loading names:', error);\n      }\n    };\n    loadNames();\n  }, []);\n  const handleTournamentComplete = async results => {\n    try {\n      console.log('Tournament completed with results:', results);\n      // Ensure results are clean objects\n      const cleanResults = results.map(result => ({\n        name: String(result.name),\n        rating: Number(result.rating)\n      }));\n      await handleUpdateRatings(cleanResults);\n      setView('results');\n    } catch (error) {\n      console.error('Error handling tournament completion:', error);\n    }\n  };\n  const handleStartNewTournament = () => {\n    setTournamentComplete(false);\n    setTournamentNames(null);\n    setView('tournament');\n  };\n  const handleStartTournament = selectedNames => {\n    // Ensure we're working with clean strings\n    const cleanNames = selectedNames.map(name => String(name));\n    console.log('App - Setting up tournament with names:', cleanNames);\n    setTournamentNames(cleanNames);\n    setView('tournament');\n  };\n  const handleUpdateRatings = adjustedRatings => {\n    // Convert array to object format and merge with existing ratings\n    const updatedRatings = {\n      ...ratings\n    };\n    adjustedRatings.forEach(({\n      name,\n      rating,\n      wins,\n      losses\n    }) => {\n      const existingRating = typeof updatedRatings[name] === 'object' ? updatedRatings[name] : {\n        rating: updatedRatings[name] || 1500,\n        wins: 0,\n        losses: 0\n      };\n      updatedRatings[name] = {\n        name_id: existingRating.name_id,\n        rating: Math.round(rating),\n        wins: wins || existingRating.wins || 0,\n        losses: losses || existingRating.losses || 0\n      };\n    });\n    setRatings(updatedRatings);\n\n    // Return a promise for the update operation\n    return new Promise(async (resolve, reject) => {\n      try {\n        // First, get name_ids from name_options table\n        const {\n          data: nameOptions,\n          error: nameError\n        } = await supabase.from('name_options').select('id, name').in('name', Object.keys(updatedRatings));\n        if (nameError) throw nameError;\n        if (!(nameOptions !== null && nameOptions !== void 0 && nameOptions.length)) {\n          console.warn('No matching name options found');\n          throw new Error('No matching name options found');\n        }\n\n        // Create a map of name to name_id\n        const nameToIdMap = nameOptions.reduce((acc, {\n          id,\n          name\n        }) => {\n          acc[name] = id;\n          return acc;\n        }, {});\n\n        // Prepare records with proper name_ids\n        const recordsToUpsert = Object.entries(updatedRatings).map(([name, data]) => {\n          const name_id = nameToIdMap[name];\n          if (!name_id) {\n            console.warn(`No name_id found for ${name}`);\n            return null;\n          }\n          return {\n            user_name: userName,\n            // Use userName instead of session.user.id\n            name_id: name_id,\n            rating: data.rating,\n            wins: data.wins || 0,\n            losses: data.losses || 0,\n            updated_at: new Date().toISOString()\n          };\n        }).filter(Boolean);\n        if (!recordsToUpsert.length) {\n          throw new Error('No valid records to update');\n        }\n        const {\n          error: upsertError\n        } = await supabase.from('cat_name_ratings').upsert(recordsToUpsert, {\n          onConflict: 'user_name,name_id',\n          returning: 'minimal'\n        });\n        if (upsertError) throw upsertError;\n        resolve();\n      } catch (error) {\n        console.error('Error updating ratings:', error);\n        reject(error);\n      }\n    });\n  };\n  const handleLogout = async () => {\n    logout();\n  };\n  if (!isLoggedIn) {\n    return /*#__PURE__*/_jsxDEV(Login, {\n      onLogin: login\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 12\n    }, this);\n  }\n  const renderMainContent = () => {\n    if (view === 'profile') {\n      return /*#__PURE__*/_jsxDEV(Profile, {\n        userName: userName,\n        onStartNewTournament: handleStartNewTournament,\n        ratings: ratings,\n        onUpdateRatings: handleUpdateRatings\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 9\n      }, this);\n    }\n    if (tournamentComplete) {\n      return /*#__PURE__*/_jsxDEV(Results, {\n        ratings: ratings,\n        onStartNew: handleStartNewTournament,\n        userName: userName,\n        onUpdateRatings: handleUpdateRatings,\n        currentTournamentNames: tournamentNames\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 9\n      }, this);\n    }\n    if (!tournamentNames) {\n      return /*#__PURE__*/_jsxDEV(TournamentSetup, {\n        onStart: handleStartTournament,\n        userName: userName,\n        existingRatings: ratings\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 9\n      }, this);\n    }\n    return /*#__PURE__*/_jsxDEV(Tournament, {\n      names: names,\n      existingRatings: ratings,\n      onComplete: handleTournamentComplete,\n      userName: userName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-background\",\n        style: {\n          backgroundImage: `url(${process.env.PUBLIC_URL}/images/cat.gif)`\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: `${process.env.PUBLIC_URL}/images/cat.gif`,\n        alt: \"Cat animation\",\n        className: \"header-image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Cat Name Picker\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"user-controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"nav-menu\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setView('tournament'),\n            className: view === 'tournament' ? 'active' : '',\n            children: \"Tournament\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 227,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setView('profile'),\n            className: view === 'profile' ? 'active' : '',\n            children: \"My Profile\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 233,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"user-welcome\",\n          children: [\"Welcome, \", userName, \"!\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleLogout,\n          className: \"logout-button\",\n          children: \"Logout\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: /*#__PURE__*/_jsxDEV(ErrorBoundary, {\n        children: renderMainContent()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 215,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"W9MP/EmEh5iBTlKoYl+a12mMuhc=\", false, function () {\n  return [useUserSession];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Tournament","Results","ErrorBoundary","Login","Profile","TournamentSetup","useUserSession","useSupabaseStorage","supabase","getNamesWithDescriptions","jsxDEV","_jsxDEV","App","_s","userName","isLoggedIn","login","logout","session","ratings","setRatings","view","setView","tournamentComplete","setTournamentComplete","tournamentNames","setTournamentNames","names","setNames","console","log","loadNames","namesData","error","handleTournamentComplete","results","cleanResults","map","result","name","String","rating","Number","handleUpdateRatings","handleStartNewTournament","handleStartTournament","selectedNames","cleanNames","adjustedRatings","updatedRatings","forEach","wins","losses","existingRating","name_id","Math","round","Promise","resolve","reject","data","nameOptions","nameError","from","select","in","Object","keys","length","warn","Error","nameToIdMap","reduce","acc","id","recordsToUpsert","entries","user_name","updated_at","Date","toISOString","filter","Boolean","upsertError","upsert","onConflict","returning","handleLogout","onLogin","fileName","_jsxFileName","lineNumber","columnNumber","renderMainContent","onStartNewTournament","onUpdateRatings","onStartNew","currentTournamentNames","onStart","existingRatings","onComplete","className","children","style","backgroundImage","process","env","PUBLIC_URL","src","alt","onClick","_c","$RefreshReg$"],"sources":["/Users/aaron/Desktop/Side Projects/name-picker/meow-namester-react/src/App.js"],"sourcesContent":["/**\n * @module App\n * @description Main application component for the cat name tournament app.\n * Manages the overall application state and tournament flow, including:\n * - Name input and management\n * - Tournament progression\n * - Rating calculations\n * - Results display\n * \n * Uses the Elo rating system for ranking and a custom sorting algorithm\n * for determining the best cat name through user preferences.\n * \n * @component\n * @returns {JSX.Element} The complete application UI\n */\n\nimport React, { useState, useEffect } from 'react';\nimport { \n  Tournament, \n  Results, \n  ErrorBoundary,\n  Login,\n  Profile,\n  TournamentSetup\n} from './components';\nimport useUserSession from './hooks/useUserSession';\nimport useSupabaseStorage from './supabase/useSupabaseStorage';\nimport { supabase, getNamesWithDescriptions } from './supabase/supabaseClient';\n\nfunction App() {\n  const { userName, isLoggedIn, login, logout, session } = useUserSession();\n  const [ratings, setRatings] = useState({});\n  const [view, setView] = useState('tournament');\n  const [tournamentComplete, setTournamentComplete] = useState(false);\n  const [tournamentNames, setTournamentNames] = useState(null);\n  const [names, setNames] = useState([]);\n\n  console.log('App - Current ratings:', ratings);\n  console.log('App - Tournament names:', tournamentNames);\n\n  useEffect(() => {\n    const loadNames = async () => {\n      try {\n        const namesData = await getNamesWithDescriptions();\n        console.log('Loaded names:', namesData); // Debug log\n        setNames(namesData);\n      } catch (error) {\n        console.error('Error loading names:', error);\n      }\n    };\n\n    loadNames();\n  }, []);\n\n  const handleTournamentComplete = async (results) => {\n    try {\n      console.log('Tournament completed with results:', results);\n      // Ensure results are clean objects\n      const cleanResults = results.map(result => ({\n        name: String(result.name),\n        rating: Number(result.rating)\n      }));\n      await handleUpdateRatings(cleanResults);\n      setView('results');\n    } catch (error) {\n      console.error('Error handling tournament completion:', error);\n    }\n  };\n\n  const handleStartNewTournament = () => {\n    setTournamentComplete(false);\n    setTournamentNames(null);\n    setView('tournament');\n  };\n\n  const handleStartTournament = (selectedNames) => {\n    // Ensure we're working with clean strings\n    const cleanNames = selectedNames.map(name => String(name));\n    console.log('App - Setting up tournament with names:', cleanNames);\n    setTournamentNames(cleanNames);\n    setView('tournament');\n  };\n\n  const handleUpdateRatings = (adjustedRatings) => {\n    // Convert array to object format and merge with existing ratings\n    const updatedRatings = { ...ratings };\n    adjustedRatings.forEach(({ name, rating, wins, losses }) => {\n      const existingRating = typeof updatedRatings[name] === 'object'\n        ? updatedRatings[name]\n        : { rating: updatedRatings[name] || 1500, wins: 0, losses: 0 };\n\n      updatedRatings[name] = {\n        name_id: existingRating.name_id,\n        rating: Math.round(rating),\n        wins: wins || existingRating.wins || 0,\n        losses: losses || existingRating.losses || 0\n      };\n    });\n\n    setRatings(updatedRatings);\n\n    // Return a promise for the update operation\n    return new Promise(async (resolve, reject) => {\n      try {\n        // First, get name_ids from name_options table\n        const { data: nameOptions, error: nameError } = await supabase\n          .from('name_options')\n          .select('id, name')\n          .in('name', Object.keys(updatedRatings));\n\n        if (nameError) throw nameError;\n        if (!nameOptions?.length) {\n          console.warn('No matching name options found');\n          throw new Error('No matching name options found');\n        }\n\n        // Create a map of name to name_id\n        const nameToIdMap = nameOptions.reduce((acc, { id, name }) => {\n          acc[name] = id;\n          return acc;\n        }, {});\n\n        // Prepare records with proper name_ids\n        const recordsToUpsert = Object.entries(updatedRatings)\n          .map(([name, data]) => {\n            const name_id = nameToIdMap[name];\n            if (!name_id) {\n              console.warn(`No name_id found for ${name}`);\n              return null;\n            }\n            return {\n              user_name: userName, // Use userName instead of session.user.id\n              name_id: name_id,\n              rating: data.rating,\n              wins: data.wins || 0,\n              losses: data.losses || 0,\n              updated_at: new Date().toISOString()\n            };\n          })\n          .filter(Boolean);\n\n        if (!recordsToUpsert.length) {\n          throw new Error('No valid records to update');\n        }\n\n        const { error: upsertError } = await supabase\n          .from('cat_name_ratings')\n          .upsert(recordsToUpsert, {\n            onConflict: 'user_name,name_id',\n            returning: 'minimal'\n          });\n\n        if (upsertError) throw upsertError;\n        resolve();\n      } catch (error) {\n        console.error('Error updating ratings:', error);\n        reject(error);\n      }\n    });\n  };\n\n  const handleLogout = async () => {\n    logout();\n  };\n\n  if (!isLoggedIn) {\n    return <Login onLogin={login} />;\n  }\n\n  const renderMainContent = () => {\n    if (view === 'profile') {\n      return (\n        <Profile \n          userName={userName}\n          onStartNewTournament={handleStartNewTournament}\n          ratings={ratings}\n          onUpdateRatings={handleUpdateRatings}\n        />\n      );\n    }\n\n    if (tournamentComplete) {\n      return (\n        <Results \n          ratings={ratings}\n          onStartNew={handleStartNewTournament}\n          userName={userName}\n          onUpdateRatings={handleUpdateRatings}\n          currentTournamentNames={tournamentNames}\n        />\n      );\n    }\n\n    if (!tournamentNames) {\n      return (\n        <TournamentSetup \n          onStart={handleStartTournament}\n          userName={userName}\n          existingRatings={ratings}\n        />\n      );\n    }\n\n    return (\n      <Tournament \n        names={names}\n        existingRatings={ratings}\n        onComplete={handleTournamentComplete}\n        userName={userName}\n      />\n    );\n  };\n\n  return (\n    <div className=\"app\">\n      <header>\n        <div \n          className=\"header-background\"\n          style={{ \n            backgroundImage: `url(${process.env.PUBLIC_URL}/images/cat.gif)` \n          }}\n        ></div>\n        <img src={`${process.env.PUBLIC_URL}/images/cat.gif`} alt=\"Cat animation\" className=\"header-image\" />\n        <h1>Cat Name Picker</h1>\n        <div className=\"user-controls\">\n          <div className=\"nav-menu\">\n            <button \n              onClick={() => setView('tournament')}\n              className={view === 'tournament' ? 'active' : ''}\n            >\n              Tournament\n            </button>\n            <button \n              onClick={() => setView('profile')}\n              className={view === 'profile' ? 'active' : ''}\n            >\n              My Profile\n            </button>\n          </div>\n          <span className=\"user-welcome\">Welcome, {userName}!</span>\n          <button onClick={handleLogout} className=\"logout-button\">\n            Logout\n          </button>\n        </div>\n      </header>\n\n      <main>\n        <ErrorBoundary>\n          {renderMainContent()}\n        </ErrorBoundary>\n      </main>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}