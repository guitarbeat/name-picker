{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { supabase } from '../supabase/supabaseClient';\nfunction useUserSession() {\n  _s();\n  const [userName, setUserName] = useState('');\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [session, setSession] = useState(null);\n  useEffect(() => {\n    // Get initial session\n    supabase.auth.getSession().then(({\n      data: {\n        session: initialSession\n      }\n    }) => {\n      setSession(initialSession);\n      if (initialSession !== null && initialSession !== void 0 && initialSession.user) {\n        setUserName(initialSession.user.email);\n        setIsLoggedIn(true);\n      }\n    });\n\n    // Listen for auth changes\n    const {\n      data: {\n        subscription\n      }\n    } = supabase.auth.onAuthStateChange((_event, session) => {\n      setSession(session);\n      if (session !== null && session !== void 0 && session.user) {\n        setUserName(session.user.email);\n        setIsLoggedIn(true);\n      } else {\n        setUserName('');\n        setIsLoggedIn(false);\n      }\n    });\n    return () => subscription.unsubscribe();\n  }, []);\n  const login = async name => {\n    if (!name || typeof name !== 'string' || name.trim() === '') {\n      throw new Error('Please enter a valid name');\n    }\n    const trimmedName = name.trim();\n    const email = `${trimmedName.toLowerCase().replace(/\\s+/g, '.')}@example.com`;\n    try {\n      // Sign in with magic link\n      const {\n        error\n      } = await supabase.auth.signInWithPassword({\n        email: email,\n        password: 'password123' // You should use a more secure password system in production\n      });\n      if (error) {\n        // If user doesn't exist, sign up\n        if (error.message.includes('Invalid login credentials')) {\n          const {\n            error: signUpError\n          } = await supabase.auth.signUp({\n            email: email,\n            password: 'password123',\n            options: {\n              data: {\n                user_name: trimmedName\n              }\n            }\n          });\n          if (signUpError) throw signUpError;\n        } else {\n          throw error;\n        }\n      }\n      setUserName(trimmedName);\n      setIsLoggedIn(true);\n    } catch (error) {\n      console.error('Login error:', error);\n      throw new Error('Login failed. Please try again.');\n    }\n  };\n  const logout = async () => {\n    try {\n      const {\n        error\n      } = await supabase.auth.signOut();\n      if (error) throw error;\n      setUserName('');\n      setIsLoggedIn(false);\n      setSession(null);\n    } catch (error) {\n      console.error('Logout error:', error);\n    }\n  };\n  return {\n    userName,\n    isLoggedIn,\n    login,\n    logout,\n    session\n  };\n}\n_s(useUserSession, \"wuHFiABQvd2uRVQ6ZO40vObf844=\");\nexport default useUserSession;","map":{"version":3,"names":["useState","useEffect","supabase","useUserSession","_s","userName","setUserName","isLoggedIn","setIsLoggedIn","session","setSession","auth","getSession","then","data","initialSession","user","email","subscription","onAuthStateChange","_event","unsubscribe","login","name","trim","Error","trimmedName","toLowerCase","replace","error","signInWithPassword","password","message","includes","signUpError","signUp","options","user_name","console","logout","signOut"],"sources":["/Users/aaron/Desktop/Side Projects/name-picker/meow-namester-react/src/hooks/useUserSession.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { supabase } from '../supabase/supabaseClient';\n\nfunction useUserSession() {\n  const [userName, setUserName] = useState('');\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [session, setSession] = useState(null);\n\n  useEffect(() => {\n    // Get initial session\n    supabase.auth.getSession().then(({ data: { session: initialSession } }) => {\n      setSession(initialSession);\n      if (initialSession?.user) {\n        setUserName(initialSession.user.email);\n        setIsLoggedIn(true);\n      }\n    });\n\n    // Listen for auth changes\n    const { data: { subscription } } = supabase.auth.onAuthStateChange((_event, session) => {\n      setSession(session);\n      if (session?.user) {\n        setUserName(session.user.email);\n        setIsLoggedIn(true);\n      } else {\n        setUserName('');\n        setIsLoggedIn(false);\n      }\n    });\n\n    return () => subscription.unsubscribe();\n  }, []);\n\n  const login = async (name) => {\n    if (!name || typeof name !== 'string' || name.trim() === '') {\n      throw new Error('Please enter a valid name');\n    }\n    \n    const trimmedName = name.trim();\n    const email = `${trimmedName.toLowerCase().replace(/\\s+/g, '.')}@example.com`;\n    \n    try {\n      // Sign in with magic link\n      const { error } = await supabase.auth.signInWithPassword({\n        email: email,\n        password: 'password123' // You should use a more secure password system in production\n      });\n\n      if (error) {\n        // If user doesn't exist, sign up\n        if (error.message.includes('Invalid login credentials')) {\n          const { error: signUpError } = await supabase.auth.signUp({\n            email: email,\n            password: 'password123',\n            options: {\n              data: {\n                user_name: trimmedName\n              }\n            }\n          });\n          \n          if (signUpError) throw signUpError;\n        } else {\n          throw error;\n        }\n      }\n\n      setUserName(trimmedName);\n      setIsLoggedIn(true);\n    } catch (error) {\n      console.error('Login error:', error);\n      throw new Error('Login failed. Please try again.');\n    }\n  };\n\n  const logout = async () => {\n    try {\n      const { error } = await supabase.auth.signOut();\n      if (error) throw error;\n      \n      setUserName('');\n      setIsLoggedIn(false);\n      setSession(null);\n    } catch (error) {\n      console.error('Logout error:', error);\n    }\n  };\n\n  return {\n    userName,\n    isLoggedIn,\n    login,\n    logout,\n    session\n  };\n}\n\nexport default useUserSession; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}