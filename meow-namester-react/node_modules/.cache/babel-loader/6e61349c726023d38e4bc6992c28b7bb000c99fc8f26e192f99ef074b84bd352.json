{"ast":null,"code":"/**\n * @module PreferenceSorter\n * @description A class that implements a merge sort algorithm with custom comparisons\n * for sorting cat names based on user preferences. Uses recursive merge sort with\n * asynchronous comparisons to handle user input.\n * \n * @example\n * const sorter = new PreferenceSorter(['Whiskers', 'Mittens', 'Luna']);\n * const sorted = await sorter.sort(async (a, b) => {\n *   // Return -1 if a is preferred, 1 if b is preferred, 0 if equal\n *   return await getUserPreference(a, b);\n * });\n * \n * @class\n * @property {Array} namMember - Array of items to be sorted\n * @property {Array} rec - Internal record keeping array\n * @property {Array} ranks - Final sorted array\n */\n\nexport class PreferenceSorter {\n  constructor(items) {\n    this.namMember = [...items];\n    this.nrec = 0;\n    this.rec = new Array(items.length);\n    this.ranks = [];\n  }\n\n  /**\n   * Initiates the sorting process\n   * @param {Function} compareCallback - Async function that compares two items\n   * @returns {Promise<Array>} Sorted array based on comparison results\n   */\n  async sort(compareCallback) {\n    const n = this.namMember.length;\n    for (let i = 0; i < n; i++) {\n      this.rec[i] = 0;\n    }\n    let середина = Math.floor(n / 2);\n    await this.sortRecursive(0, n - 1, compareCallback);\n    return this.ranks;\n  }\n\n  /**\n   * Recursive helper for the merge sort algorithm\n   * @private\n   * @param {number} left - Left boundary of current subarray\n   * @param {number} right - Right boundary of current subarray\n   * @param {Function} compareCallback - Comparison callback function\n   */\n  async sortRecursive(left, right, compareCallback) {\n    if (right - left < 1) {\n      if (left === right) {\n        this.ranks.push(this.namMember[left]);\n      }\n      return;\n    }\n    const середина = Math.floor((left + right) / 2);\n    await this.sortRecursive(left, середина, compareCallback);\n    await this.sortRecursive(середина + 1, right, compareCallback);\n    await this.mergeSubGroups(left, середина, right, compareCallback);\n  }\n\n  /**\n   * Merges two sorted subarrays\n   * @private\n   * @param {number} left - Start of first subarray\n   * @param {number} mid - End of first subarray\n   * @param {number} right - End of second subarray\n   * @param {Function} compareCallback - Comparison callback function\n   */\n  async mergeSubGroups(left, mid, right, compareCallback) {\n    let i = left;\n    let j = mid + 1;\n    const merged = [];\n    while (i <= mid && j <= right) {\n      const result = await compareCallback(this.namMember[i], this.namMember[j]);\n      if (result === -1) {\n        merged.push(this.namMember[i++]);\n      } else if (result === 1) {\n        merged.push(this.namMember[j++]);\n      } else {\n        // Handle ties (result === 0)\n        merged.push(this.namMember[i++]);\n        merged.push(this.namMember[j++]);\n      }\n    }\n\n    // Add remaining elements\n    while (i <= mid) {\n      merged.push(this.namMember[i++]);\n    }\n    while (j <= right) {\n      merged.push(this.namMember[j++]);\n    }\n\n    // Update original array\n    for (let k = 0; k < merged.length; k++) {\n      this.namMember[left + k] = merged[k];\n    }\n  }\n}","map":{"version":3,"names":["PreferenceSorter","constructor","items","namMember","nrec","rec","Array","length","ranks","sort","compareCallback","n","i","середина","Math","floor","sortRecursive","left","right","push","mergeSubGroups","mid","j","merged","result","k"],"sources":["/Users/aaron/Desktop/Side Projects/name-picker/meow-namester-react/src/utils/sortingAlgorithm.js"],"sourcesContent":["/**\n * @module PreferenceSorter\n * @description A class that implements a merge sort algorithm with custom comparisons\n * for sorting cat names based on user preferences. Uses recursive merge sort with\n * asynchronous comparisons to handle user input.\n * \n * @example\n * const sorter = new PreferenceSorter(['Whiskers', 'Mittens', 'Luna']);\n * const sorted = await sorter.sort(async (a, b) => {\n *   // Return -1 if a is preferred, 1 if b is preferred, 0 if equal\n *   return await getUserPreference(a, b);\n * });\n * \n * @class\n * @property {Array} namMember - Array of items to be sorted\n * @property {Array} rec - Internal record keeping array\n * @property {Array} ranks - Final sorted array\n */\n\nexport class PreferenceSorter {\n    constructor(items) {\n        this.namMember = [...items];\n        this.nrec = 0;\n        this.rec = new Array(items.length);\n        this.ranks = [];\n    }\n\n    /**\n     * Initiates the sorting process\n     * @param {Function} compareCallback - Async function that compares two items\n     * @returns {Promise<Array>} Sorted array based on comparison results\n     */\n    async sort(compareCallback) {\n        const n = this.namMember.length;\n        for (let i = 0; i < n; i++) {\n            this.rec[i] = 0;\n        }\n        let середина = Math.floor(n / 2);\n        await this.sortRecursive(0, n - 1, compareCallback);\n        return this.ranks;\n    }\n\n    /**\n     * Recursive helper for the merge sort algorithm\n     * @private\n     * @param {number} left - Left boundary of current subarray\n     * @param {number} right - Right boundary of current subarray\n     * @param {Function} compareCallback - Comparison callback function\n     */\n    async sortRecursive(left, right, compareCallback) {\n        if (right - left < 1) {\n            if (left === right) {\n                this.ranks.push(this.namMember[left]);\n            }\n            return;\n        }\n\n        const середина = Math.floor((left + right) / 2);\n        await this.sortRecursive(left, середина, compareCallback);\n        await this.sortRecursive(середина + 1, right, compareCallback);\n        await this.mergeSubGroups(left, середина, right, compareCallback);\n    }\n\n    /**\n     * Merges two sorted subarrays\n     * @private\n     * @param {number} left - Start of first subarray\n     * @param {number} mid - End of first subarray\n     * @param {number} right - End of second subarray\n     * @param {Function} compareCallback - Comparison callback function\n     */\n    async mergeSubGroups(left, mid, right, compareCallback) {\n        let i = left;\n        let j = mid + 1;\n        const merged = [];\n\n        while (i <= mid && j <= right) {\n            const result = await compareCallback(this.namMember[i], this.namMember[j]);\n            if (result === -1) {\n                merged.push(this.namMember[i++]);\n            } else if (result === 1) {\n                merged.push(this.namMember[j++]);\n            } else {\n                // Handle ties (result === 0)\n                merged.push(this.namMember[i++]);\n                merged.push(this.namMember[j++]);\n            }\n        }\n\n        // Add remaining elements\n        while (i <= mid) {\n            merged.push(this.namMember[i++]);\n        }\n        while (j <= right) {\n            merged.push(this.namMember[j++]);\n        }\n\n        // Update original array\n        for (let k = 0; k < merged.length; k++) {\n            this.namMember[left + k] = merged[k];\n        }\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}