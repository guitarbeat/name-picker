{"ast":null,"code":"class EloRating {\n  constructor(defaultRating = 1400, kFactor = 32) {\n    this.defaultRating = defaultRating;\n    this.kFactor = kFactor;\n  }\n  getExpectedScore(ratingA, ratingB) {\n    return 1 / (1 + Math.pow(10, (ratingB - ratingA) / 400));\n  }\n  updateRating(rating, expected, actual) {\n    return Math.round(rating + this.kFactor * (actual - expected));\n  }\n  calculateNewRatings(ratingA, ratingB, outcome) {\n    const expectedA = this.getExpectedScore(ratingA, ratingB);\n    const expectedB = this.getExpectedScore(ratingB, ratingA);\n    let actualA, actualB;\n    switch (outcome) {\n      case 'left':\n        // A wins\n        actualA = 1;\n        actualB = 0;\n        break;\n      case 'right':\n        // B wins\n        actualA = 0;\n        actualB = 1;\n        break;\n      default:\n        // tie\n        actualA = 0.5;\n        actualB = 0.5;\n    }\n    return {\n      newRatingA: this.updateRating(ratingA, expectedA, actualA),\n      newRatingB: this.updateRating(ratingB, expectedB, actualB)\n    };\n  }\n}\nexport default EloRating;","map":{"version":3,"names":["EloRating","constructor","defaultRating","kFactor","getExpectedScore","ratingA","ratingB","Math","pow","updateRating","rating","expected","actual","round","calculateNewRatings","outcome","expectedA","expectedB","actualA","actualB","newRatingA","newRatingB"],"sources":["/Users/aaron/Desktop/Side Projects/name-picker/meow-namester-react/src/utils/EloRating.js"],"sourcesContent":["class EloRating {\n  constructor(defaultRating = 1400, kFactor = 32) {\n    this.defaultRating = defaultRating;\n    this.kFactor = kFactor;\n  }\n\n  getExpectedScore(ratingA, ratingB) {\n    return 1 / (1 + Math.pow(10, (ratingB - ratingA) / 400));\n  }\n\n  updateRating(rating, expected, actual) {\n    return Math.round(rating + this.kFactor * (actual - expected));\n  }\n\n  calculateNewRatings(ratingA, ratingB, outcome) {\n    const expectedA = this.getExpectedScore(ratingA, ratingB);\n    const expectedB = this.getExpectedScore(ratingB, ratingA);\n    \n    let actualA, actualB;\n    switch(outcome) {\n      case 'left': // A wins\n        actualA = 1;\n        actualB = 0;\n        break;\n      case 'right': // B wins\n        actualA = 0;\n        actualB = 1;\n        break;\n      default: // tie\n        actualA = 0.5;\n        actualB = 0.5;\n    }\n\n    return {\n      newRatingA: this.updateRating(ratingA, expectedA, actualA),\n      newRatingB: this.updateRating(ratingB, expectedB, actualB)\n    };\n  }\n}\n\nexport default EloRating;"],"mappings":"AAAA,MAAMA,SAAS,CAAC;EACdC,WAAWA,CAACC,aAAa,GAAG,IAAI,EAAEC,OAAO,GAAG,EAAE,EAAE;IAC9C,IAAI,CAACD,aAAa,GAAGA,aAAa;IAClC,IAAI,CAACC,OAAO,GAAGA,OAAO;EACxB;EAEAC,gBAAgBA,CAACC,OAAO,EAAEC,OAAO,EAAE;IACjC,OAAO,CAAC,IAAI,CAAC,GAAGC,IAAI,CAACC,GAAG,CAAC,EAAE,EAAE,CAACF,OAAO,GAAGD,OAAO,IAAI,GAAG,CAAC,CAAC;EAC1D;EAEAI,YAAYA,CAACC,MAAM,EAAEC,QAAQ,EAAEC,MAAM,EAAE;IACrC,OAAOL,IAAI,CAACM,KAAK,CAACH,MAAM,GAAG,IAAI,CAACP,OAAO,IAAIS,MAAM,GAAGD,QAAQ,CAAC,CAAC;EAChE;EAEAG,mBAAmBA,CAACT,OAAO,EAAEC,OAAO,EAAES,OAAO,EAAE;IAC7C,MAAMC,SAAS,GAAG,IAAI,CAACZ,gBAAgB,CAACC,OAAO,EAAEC,OAAO,CAAC;IACzD,MAAMW,SAAS,GAAG,IAAI,CAACb,gBAAgB,CAACE,OAAO,EAAED,OAAO,CAAC;IAEzD,IAAIa,OAAO,EAAEC,OAAO;IACpB,QAAOJ,OAAO;MACZ,KAAK,MAAM;QAAE;QACXG,OAAO,GAAG,CAAC;QACXC,OAAO,GAAG,CAAC;QACX;MACF,KAAK,OAAO;QAAE;QACZD,OAAO,GAAG,CAAC;QACXC,OAAO,GAAG,CAAC;QACX;MACF;QAAS;QACPD,OAAO,GAAG,GAAG;QACbC,OAAO,GAAG,GAAG;IACjB;IAEA,OAAO;MACLC,UAAU,EAAE,IAAI,CAACX,YAAY,CAACJ,OAAO,EAAEW,SAAS,EAAEE,OAAO,CAAC;MAC1DG,UAAU,EAAE,IAAI,CAACZ,YAAY,CAACH,OAAO,EAAEW,SAAS,EAAEE,OAAO;IAC3D,CAAC;EACH;AACF;AAEA,eAAenB,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}