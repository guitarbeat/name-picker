{"ast":null,"code":"/**\n * @module PreferenceSorter\n * @description A class that implements a merge sort algorithm with custom comparisons\n * for sorting cat names based on user preferences.\n */export class PreferenceSorter{constructor(items){this.items=items;this.preferences=new Map();this.currentRankings=[...items];this.ranks=[];this.rec=new Array(items.length).fill(0);this.preferenceCache=new Map();}addPreference(item1,item2,value){const key=\"\".concat(item1.name,\"-\").concat(item2.name);this.preferences.set(key,value);}getPreference(item1,item2){const cacheKey=\"\".concat(item1.name,\"-\").concat(item2.name);if(this.preferenceCache.has(cacheKey)){return this.preferenceCache.get(cacheKey);}const key=\"\".concat(item1.name,\"-\").concat(item2.name);const reverseKey=\"\".concat(item2.name,\"-\").concat(item1.name);let result;if(this.preferences.has(key)){result=this.preferences.get(key);}else if(this.preferences.has(reverseKey)){result=-this.preferences.get(reverseKey);}else{result=0;}this.preferenceCache.set(cacheKey,result);return result;}getCurrentRankings(){if(this.ranks.length>0){return this.ranks;}return this.currentRankings;}async sort(compareCallback){const n=this.items.length;if(!this.rec||this.rec.length!==n){this.rec=new Array(n).fill(0);}await this.sortRecursive(0,n-1,compareCallback);return this.ranks;}async sortRecursive(left,right,compareCallback){if(right-left<1){if(left===right){this.ranks.push(this.items[left]);}return;}const mid=Math.floor((left+right)/2);await this.sortRecursive(left,mid,compareCallback);await this.sortRecursive(mid+1,right,compareCallback);await this.mergeSubGroups(left,mid,right,compareCallback);}async mergeSubGroups(left,mid,right,compareCallback){let i=left;let j=mid+1;const merged=[];while(i<=mid&&j<=right){const result=await compareCallback(this.items[i],this.items[j]);if(result<=-0.5){merged.push(this.items[i++]);}else if(result>=0.5){merged.push(this.items[j++]);}else{if(result<0){merged.push(this.items[i++]);merged.push(this.items[j++]);}else{merged.push(this.items[j++]);merged.push(this.items[i++]);}}}while(i<=mid){merged.push(this.items[i++]);}while(j<=right){merged.push(this.items[j++]);}for(let k=0;k<merged.length;k++){this.items[left+k]=merged[k];this.currentRankings[left+k]=merged[k];}if(left===0&&right===this.items.length-1){this.ranks=[...merged];}}}","map":{"version":3,"names":["PreferenceSorter","constructor","items","preferences","Map","currentRankings","ranks","rec","Array","length","fill","preferenceCache","addPreference","item1","item2","value","key","concat","name","set","getPreference","cacheKey","has","get","reverseKey","result","getCurrentRankings","sort","compareCallback","n","sortRecursive","left","right","push","mid","Math","floor","mergeSubGroups","i","j","merged","k"],"sources":["/Users/aaron/Desktop/Side Projects/name-picker/meow-namester-react/src/components/Tournament/PreferenceSorter.js"],"sourcesContent":["/**\n * @module PreferenceSorter\n * @description A class that implements a merge sort algorithm with custom comparisons\n * for sorting cat names based on user preferences.\n */\n\nexport class PreferenceSorter {\n    constructor(items) {\n        this.items = items;\n        this.preferences = new Map();\n        this.currentRankings = [...items];\n        this.ranks = [];\n        this.rec = new Array(items.length).fill(0);\n        this.preferenceCache = new Map();\n    }\n\n    addPreference(item1, item2, value) {\n        const key = `${item1.name}-${item2.name}`;\n        this.preferences.set(key, value);\n    }\n\n    getPreference(item1, item2) {\n        const cacheKey = `${item1.name}-${item2.name}`;\n        if (this.preferenceCache.has(cacheKey)) {\n            return this.preferenceCache.get(cacheKey);\n        }\n\n        const key = `${item1.name}-${item2.name}`;\n        const reverseKey = `${item2.name}-${item1.name}`;\n        let result;\n        \n        if (this.preferences.has(key)) {\n            result = this.preferences.get(key);\n        } else if (this.preferences.has(reverseKey)) {\n            result = -this.preferences.get(reverseKey);\n        } else {\n            result = 0;\n        }\n\n        this.preferenceCache.set(cacheKey, result);\n        return result;\n    }\n\n    getCurrentRankings() {\n        if (this.ranks.length > 0) {\n            return this.ranks;\n        }\n        return this.currentRankings;\n    }\n\n    async sort(compareCallback) {\n        const n = this.items.length;\n        \n        if (!this.rec || this.rec.length !== n) {\n            this.rec = new Array(n).fill(0);\n        }\n        \n        await this.sortRecursive(0, n - 1, compareCallback);\n        return this.ranks;\n    }\n\n    async sortRecursive(left, right, compareCallback) {\n        if (right - left < 1) {\n            if (left === right) {\n                this.ranks.push(this.items[left]);\n            }\n            return;\n        }\n\n        const mid = Math.floor((left + right) / 2);\n        await this.sortRecursive(left, mid, compareCallback);\n        await this.sortRecursive(mid + 1, right, compareCallback);\n        await this.mergeSubGroups(left, mid, right, compareCallback);\n    }\n\n    async mergeSubGroups(left, mid, right, compareCallback) {\n        let i = left;\n        let j = mid + 1;\n        const merged = [];\n\n        while (i <= mid && j <= right) {\n            const result = await compareCallback(this.items[i], this.items[j]);\n\n            if (result <= -0.5) {\n                merged.push(this.items[i++]);\n            } else if (result >= 0.5) {\n                merged.push(this.items[j++]);\n            } else {\n                if (result < 0) {\n                    merged.push(this.items[i++]);\n                    merged.push(this.items[j++]);\n                } else {\n                    merged.push(this.items[j++]);\n                    merged.push(this.items[i++]);\n                }\n            }\n        }\n\n        while (i <= mid) {\n            merged.push(this.items[i++]);\n        }\n        while (j <= right) {\n            merged.push(this.items[j++]);\n        }\n\n        for (let k = 0; k < merged.length; k++) {\n            this.items[left + k] = merged[k];\n            this.currentRankings[left + k] = merged[k];\n        }\n\n        if (left === 0 && right === this.items.length - 1) {\n            this.ranks = [...merged];\n        }\n    }\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}