{"ast":null,"code":"/**\n * @module supabaseClient\n * @description Configures and exports the Supabase client instance.\n * Sets up the connection to Supabase with proper authentication and headers.\n * \n * @example\n * // Import and use the client\n * import { supabase } from './supabaseClient';\n * \n * // Make a query\n * const { data, error } = await supabase\n *   .from('table_name')\n *   .select('*');\n * \n * @requires REACT_APP_SUPABASE_URL - Environment variable for Supabase project URL\n * @requires REACT_APP_SUPABASE_ANON_KEY - Environment variable for Supabase anonymous key\n */import{createClient}from'@supabase/supabase-js';const supabaseUrl=process.env.REACT_APP_SUPABASE_URL;const supabaseAnonKey=process.env.REACT_APP_SUPABASE_ANON_KEY;if(!supabaseUrl||!supabaseAnonKey){throw new Error('Missing Supabase environment variables. Please check your .env file.');}export const supabase=createClient(supabaseUrl,supabaseAnonKey);// Add this function to get names with descriptions\nexport const getNamesWithDescriptions=async()=>{try{console.log('Fetching names from database...');// Debug log\n// First get hidden name IDs\nconst{data:hiddenData,error:hiddenError}=await supabase.from('hidden_names').select('name_id');if(hiddenError){console.error('Error fetching hidden names:',hiddenError);throw hiddenError;}const hiddenIds=(hiddenData===null||hiddenData===void 0?void 0:hiddenData.map(item=>item.name_id))||[];console.log('Hidden IDs:',hiddenIds);// Build query\nlet query=supabase.from('name_options').select(\"\\n        id,\\n        name,\\n        description\\n      \");// Only apply the not.in filter if we have hidden IDs\nif(hiddenIds.length>0){query=query.not('id','in',\"(\".concat(hiddenIds.join(','),\")\"));}// Execute query with ordering\nconst{data,error}=await query.order('name');if(error)throw error;console.log('Received data from database:',data);// Debug log\nreturn data||[];}catch(error){console.error('Error fetching names:',error);throw error;}};// Add this function to track rating history\nexport const addRatingHistory=async(userName,nameId,oldRating,newRating)=>{try{const{error}=await supabase.from('rating_history').insert({user_name:userName,name_id:nameId,old_rating:oldRating,new_rating:newRating,timestamp:new Date().toISOString()});if(error)throw error;}catch(error){console.error('Error saving rating history:',error);throw error;}};","map":{"version":3,"names":["createClient","supabaseUrl","process","env","REACT_APP_SUPABASE_URL","supabaseAnonKey","REACT_APP_SUPABASE_ANON_KEY","Error","supabase","getNamesWithDescriptions","console","log","data","hiddenData","error","hiddenError","from","select","hiddenIds","map","item","name_id","query","length","not","concat","join","order","addRatingHistory","userName","nameId","oldRating","newRating","insert","user_name","old_rating","new_rating","timestamp","Date","toISOString"],"sources":["/Users/aaron/Desktop/Side Projects/name-picker/meow-namester-react/src/supabase/supabaseClient.js"],"sourcesContent":["/**\n * @module supabaseClient\n * @description Configures and exports the Supabase client instance.\n * Sets up the connection to Supabase with proper authentication and headers.\n * \n * @example\n * // Import and use the client\n * import { supabase } from './supabaseClient';\n * \n * // Make a query\n * const { data, error } = await supabase\n *   .from('table_name')\n *   .select('*');\n * \n * @requires REACT_APP_SUPABASE_URL - Environment variable for Supabase project URL\n * @requires REACT_APP_SUPABASE_ANON_KEY - Environment variable for Supabase anonymous key\n */\n\nimport { createClient } from '@supabase/supabase-js';\n\nconst supabaseUrl = process.env.REACT_APP_SUPABASE_URL;\nconst supabaseAnonKey = process.env.REACT_APP_SUPABASE_ANON_KEY;\n\nif (!supabaseUrl || !supabaseAnonKey) {\n  throw new Error('Missing Supabase environment variables. Please check your .env file.');\n}\n\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey);\n\n// Add this function to get names with descriptions\nexport const getNamesWithDescriptions = async () => {\n  try {\n    console.log('Fetching names from database...'); // Debug log\n    \n    // First get hidden name IDs\n    const { data: hiddenData, error: hiddenError } = await supabase\n      .from('hidden_names')\n      .select('name_id');\n    \n    if (hiddenError) {\n      console.error('Error fetching hidden names:', hiddenError);\n      throw hiddenError;\n    }\n\n    const hiddenIds = hiddenData?.map(item => item.name_id) || [];\n    console.log('Hidden IDs:', hiddenIds);\n\n    // Build query\n    let query = supabase\n      .from('name_options')\n      .select(`\n        id,\n        name,\n        description\n      `);\n    \n    // Only apply the not.in filter if we have hidden IDs\n    if (hiddenIds.length > 0) {\n      query = query.not('id', 'in', `(${hiddenIds.join(',')})`);\n    }\n\n    // Execute query with ordering\n    const { data, error } = await query.order('name');\n\n    if (error) throw error;\n    \n    console.log('Received data from database:', data); // Debug log\n    return data || [];\n  } catch (error) {\n    console.error('Error fetching names:', error);\n    throw error;\n  }\n};\n\n// Add this function to track rating history\nexport const addRatingHistory = async (userName, nameId, oldRating, newRating) => {\n  try {\n    const { error } = await supabase\n      .from('rating_history')\n      .insert({\n        user_name: userName,\n        name_id: nameId,\n        old_rating: oldRating,\n        new_rating: newRating,\n        timestamp: new Date().toISOString()\n      });\n      \n    if (error) throw error;\n  } catch (error) {\n    console.error('Error saving rating history:', error);\n    throw error;\n  }\n};"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAEA,OAASA,YAAY,KAAQ,uBAAuB,CAEpD,KAAM,CAAAC,WAAW,CAAGC,OAAO,CAACC,GAAG,CAACC,sBAAsB,CACtD,KAAM,CAAAC,eAAe,CAAGH,OAAO,CAACC,GAAG,CAACG,2BAA2B,CAE/D,GAAI,CAACL,WAAW,EAAI,CAACI,eAAe,CAAE,CACpC,KAAM,IAAI,CAAAE,KAAK,CAAC,sEAAsE,CAAC,CACzF,CAEA,MAAO,MAAM,CAAAC,QAAQ,CAAGR,YAAY,CAACC,WAAW,CAAEI,eAAe,CAAC,CAElE;AACA,MAAO,MAAM,CAAAI,wBAAwB,CAAG,KAAAA,CAAA,GAAY,CAClD,GAAI,CACFC,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC,CAAE;AAEhD;AACA,KAAM,CAAEC,IAAI,CAAEC,UAAU,CAAEC,KAAK,CAAEC,WAAY,CAAC,CAAG,KAAM,CAAAP,QAAQ,CAC5DQ,IAAI,CAAC,cAAc,CAAC,CACpBC,MAAM,CAAC,SAAS,CAAC,CAEpB,GAAIF,WAAW,CAAE,CACfL,OAAO,CAACI,KAAK,CAAC,8BAA8B,CAAEC,WAAW,CAAC,CAC1D,KAAM,CAAAA,WAAW,CACnB,CAEA,KAAM,CAAAG,SAAS,CAAG,CAAAL,UAAU,SAAVA,UAAU,iBAAVA,UAAU,CAAEM,GAAG,CAACC,IAAI,EAAIA,IAAI,CAACC,OAAO,CAAC,GAAI,EAAE,CAC7DX,OAAO,CAACC,GAAG,CAAC,aAAa,CAAEO,SAAS,CAAC,CAErC;AACA,GAAI,CAAAI,KAAK,CAAGd,QAAQ,CACjBQ,IAAI,CAAC,cAAc,CAAC,CACpBC,MAAM,4DAIN,CAAC,CAEJ;AACA,GAAIC,SAAS,CAACK,MAAM,CAAG,CAAC,CAAE,CACxBD,KAAK,CAAGA,KAAK,CAACE,GAAG,CAAC,IAAI,CAAE,IAAI,KAAAC,MAAA,CAAMP,SAAS,CAACQ,IAAI,CAAC,GAAG,CAAC,KAAG,CAAC,CAC3D,CAEA;AACA,KAAM,CAAEd,IAAI,CAAEE,KAAM,CAAC,CAAG,KAAM,CAAAQ,KAAK,CAACK,KAAK,CAAC,MAAM,CAAC,CAEjD,GAAIb,KAAK,CAAE,KAAM,CAAAA,KAAK,CAEtBJ,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAEC,IAAI,CAAC,CAAE;AACnD,MAAO,CAAAA,IAAI,EAAI,EAAE,CACnB,CAAE,MAAOE,KAAK,CAAE,CACdJ,OAAO,CAACI,KAAK,CAAC,uBAAuB,CAAEA,KAAK,CAAC,CAC7C,KAAM,CAAAA,KAAK,CACb,CACF,CAAC,CAED;AACA,MAAO,MAAM,CAAAc,gBAAgB,CAAG,KAAAA,CAAOC,QAAQ,CAAEC,MAAM,CAAEC,SAAS,CAAEC,SAAS,GAAK,CAChF,GAAI,CACF,KAAM,CAAElB,KAAM,CAAC,CAAG,KAAM,CAAAN,QAAQ,CAC7BQ,IAAI,CAAC,gBAAgB,CAAC,CACtBiB,MAAM,CAAC,CACNC,SAAS,CAAEL,QAAQ,CACnBR,OAAO,CAAES,MAAM,CACfK,UAAU,CAAEJ,SAAS,CACrBK,UAAU,CAAEJ,SAAS,CACrBK,SAAS,CAAE,GAAI,CAAAC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CACpC,CAAC,CAAC,CAEJ,GAAIzB,KAAK,CAAE,KAAM,CAAAA,KAAK,CACxB,CAAE,MAAOA,KAAK,CAAE,CACdJ,OAAO,CAACI,KAAK,CAAC,8BAA8B,CAAEA,KAAK,CAAC,CACpD,KAAM,CAAAA,KAAK,CACb,CACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}