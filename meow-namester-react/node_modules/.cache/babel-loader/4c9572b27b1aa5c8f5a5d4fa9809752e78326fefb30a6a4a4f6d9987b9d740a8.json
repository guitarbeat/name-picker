{"ast":null,"code":"/**\n * @module EloRating\n * @description A class that implements the Elo rating system for ranking cat names.\n * Used to calculate and update ratings based on head-to-head comparisons.\n */class EloRating{constructor(){let defaultRating=arguments.length>0&&arguments[0]!==undefined?arguments[0]:1500;let kFactor=arguments.length>1&&arguments[1]!==undefined?arguments[1]:32;this.defaultRating=defaultRating;this.kFactor=kFactor;this.minRating=1000;this.maxRating=2000;}getExpectedScore(ratingA,ratingB){return 1/(1+Math.pow(10,(ratingB-ratingA)/400));}getKFactor(rating){let games=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;if(games<10)return this.kFactor*1.5;if(rating<1300||rating>1700)return this.kFactor*0.75;return this.kFactor;}updateRating(rating,expected,actual){let games=arguments.length>3&&arguments[3]!==undefined?arguments[3]:0;const k=this.getKFactor(rating,games);const newRating=Math.round(rating+k*(actual-expected));return Math.max(this.minRating,Math.min(this.maxRating,newRating));}calculateNewRatings(ratingA,ratingB,outcome){let stats=arguments.length>3&&arguments[3]!==undefined?arguments[3]:{};const expectedA=this.getExpectedScore(ratingA,ratingB);const expectedB=this.getExpectedScore(ratingB,ratingA);let actualA,actualB;switch(outcome){case'left':actualA=1;actualB=0;break;case'right':actualA=0;actualB=1;break;case'both':actualA=0.8;actualB=0.8;break;case'none':actualA=0.5;actualB=0.5;break;default:actualA=0.5;actualB=0.5;}const gamesA=(stats.winsA||0)+(stats.lossesA||0);const gamesB=(stats.winsB||0)+(stats.lossesB||0);return{newRatingA:this.updateRating(ratingA,expectedA,actualA,gamesA),newRatingB:this.updateRating(ratingB,expectedB,actualB,gamesB)};}}export default EloRating;","map":{"version":3,"names":["EloRating","constructor","defaultRating","arguments","length","undefined","kFactor","minRating","maxRating","getExpectedScore","ratingA","ratingB","Math","pow","getKFactor","rating","games","updateRating","expected","actual","k","newRating","round","max","min","calculateNewRatings","outcome","stats","expectedA","expectedB","actualA","actualB","gamesA","winsA","lossesA","gamesB","winsB","lossesB","newRatingA","newRatingB"],"sources":["/Users/aaron/Desktop/Side Projects/name-picker/meow-namester-react/src/components/Tournament/EloRating.js"],"sourcesContent":["/**\n * @module EloRating\n * @description A class that implements the Elo rating system for ranking cat names.\n * Used to calculate and update ratings based on head-to-head comparisons.\n */\n\nclass EloRating {\n  constructor(defaultRating = 1500, kFactor = 32) {\n    this.defaultRating = defaultRating;\n    this.kFactor = kFactor;\n    this.minRating = 1000;\n    this.maxRating = 2000;\n  }\n\n  getExpectedScore(ratingA, ratingB) {\n    return 1 / (1 + Math.pow(10, (ratingB - ratingA) / 400));\n  }\n\n  getKFactor(rating, games = 0) {\n    if (games < 10) return this.kFactor * 1.5;\n    if (rating < 1300 || rating > 1700) return this.kFactor * 0.75;\n    return this.kFactor;\n  }\n\n  updateRating(rating, expected, actual, games = 0) {\n    const k = this.getKFactor(rating, games);\n    const newRating = Math.round(rating + k * (actual - expected));\n    return Math.max(this.minRating, Math.min(this.maxRating, newRating));\n  }\n\n  calculateNewRatings(ratingA, ratingB, outcome, stats = {}) {\n    const expectedA = this.getExpectedScore(ratingA, ratingB);\n    const expectedB = this.getExpectedScore(ratingB, ratingA);\n    \n    let actualA, actualB;\n    switch(outcome) {\n      case 'left':\n        actualA = 1;\n        actualB = 0;\n        break;\n      case 'right':\n        actualA = 0;\n        actualB = 1;\n        break;\n      case 'both':\n        actualA = 0.8;\n        actualB = 0.8;\n        break;\n      case 'none':\n        actualA = 0.5;\n        actualB = 0.5;\n        break;\n      default:\n        actualA = 0.5;\n        actualB = 0.5;\n    }\n\n    const gamesA = (stats.winsA || 0) + (stats.lossesA || 0);\n    const gamesB = (stats.winsB || 0) + (stats.lossesB || 0);\n\n    return {\n      newRatingA: this.updateRating(ratingA, expectedA, actualA, gamesA),\n      newRatingB: this.updateRating(ratingB, expectedB, actualB, gamesB)\n    };\n  }\n}\n\nexport default EloRating; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}