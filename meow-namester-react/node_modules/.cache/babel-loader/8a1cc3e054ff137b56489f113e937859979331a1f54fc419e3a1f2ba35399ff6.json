{"ast":null,"code":"var _s = $RefreshSig$();\n/**\n * @module useSupabaseStorage\n * @description A custom React hook that provides persistent storage using Supabase.\n * Manages real-time synchronization of data between the client and Supabase backend.\n * Handles CRUD operations for cat names, ratings, and user data.\n * \n * @example\n * // Basic usage in a component\n * const [ratings, setRatings, { loading, error }] = useSupabaseStorage('cat_names', [], 'JohnDoe');\n * \n * // Update ratings\n * await setRatings([\n *   { name: 'Whiskers', elo_rating: 1500, wins: 2, losses: 1 },\n *   { name: 'Mittens', elo_rating: 1600, wins: 3, losses: 0 }\n * ]);\n * \n * // Clear user data\n * const { clearUserData } = useSupabaseStorage('cat_names', [], 'JohnDoe')[2];\n * await clearUserData();\n * \n * @param {string} tableName - Name of the Supabase table to interact with\n * @param {Array} initialValue - Initial value to use before data is loaded\n * @param {string} userName - Username to filter data by\n * @returns {[Array, Function, Object]} Tuple containing:\n *   - Current stored value\n *   - Function to update the value\n *   - Object with loading state, error state, and utility functions\n */\n\nimport { useState, useEffect } from 'react';\nimport { supabase } from './supabaseClient';\nfunction useSupabaseStorage(tableName, initialValue = [], userName = '') {\n  _s();\n  const [storedValue, setStoredValue] = useState(initialValue);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    if (!userName) return;\n    fetchData();\n\n    // Set up real-time subscription\n    const subscription = supabase.channel(`${tableName}_changes`).on('postgres_changes', {\n      event: '*',\n      schema: 'public',\n      table: tableName,\n      filter: `user_name=eq.${userName}`\n    }, payload => {\n      console.log('Change received!', payload);\n      fetchData();\n    }).subscribe();\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, [tableName, userName]);\n\n  /**\n   * Fetches the latest data from Supabase\n   * @private\n   */\n  async function fetchData() {\n    try {\n      setLoading(true);\n      const {\n        data,\n        error: fetchError\n      } = await supabase.from(tableName).select('name, elo_rating, wins, losses, created_at').eq('user_name', userName).order('elo_rating', {\n        ascending: false\n      });\n      if (fetchError) throw fetchError;\n      setStoredValue((data === null || data === void 0 ? void 0 : data.map(item => ({\n        name: item.name,\n        rating: item.elo_rating,\n        wins: item.wins,\n        losses: item.losses\n      }))) || initialValue);\n    } catch (err) {\n      console.error('Error fetching data:', err);\n      setError(err);\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  /**\n   * Updates data in Supabase\n   * @param {Array|Object} newValue - New data to store\n   * @throws {Error} If there's an error updating the data\n   */\n  async function setValue(newValue) {\n    if (!userName) return;\n    try {\n      setLoading(true);\n      if (Array.isArray(newValue)) {\n        // Handle array updates (e.g., ranked cat names)\n        const {\n          error: upsertError\n        } = await supabase.from(tableName).upsert(newValue.map(item => ({\n          name: item.name || item,\n          elo_rating: item.rating || 1500,\n          wins: item.wins || 0,\n          losses: item.losses || 0,\n          user_name: userName,\n          updated_at: new Date().toISOString()\n        })));\n        if (upsertError) throw upsertError;\n      } else {\n        // Handle single record updates\n        const {\n          error: upsertError\n        } = await supabase.from(tableName).upsert({\n          name: newValue.name || newValue,\n          elo_rating: newValue.rating || 1500,\n          wins: newValue.wins || 0,\n          losses: newValue.losses || 0,\n          user_name: userName,\n          updated_at: new Date().toISOString()\n        });\n        if (upsertError) throw upsertError;\n      }\n      await fetchData(); // Refresh data after update\n    } catch (err) {\n      console.error('Error setting value:', err);\n      setError(err);\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  /**\n   * Clears all data for the current user from the specified table\n   * @throws {Error} If there's an error clearing the data\n   */\n  async function clearUserData() {\n    if (!userName) return;\n    try {\n      setLoading(true);\n      const {\n        error: deleteError\n      } = await supabase.from(tableName).delete().eq('user_name', userName);\n      if (deleteError) throw deleteError;\n      setStoredValue(initialValue);\n    } catch (err) {\n      console.error('Error clearing data:', err);\n      setError(err);\n    } finally {\n      setLoading(false);\n    }\n  }\n  return [storedValue, setValue, {\n    loading,\n    error,\n    clearUserData\n  }];\n}\n_s(useSupabaseStorage, \"7I0FNrSbcRydL4YWfLrml+7znFU=\");\nexport default useSupabaseStorage;","map":{"version":3,"names":["useState","useEffect","supabase","useSupabaseStorage","tableName","initialValue","userName","_s","storedValue","setStoredValue","loading","setLoading","error","setError","fetchData","subscription","channel","on","event","schema","table","filter","payload","console","log","subscribe","unsubscribe","data","fetchError","from","select","eq","order","ascending","map","item","name","rating","elo_rating","wins","losses","err","setValue","newValue","Array","isArray","upsertError","upsert","user_name","updated_at","Date","toISOString","clearUserData","deleteError","delete"],"sources":["/Users/aaron/Desktop/Side Projects/name-picker/meow-namester-react/src/supabase/useSupabaseStorage.js"],"sourcesContent":["/**\n * @module useSupabaseStorage\n * @description A custom React hook that provides persistent storage using Supabase.\n * Manages real-time synchronization of data between the client and Supabase backend.\n * Handles CRUD operations for cat names, ratings, and user data.\n * \n * @example\n * // Basic usage in a component\n * const [ratings, setRatings, { loading, error }] = useSupabaseStorage('cat_names', [], 'JohnDoe');\n * \n * // Update ratings\n * await setRatings([\n *   { name: 'Whiskers', elo_rating: 1500, wins: 2, losses: 1 },\n *   { name: 'Mittens', elo_rating: 1600, wins: 3, losses: 0 }\n * ]);\n * \n * // Clear user data\n * const { clearUserData } = useSupabaseStorage('cat_names', [], 'JohnDoe')[2];\n * await clearUserData();\n * \n * @param {string} tableName - Name of the Supabase table to interact with\n * @param {Array} initialValue - Initial value to use before data is loaded\n * @param {string} userName - Username to filter data by\n * @returns {[Array, Function, Object]} Tuple containing:\n *   - Current stored value\n *   - Function to update the value\n *   - Object with loading state, error state, and utility functions\n */\n\nimport { useState, useEffect } from 'react';\nimport { supabase } from './supabaseClient';\n\nfunction useSupabaseStorage(tableName, initialValue = [], userName = '') {\n  const [storedValue, setStoredValue] = useState(initialValue);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    if (!userName) return;\n    fetchData();\n    \n    // Set up real-time subscription\n    const subscription = supabase\n      .channel(`${tableName}_changes`)\n      .on('postgres_changes', \n        { \n          event: '*', \n          schema: 'public', \n          table: tableName,\n          filter: `user_name=eq.${userName}`\n        }, \n        (payload) => {\n          console.log('Change received!', payload);\n          fetchData();\n        }\n      )\n      .subscribe();\n\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, [tableName, userName]);\n\n  /**\n   * Fetches the latest data from Supabase\n   * @private\n   */\n  async function fetchData() {\n    try {\n      setLoading(true);\n      const { data, error: fetchError } = await supabase\n        .from(tableName)\n        .select('name, elo_rating, wins, losses, created_at')\n        .eq('user_name', userName)\n        .order('elo_rating', { ascending: false });\n\n      if (fetchError) throw fetchError;\n\n      setStoredValue(data?.map(item => ({\n        name: item.name,\n        rating: item.elo_rating,\n        wins: item.wins,\n        losses: item.losses\n      })) || initialValue);\n    } catch (err) {\n      console.error('Error fetching data:', err);\n      setError(err);\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  /**\n   * Updates data in Supabase\n   * @param {Array|Object} newValue - New data to store\n   * @throws {Error} If there's an error updating the data\n   */\n  async function setValue(newValue) {\n    if (!userName) return;\n    \n    try {\n      setLoading(true);\n      \n      if (Array.isArray(newValue)) {\n        // Handle array updates (e.g., ranked cat names)\n        const { error: upsertError } = await supabase\n          .from(tableName)\n          .upsert(\n            newValue.map(item => ({\n              name: item.name || item,\n              elo_rating: item.rating || 1500,\n              wins: item.wins || 0,\n              losses: item.losses || 0,\n              user_name: userName,\n              updated_at: new Date().toISOString()\n            }))\n          );\n\n        if (upsertError) throw upsertError;\n      } else {\n        // Handle single record updates\n        const { error: upsertError } = await supabase\n          .from(tableName)\n          .upsert({\n            name: newValue.name || newValue,\n            elo_rating: newValue.rating || 1500,\n            wins: newValue.wins || 0,\n            losses: newValue.losses || 0,\n            user_name: userName,\n            updated_at: new Date().toISOString()\n          });\n\n        if (upsertError) throw upsertError;\n      }\n\n      await fetchData(); // Refresh data after update\n    } catch (err) {\n      console.error('Error setting value:', err);\n      setError(err);\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  /**\n   * Clears all data for the current user from the specified table\n   * @throws {Error} If there's an error clearing the data\n   */\n  async function clearUserData() {\n    if (!userName) return;\n    \n    try {\n      setLoading(true);\n      const { error: deleteError } = await supabase\n        .from(tableName)\n        .delete()\n        .eq('user_name', userName);\n\n      if (deleteError) throw deleteError;\n      setStoredValue(initialValue);\n    } catch (err) {\n      console.error('Error clearing data:', err);\n      setError(err);\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  return [storedValue, setValue, { loading, error, clearUserData }];\n}\n\nexport default useSupabaseStorage; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}