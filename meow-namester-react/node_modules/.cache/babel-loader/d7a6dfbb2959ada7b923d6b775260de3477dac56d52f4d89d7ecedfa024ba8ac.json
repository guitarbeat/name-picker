{"ast":null,"code":"var _s = $RefreshSig$();\n/**\n * @module useLocalStorage\n * @description A custom React hook that provides persistent storage using localStorage.\n * It syncs state with localStorage and handles serialization/deserialization of stored values.\n * \n * @example\n * // Using the hook in a component\n * const [value, setValue] = useLocalStorage('storageKey', defaultValue);\n * \n * @param {string} key - The localStorage key to store the value under\n * @param {any} initialValue - The initial value if no value exists in localStorage\n * @returns {[any, Function]} A tuple containing the stored value and a setter function\n */\n\nimport { useState, useEffect } from 'react';\nfunction useLocalStorage(key, initialValue) {\n  _s();\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      const item = window.localStorage.getItem(key);\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      console.error(error);\n      return initialValue;\n    }\n  });\n  useEffect(() => {\n    try {\n      window.localStorage.setItem(key, JSON.stringify(storedValue));\n    } catch (error) {\n      console.error(error);\n    }\n  }, [key, storedValue]);\n  return [storedValue, setStoredValue];\n}\n_s(useLocalStorage, \"CNhZxQbxYOyslLkU5SGkvIZlGUQ=\");\nexport default useLocalStorage;","map":{"version":3,"names":["useState","useEffect","useLocalStorage","key","initialValue","_s","storedValue","setStoredValue","item","window","localStorage","getItem","JSON","parse","error","console","setItem","stringify"],"sources":["/Users/aaron/Desktop/Side Projects/name-picker/meow-namester-react/src/hooks/useLocalStorage.js"],"sourcesContent":["/**\n * @module useLocalStorage\n * @description A custom React hook that provides persistent storage using localStorage.\n * It syncs state with localStorage and handles serialization/deserialization of stored values.\n * \n * @example\n * // Using the hook in a component\n * const [value, setValue] = useLocalStorage('storageKey', defaultValue);\n * \n * @param {string} key - The localStorage key to store the value under\n * @param {any} initialValue - The initial value if no value exists in localStorage\n * @returns {[any, Function]} A tuple containing the stored value and a setter function\n */\n\nimport { useState, useEffect } from 'react';\n\nfunction useLocalStorage(key, initialValue) {\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      const item = window.localStorage.getItem(key);\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      console.error(error);\n      return initialValue;\n    }\n  });\n\n  useEffect(() => {\n    try {\n      window.localStorage.setItem(key, JSON.stringify(storedValue));\n    } catch (error) {\n      console.error(error);\n    }\n  }, [key, storedValue]);\n\n  return [storedValue, setStoredValue];\n}\n\nexport default useLocalStorage;"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAE3C,SAASC,eAAeA,CAACC,GAAG,EAAEC,YAAY,EAAE;EAAAC,EAAA;EAC1C,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGP,QAAQ,CAAC,MAAM;IACnD,IAAI;MACF,MAAMQ,IAAI,GAAGC,MAAM,CAACC,YAAY,CAACC,OAAO,CAACR,GAAG,CAAC;MAC7C,OAAOK,IAAI,GAAGI,IAAI,CAACC,KAAK,CAACL,IAAI,CAAC,GAAGJ,YAAY;IAC/C,CAAC,CAAC,OAAOU,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;MACpB,OAAOV,YAAY;IACrB;EACF,CAAC,CAAC;EAEFH,SAAS,CAAC,MAAM;IACd,IAAI;MACFQ,MAAM,CAACC,YAAY,CAACM,OAAO,CAACb,GAAG,EAAES,IAAI,CAACK,SAAS,CAACX,WAAW,CAAC,CAAC;IAC/D,CAAC,CAAC,OAAOQ,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;IACtB;EACF,CAAC,EAAE,CAACX,GAAG,EAAEG,WAAW,CAAC,CAAC;EAEtB,OAAO,CAACA,WAAW,EAAEC,cAAc,CAAC;AACtC;AAACF,EAAA,CApBQH,eAAe;AAsBxB,eAAeA,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}