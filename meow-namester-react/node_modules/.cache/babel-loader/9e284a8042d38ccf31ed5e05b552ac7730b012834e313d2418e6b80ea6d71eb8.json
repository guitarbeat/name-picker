{"ast":null,"code":"/**\n * @module PreferenceSorter\n * @description A class that implements a merge sort algorithm with custom comparisons\n * for sorting cat names based on user preferences.\n */\n\nexport class PreferenceSorter {\n  constructor(items) {\n    this.items = items;\n    this.preferences = new Map();\n    this.currentRankings = [...items];\n    this.ranks = [];\n    this.rec = new Array(items.length).fill(0);\n    this.preferenceCache = new Map();\n    this.preferenceHistory = [];\n  }\n  getName(item) {\n    return typeof item === 'string' ? item : item.name;\n  }\n  addPreference(item1, item2, value) {\n    const key = `${this.getName(item1)}-${this.getName(item2)}`;\n    this.preferences.set(key, value);\n    this.preferenceHistory.push({\n      key,\n      value\n    });\n  }\n  undoLastPreference() {\n    if (this.preferenceHistory.length === 0) return;\n    const lastPreference = this.preferenceHistory.pop();\n    this.preferences.delete(lastPreference.key);\n    this.preferenceCache.clear();\n    this.ranks = [];\n  }\n  getPreference(item1, item2) {\n    const cacheKey = `${this.getName(item1)}-${this.getName(item2)}`;\n    if (this.preferenceCache.has(cacheKey)) {\n      return this.preferenceCache.get(cacheKey);\n    }\n    const key = `${this.getName(item1)}-${this.getName(item2)}`;\n    const reverseKey = `${this.getName(item2)}-${this.getName(item1)}`;\n    let result;\n    if (this.preferences.has(key)) {\n      result = this.preferences.get(key);\n    } else if (this.preferences.has(reverseKey)) {\n      result = -this.preferences.get(reverseKey);\n    } else {\n      result = 0;\n    }\n    this.preferenceCache.set(cacheKey, result);\n    return result;\n  }\n  getCurrentRankings() {\n    if (this.ranks.length > 0) {\n      return this.ranks;\n    }\n    return this.currentRankings;\n  }\n  async sort(compareCallback) {\n    const n = this.items.length;\n    if (!this.rec || this.rec.length !== n) {\n      this.rec = new Array(n).fill(0);\n    }\n    await this.sortRecursive(0, n - 1, compareCallback);\n    return this.ranks;\n  }\n  async sortRecursive(left, right, compareCallback) {\n    if (right - left < 1) {\n      if (left === right) {\n        this.ranks.push(this.items[left]);\n      }\n      return;\n    }\n    const mid = Math.floor((left + right) / 2);\n    await this.sortRecursive(left, mid, compareCallback);\n    await this.sortRecursive(mid + 1, right, compareCallback);\n    await this.mergeSubGroups(left, mid, right, compareCallback);\n  }\n  async mergeSubGroups(left, mid, right, compareCallback) {\n    let i = left;\n    let j = mid + 1;\n    const merged = [];\n    while (i <= mid && j <= right) {\n      const result = await compareCallback(this.items[i], this.items[j]);\n      if (result <= -0.5) {\n        merged.push(this.items[i++]);\n      } else if (result >= 0.5) {\n        merged.push(this.items[j++]);\n      } else {\n        if (result < 0) {\n          merged.push(this.items[i++]);\n          merged.push(this.items[j++]);\n        } else {\n          merged.push(this.items[j++]);\n          merged.push(this.items[i++]);\n        }\n      }\n    }\n    while (i <= mid) {\n      merged.push(this.items[i++]);\n    }\n    while (j <= right) {\n      merged.push(this.items[j++]);\n    }\n    for (let k = 0; k < merged.length; k++) {\n      this.items[left + k] = merged[k];\n      this.currentRankings[left + k] = merged[k];\n    }\n    if (left === 0 && right === this.items.length - 1) {\n      this.ranks = [...merged];\n    }\n  }\n}","map":{"version":3,"names":["PreferenceSorter","constructor","items","preferences","Map","currentRankings","ranks","rec","Array","length","fill","preferenceCache","preferenceHistory","getName","item","name","addPreference","item1","item2","value","key","set","push","undoLastPreference","lastPreference","pop","delete","clear","getPreference","cacheKey","has","get","reverseKey","result","getCurrentRankings","sort","compareCallback","n","sortRecursive","left","right","mid","Math","floor","mergeSubGroups","i","j","merged","k"],"sources":["/Users/aaron/Desktop/Side Projects/name-picker/meow-namester-react/src/components/Tournament/PreferenceSorter.js"],"sourcesContent":["/**\n * @module PreferenceSorter\n * @description A class that implements a merge sort algorithm with custom comparisons\n * for sorting cat names based on user preferences.\n */\n\nexport class PreferenceSorter {\n    constructor(items) {\n        this.items = items;\n        this.preferences = new Map();\n        this.currentRankings = [...items];\n        this.ranks = [];\n        this.rec = new Array(items.length).fill(0);\n        this.preferenceCache = new Map();\n        this.preferenceHistory = [];\n    }\n\n    getName(item) {\n        return typeof item === 'string' ? item : item.name;\n    }\n\n    addPreference(item1, item2, value) {\n        const key = `${this.getName(item1)}-${this.getName(item2)}`;\n        this.preferences.set(key, value);\n        this.preferenceHistory.push({ key, value });\n    }\n\n    undoLastPreference() {\n        if (this.preferenceHistory.length === 0) return;\n        \n        const lastPreference = this.preferenceHistory.pop();\n        this.preferences.delete(lastPreference.key);\n        this.preferenceCache.clear();\n        this.ranks = [];\n    }\n\n    getPreference(item1, item2) {\n        const cacheKey = `${this.getName(item1)}-${this.getName(item2)}`;\n        if (this.preferenceCache.has(cacheKey)) {\n            return this.preferenceCache.get(cacheKey);\n        }\n\n        const key = `${this.getName(item1)}-${this.getName(item2)}`;\n        const reverseKey = `${this.getName(item2)}-${this.getName(item1)}`;\n        let result;\n        \n        if (this.preferences.has(key)) {\n            result = this.preferences.get(key);\n        } else if (this.preferences.has(reverseKey)) {\n            result = -this.preferences.get(reverseKey);\n        } else {\n            result = 0;\n        }\n\n        this.preferenceCache.set(cacheKey, result);\n        return result;\n    }\n\n    getCurrentRankings() {\n        if (this.ranks.length > 0) {\n            return this.ranks;\n        }\n        return this.currentRankings;\n    }\n\n    async sort(compareCallback) {\n        const n = this.items.length;\n        \n        if (!this.rec || this.rec.length !== n) {\n            this.rec = new Array(n).fill(0);\n        }\n        \n        await this.sortRecursive(0, n - 1, compareCallback);\n        return this.ranks;\n    }\n\n    async sortRecursive(left, right, compareCallback) {\n        if (right - left < 1) {\n            if (left === right) {\n                this.ranks.push(this.items[left]);\n            }\n            return;\n        }\n\n        const mid = Math.floor((left + right) / 2);\n        await this.sortRecursive(left, mid, compareCallback);\n        await this.sortRecursive(mid + 1, right, compareCallback);\n        await this.mergeSubGroups(left, mid, right, compareCallback);\n    }\n\n    async mergeSubGroups(left, mid, right, compareCallback) {\n        let i = left;\n        let j = mid + 1;\n        const merged = [];\n\n        while (i <= mid && j <= right) {\n            const result = await compareCallback(this.items[i], this.items[j]);\n\n            if (result <= -0.5) {\n                merged.push(this.items[i++]);\n            } else if (result >= 0.5) {\n                merged.push(this.items[j++]);\n            } else {\n                if (result < 0) {\n                    merged.push(this.items[i++]);\n                    merged.push(this.items[j++]);\n                } else {\n                    merged.push(this.items[j++]);\n                    merged.push(this.items[i++]);\n                }\n            }\n        }\n\n        while (i <= mid) {\n            merged.push(this.items[i++]);\n        }\n        while (j <= right) {\n            merged.push(this.items[j++]);\n        }\n\n        for (let k = 0; k < merged.length; k++) {\n            this.items[left + k] = merged[k];\n            this.currentRankings[left + k] = merged[k];\n        }\n\n        if (left === 0 && right === this.items.length - 1) {\n            this.ranks = [...merged];\n        }\n    }\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}