{"ast":null,"code":"/**\n * @module EloRating\n * @description A class that implements the Elo rating system for ranking cat names.\n * Used to calculate and update ratings based on head-to-head comparisons.\n * \n * @example\n * const elo = new EloRating();\n * const { newRatingA, newRatingB } = elo.calculateNewRatings(1500, 1500, 'left');\n * \n * @class\n * @property {number} defaultRating - Default rating for new names (default: 1500)\n * @property {number} kFactor - Base K-factor affecting rating changes (default: 32)\n * @property {number} minRating - Minimum possible rating (default: 1000)\n * @property {number} maxRating - Maximum possible rating (default: 2000)\n */\n\nclass EloRating {\n  constructor(defaultRating = 1500, kFactor = 32) {\n    this.defaultRating = defaultRating;\n    this.kFactor = kFactor;\n    this.minRating = 1000;\n    this.maxRating = 2000;\n  }\n\n  /**\n   * Calculates the expected score for a matchup\n   * @param {number} ratingA - Rating of first name\n   * @param {number} ratingB - Rating of second name\n   * @returns {number} Expected score between 0 and 1\n   */\n  getExpectedScore(ratingA, ratingB) {\n    return 1 / (1 + Math.pow(10, (ratingB - ratingA) / 400));\n  }\n\n  /**\n   * Gets the appropriate K-factor based on rating and number of games\n   * @param {number} rating - Current rating\n   * @param {number} games - Number of games played\n   * @returns {number} Adjusted K-factor\n   */\n  getKFactor(rating, games = 0) {\n    // Higher K-factor for new names or extreme ratings\n    if (games < 10) return this.kFactor * 1.5;\n    if (rating < 1300 || rating > 1700) return this.kFactor * 0.75;\n    return this.kFactor;\n  }\n\n  /**\n   * Updates a rating based on expected and actual scores\n   * @param {number} rating - Current rating\n   * @param {number} expected - Expected score\n   * @param {number} actual - Actual score\n   * @param {number} games - Number of games played\n   * @returns {number} New rating\n   */\n  updateRating(rating, expected, actual, games = 0) {\n    const k = this.getKFactor(rating, games);\n    const newRating = Math.round(rating + k * (actual - expected));\n\n    // Ensure rating stays within bounds\n    return Math.max(this.minRating, Math.min(this.maxRating, newRating));\n  }\n\n  /**\n   * Calculates new ratings for both names after a comparison\n   * @param {number} ratingA - Rating of first name\n   * @param {number} ratingB - Rating of second name\n   * @param {string} outcome - Result ('left', 'right', 'both', or 'none')\n   * @param {Object} stats - Optional stats for both names\n   * @returns {Object} Object containing new ratings for both names\n   */\n  calculateNewRatings(ratingA, ratingB, outcome, stats = {}) {\n    const expectedA = this.getExpectedScore(ratingA, ratingB);\n    const expectedB = this.getExpectedScore(ratingB, ratingA);\n    let actualA, actualB;\n    switch (outcome) {\n      case 'left':\n        // A wins\n        actualA = 1;\n        actualB = 0;\n        break;\n      case 'right':\n        // B wins\n        actualA = 0;\n        actualB = 1;\n        break;\n      case 'both':\n        // Slight preference for first option\n        actualA = 0.6;\n        actualB = 0.4;\n        break;\n      case 'none':\n        // True tie\n        actualA = 0.5;\n        actualB = 0.5;\n        break;\n      default:\n        // Default to tie\n        actualA = 0.5;\n        actualB = 0.5;\n    }\n    const gamesA = (stats.winsA || 0) + (stats.lossesA || 0);\n    const gamesB = (stats.winsB || 0) + (stats.lossesB || 0);\n    return {\n      newRatingA: this.updateRating(ratingA, expectedA, actualA, gamesA),\n      newRatingB: this.updateRating(ratingB, expectedB, actualB, gamesB)\n    };\n  }\n}\nexport default EloRating;","map":{"version":3,"names":["EloRating","constructor","defaultRating","kFactor","minRating","maxRating","getExpectedScore","ratingA","ratingB","Math","pow","getKFactor","rating","games","updateRating","expected","actual","k","newRating","round","max","min","calculateNewRatings","outcome","stats","expectedA","expectedB","actualA","actualB","gamesA","winsA","lossesA","gamesB","winsB","lossesB","newRatingA","newRatingB"],"sources":["/Users/aaron/Desktop/Side Projects/name-picker/meow-namester-react/src/utils/EloRating.js"],"sourcesContent":["/**\n * @module EloRating\n * @description A class that implements the Elo rating system for ranking cat names.\n * Used to calculate and update ratings based on head-to-head comparisons.\n * \n * @example\n * const elo = new EloRating();\n * const { newRatingA, newRatingB } = elo.calculateNewRatings(1500, 1500, 'left');\n * \n * @class\n * @property {number} defaultRating - Default rating for new names (default: 1500)\n * @property {number} kFactor - Base K-factor affecting rating changes (default: 32)\n * @property {number} minRating - Minimum possible rating (default: 1000)\n * @property {number} maxRating - Maximum possible rating (default: 2000)\n */\n\nclass EloRating {\n  constructor(defaultRating = 1500, kFactor = 32) {\n    this.defaultRating = defaultRating;\n    this.kFactor = kFactor;\n    this.minRating = 1000;\n    this.maxRating = 2000;\n  }\n\n  /**\n   * Calculates the expected score for a matchup\n   * @param {number} ratingA - Rating of first name\n   * @param {number} ratingB - Rating of second name\n   * @returns {number} Expected score between 0 and 1\n   */\n  getExpectedScore(ratingA, ratingB) {\n    return 1 / (1 + Math.pow(10, (ratingB - ratingA) / 400));\n  }\n\n  /**\n   * Gets the appropriate K-factor based on rating and number of games\n   * @param {number} rating - Current rating\n   * @param {number} games - Number of games played\n   * @returns {number} Adjusted K-factor\n   */\n  getKFactor(rating, games = 0) {\n    // Higher K-factor for new names or extreme ratings\n    if (games < 10) return this.kFactor * 1.5;\n    if (rating < 1300 || rating > 1700) return this.kFactor * 0.75;\n    return this.kFactor;\n  }\n\n  /**\n   * Updates a rating based on expected and actual scores\n   * @param {number} rating - Current rating\n   * @param {number} expected - Expected score\n   * @param {number} actual - Actual score\n   * @param {number} games - Number of games played\n   * @returns {number} New rating\n   */\n  updateRating(rating, expected, actual, games = 0) {\n    const k = this.getKFactor(rating, games);\n    const newRating = Math.round(rating + k * (actual - expected));\n    \n    // Ensure rating stays within bounds\n    return Math.max(this.minRating, Math.min(this.maxRating, newRating));\n  }\n\n  /**\n   * Calculates new ratings for both names after a comparison\n   * @param {number} ratingA - Rating of first name\n   * @param {number} ratingB - Rating of second name\n   * @param {string} outcome - Result ('left', 'right', 'both', or 'none')\n   * @param {Object} stats - Optional stats for both names\n   * @returns {Object} Object containing new ratings for both names\n   */\n  calculateNewRatings(ratingA, ratingB, outcome, stats = {}) {\n    const expectedA = this.getExpectedScore(ratingA, ratingB);\n    const expectedB = this.getExpectedScore(ratingB, ratingA);\n    \n    let actualA, actualB;\n    switch(outcome) {\n      case 'left': // A wins\n        actualA = 1;\n        actualB = 0;\n        break;\n      case 'right': // B wins\n        actualA = 0;\n        actualB = 1;\n        break;\n      case 'both': // Slight preference for first option\n        actualA = 0.6;\n        actualB = 0.4;\n        break;\n      case 'none': // True tie\n        actualA = 0.5;\n        actualB = 0.5;\n        break;\n      default: // Default to tie\n        actualA = 0.5;\n        actualB = 0.5;\n    }\n\n    const gamesA = (stats.winsA || 0) + (stats.lossesA || 0);\n    const gamesB = (stats.winsB || 0) + (stats.lossesB || 0);\n\n    return {\n      newRatingA: this.updateRating(ratingA, expectedA, actualA, gamesA),\n      newRatingB: this.updateRating(ratingB, expectedB, actualB, gamesB)\n    };\n  }\n}\n\nexport default EloRating;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}