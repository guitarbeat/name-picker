{"ast":null,"code":"import _objectSpread from\"/Users/aaron/Desktop/Side Projects/name-picker/meow-namester-react/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";/**\n * @module App\n * @description Main application component for the cat name tournament app.\n * Manages the overall application state and tournament flow, including:\n * - Name input and management\n * - Tournament progression\n * - Rating calculations\n * - Results display\n * \n * Uses the Elo rating system for ranking and a custom sorting algorithm\n * for determining the best cat name through user preferences.\n * \n * @component\n * @returns {JSX.Element} The complete application UI\n */import React,{useState,useEffect}from'react';import{Tournament,Results,ErrorBoundary,Login,Profile,TournamentSetup,NameSuggestion// Add this import\n}from'./components';import useUserSession from'./hooks/useUserSession';import useSupabaseStorage from'./supabase/useSupabaseStorage';import{supabase,getNamesWithDescriptions}from'./supabase/supabaseClient';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function App(){const{userName,isLoggedIn,login,logout,session}=useUserSession();const[ratings,setRatings]=useState({});const[view,setView]=useState('tournament');const[tournamentComplete,setTournamentComplete]=useState(false);const[tournamentNames,setTournamentNames]=useState(null);const[names,setNames]=useState([]);console.log('App - Current ratings:',ratings);console.log('App - Tournament names:',tournamentNames);useEffect(()=>{const loadNames=async()=>{try{const namesData=await getNamesWithDescriptions();console.log('Loaded names:',namesData);// Debug log\nsetNames(namesData);}catch(error){console.error('Error loading names:',error);}};loadNames();},[]);// Reset tournament state when changing views\nuseEffect(()=>{if(view!=='tournament'){setTournamentNames(null);setTournamentComplete(false);}},[view]);const handleTournamentComplete=async finalRatings=>{try{if(!userName){console.error('No user name available');return;}console.log('Starting tournament completion for user:',userName);// Merge new ratings with existing ones, preserving wins/losses\nconst updatedRatings=_objectSpread({},ratings);finalRatings.forEach(_ref=>{let{name,rating}=_ref;const existingRating=typeof updatedRatings[name]==='object'?updatedRatings[name]:{rating:updatedRatings[name]||1500,wins:0,losses:0};// If rating improved, count as a win, otherwise a loss\nconst isImprovement=rating>(existingRating.rating||1500);updatedRatings[name]={rating:Math.round(rating),wins:(existingRating.wins||0)+(isImprovement?1:0),losses:(existingRating.losses||0)+(isImprovement?0:1)};});console.log('Fetching name_ids for:',Object.keys(updatedRatings));// Get name_ids from name_options table\nconst{data:nameOptions,error:nameError}=await supabase.from('name_options').select('id, name').in('name',Object.keys(updatedRatings));if(nameError){console.error('Error fetching name options:',nameError);return;}console.log('Retrieved name options:',nameOptions);// Create a map of name to name_id\nconst nameToIdMap=nameOptions.reduce((acc,_ref2)=>{let{id,name}=_ref2;acc[name]=id;return acc;},{});// Prepare records for database\nconst recordsToUpsert=Object.entries(updatedRatings).map(_ref3=>{let[name,data]=_ref3;const name_id=nameToIdMap[name];if(!name_id){console.warn(\"No name_id found for \".concat(name));return null;}return{user_name:userName,name_id,rating:data.rating,wins:data.wins,losses:data.losses,updated_at:new Date().toISOString()};}).filter(Boolean);console.log('Prepared records for upsert:',recordsToUpsert);if(recordsToUpsert.length>0){// Update ratings directly without checking user\nconst{error:upsertError}=await supabase.from('cat_name_ratings').upsert(recordsToUpsert,{onConflict:'user_name,name_id',returning:'minimal'});if(upsertError){console.error('Error updating ratings:',upsertError);return;}console.log('Successfully updated ratings');}// Update local state\nsetRatings(updatedRatings);setTournamentComplete(true);}catch(error){console.error('Tournament completion error:',error);}};const handleStartNewTournament=()=>{setTournamentComplete(false);setTournamentNames(null);setView('tournament');};const handleTournamentSetup=names=>{console.log('App - Setting up tournament with names:',names);setTournamentNames(names);};// Simplified ratings update logic\nconst handleUpdateRatings=async adjustedRatings=>{try{// Convert array format to consistent object format\nconst updatedRatings=adjustedRatings.reduce((acc,_ref4)=>{let{name,rating,wins=0,losses=0}=_ref4;acc[name]={rating:Math.round(rating),wins:wins,losses:losses};return acc;},{});// Get name_ids in a single query\nconst{data:nameOptions,error:nameError}=await supabase.from('name_options').select('id, name').in('name',Object.keys(updatedRatings));if(nameError)throw nameError;// Create records for database update\nconst recordsToUpsert=nameOptions.map(_ref5=>{let{id,name}=_ref5;return{user_name:userName,name_id:id,rating:updatedRatings[name].rating,wins:updatedRatings[name].wins,losses:updatedRatings[name].losses,updated_at:new Date().toISOString()};});if(recordsToUpsert.length===0){throw new Error('No valid records to update');}// Update database\nconst{error:upsertError}=await supabase.from('cat_name_ratings').upsert(recordsToUpsert,{onConflict:'user_name,name_id',returning:'minimal'});if(upsertError)throw upsertError;// Update local state\nsetRatings(updatedRatings);return true;}catch(error){console.error('Error updating ratings:',error);throw error;}};const handleLogout=async()=>{logout();};if(!isLoggedIn){return/*#__PURE__*/_jsx(Login,{onLogin:login});}const renderMainContent=()=>{if(view==='profile'){return/*#__PURE__*/_jsx(Profile,{userName:userName,onStartNewTournament:handleStartNewTournament,ratings:ratings,onUpdateRatings:handleUpdateRatings});}if(view==='suggest'){// Add this section\nreturn/*#__PURE__*/_jsx(NameSuggestion,{});}if(tournamentComplete){return/*#__PURE__*/_jsx(Results,{ratings:ratings,onStartNew:handleStartNewTournament,userName:userName,onUpdateRatings:handleUpdateRatings,currentTournamentNames:tournamentNames});}if(!tournamentNames){return/*#__PURE__*/_jsx(TournamentSetup,{onStart:handleTournamentSetup,userName:userName,existingRatings:ratings});}return/*#__PURE__*/_jsx(Tournament,{names:tournamentNames,existingRatings:ratings,onComplete:handleTournamentComplete,userName:userName});};return/*#__PURE__*/_jsxs(\"div\",{className:\"app\",children:[/*#__PURE__*/_jsxs(\"header\",{children:[/*#__PURE__*/_jsx(\"div\",{className:\"header-background\",style:{backgroundImage:\"url(\".concat(process.env.PUBLIC_URL,\"/images/cat.gif)\")}}),/*#__PURE__*/_jsx(\"img\",{src:\"\".concat(process.env.PUBLIC_URL,\"/images/cat.gif\"),alt:\"Cat animation\",className:\"header-image\"}),/*#__PURE__*/_jsx(\"h1\",{children:\"Meow Namester\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"user-controls\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"nav-menu\",children:[/*#__PURE__*/_jsx(\"button\",{onClick:()=>setView('tournament'),className:view==='tournament'?'active':'',children:\"Tournament\"}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>setView('profile'),className:view==='profile'?'active':'',children:\"My Profile\"}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>setView('suggest'),className:view==='suggest'?'active':'',children:\"Suggest Names\"})]}),/*#__PURE__*/_jsxs(\"span\",{className:\"user-welcome\",children:[\"Welcome, \",userName,\"!\"]}),/*#__PURE__*/_jsx(\"button\",{onClick:handleLogout,className:\"logout-button\",children:\"Logout\"})]})]}),/*#__PURE__*/_jsx(\"main\",{children:/*#__PURE__*/_jsx(ErrorBoundary,{children:renderMainContent()})})]});}export default App;","map":{"version":3,"names":["React","useState","useEffect","Tournament","Results","ErrorBoundary","Login","Profile","TournamentSetup","NameSuggestion","useUserSession","useSupabaseStorage","supabase","getNamesWithDescriptions","jsx","_jsx","jsxs","_jsxs","App","userName","isLoggedIn","login","logout","session","ratings","setRatings","view","setView","tournamentComplete","setTournamentComplete","tournamentNames","setTournamentNames","names","setNames","console","log","loadNames","namesData","error","handleTournamentComplete","finalRatings","updatedRatings","_objectSpread","forEach","_ref","name","rating","existingRating","wins","losses","isImprovement","Math","round","Object","keys","data","nameOptions","nameError","from","select","in","nameToIdMap","reduce","acc","_ref2","id","recordsToUpsert","entries","map","_ref3","name_id","warn","concat","user_name","updated_at","Date","toISOString","filter","Boolean","length","upsertError","upsert","onConflict","returning","handleStartNewTournament","handleTournamentSetup","handleUpdateRatings","adjustedRatings","_ref4","_ref5","Error","handleLogout","onLogin","renderMainContent","onStartNewTournament","onUpdateRatings","onStartNew","currentTournamentNames","onStart","existingRatings","onComplete","className","children","style","backgroundImage","process","env","PUBLIC_URL","src","alt","onClick"],"sources":["/Users/aaron/Desktop/Side Projects/name-picker/meow-namester-react/src/App.js"],"sourcesContent":["/**\n * @module App\n * @description Main application component for the cat name tournament app.\n * Manages the overall application state and tournament flow, including:\n * - Name input and management\n * - Tournament progression\n * - Rating calculations\n * - Results display\n * \n * Uses the Elo rating system for ranking and a custom sorting algorithm\n * for determining the best cat name through user preferences.\n * \n * @component\n * @returns {JSX.Element} The complete application UI\n */\n\nimport React, { useState, useEffect } from 'react';\nimport { \n  Tournament, \n  Results, \n  ErrorBoundary,\n  Login,\n  Profile,\n  TournamentSetup,\n  NameSuggestion  // Add this import\n} from './components';\nimport useUserSession from './hooks/useUserSession';\nimport useSupabaseStorage from './supabase/useSupabaseStorage';\nimport { supabase, getNamesWithDescriptions } from './supabase/supabaseClient';\n\nfunction App() {\n  const { userName, isLoggedIn, login, logout, session } = useUserSession();\n  const [ratings, setRatings] = useState({});\n  const [view, setView] = useState('tournament');\n  const [tournamentComplete, setTournamentComplete] = useState(false);\n  const [tournamentNames, setTournamentNames] = useState(null);\n  const [names, setNames] = useState([]);\n\n  console.log('App - Current ratings:', ratings);\n  console.log('App - Tournament names:', tournamentNames);\n\n  useEffect(() => {\n    const loadNames = async () => {\n      try {\n        const namesData = await getNamesWithDescriptions();\n        console.log('Loaded names:', namesData); // Debug log\n        setNames(namesData);\n      } catch (error) {\n        console.error('Error loading names:', error);\n      }\n    };\n\n    loadNames();\n  }, []);\n\n  // Reset tournament state when changing views\n  useEffect(() => {\n    if (view !== 'tournament') {\n      setTournamentNames(null);\n      setTournamentComplete(false);\n    }\n  }, [view]);\n\n  const handleTournamentComplete = async (finalRatings) => {\n    try {\n      if (!userName) {\n        console.error('No user name available');\n        return;\n      }\n\n      console.log('Starting tournament completion for user:', userName);\n\n      // Merge new ratings with existing ones, preserving wins/losses\n      const updatedRatings = { ...ratings };\n      finalRatings.forEach(({ name, rating }) => {\n        const existingRating = typeof updatedRatings[name] === 'object'\n          ? updatedRatings[name]\n          : { rating: updatedRatings[name] || 1500, wins: 0, losses: 0 };\n\n        // If rating improved, count as a win, otherwise a loss\n        const isImprovement = rating > (existingRating.rating || 1500);\n        updatedRatings[name] = {\n          rating: Math.round(rating),\n          wins: (existingRating.wins || 0) + (isImprovement ? 1 : 0),\n          losses: (existingRating.losses || 0) + (isImprovement ? 0 : 1)\n        };\n      });\n\n      console.log('Fetching name_ids for:', Object.keys(updatedRatings));\n\n      // Get name_ids from name_options table\n      const { data: nameOptions, error: nameError } = await supabase\n        .from('name_options')\n        .select('id, name')\n        .in('name', Object.keys(updatedRatings));\n\n      if (nameError) {\n        console.error('Error fetching name options:', nameError);\n        return;\n      }\n\n      console.log('Retrieved name options:', nameOptions);\n\n      // Create a map of name to name_id\n      const nameToIdMap = nameOptions.reduce((acc, { id, name }) => {\n        acc[name] = id;\n        return acc;\n      }, {});\n\n      // Prepare records for database\n      const recordsToUpsert = Object.entries(updatedRatings)\n        .map(([name, data]) => {\n          const name_id = nameToIdMap[name];\n          if (!name_id) {\n            console.warn(`No name_id found for ${name}`);\n            return null;\n          }\n          return {\n            user_name: userName,\n            name_id,\n            rating: data.rating,\n            wins: data.wins,\n            losses: data.losses,\n            updated_at: new Date().toISOString()\n          };\n        })\n        .filter(Boolean);\n\n      console.log('Prepared records for upsert:', recordsToUpsert);\n\n      if (recordsToUpsert.length > 0) {\n        // Update ratings directly without checking user\n        const { error: upsertError } = await supabase\n          .from('cat_name_ratings')\n          .upsert(recordsToUpsert, {\n            onConflict: 'user_name,name_id',\n            returning: 'minimal'\n          });\n\n        if (upsertError) {\n          console.error('Error updating ratings:', upsertError);\n          return;\n        }\n\n        console.log('Successfully updated ratings');\n      }\n\n      // Update local state\n      setRatings(updatedRatings);\n      setTournamentComplete(true);\n\n    } catch (error) {\n      console.error('Tournament completion error:', error);\n    }\n  };\n\n  const handleStartNewTournament = () => {\n    setTournamentComplete(false);\n    setTournamentNames(null);\n    setView('tournament');\n  };\n\n  const handleTournamentSetup = (names) => {\n    console.log('App - Setting up tournament with names:', names);\n    setTournamentNames(names);\n  };\n\n  // Simplified ratings update logic\n  const handleUpdateRatings = async (adjustedRatings) => {\n    try {\n      // Convert array format to consistent object format\n      const updatedRatings = adjustedRatings.reduce((acc, { name, rating, wins = 0, losses = 0 }) => {\n        acc[name] = {\n          rating: Math.round(rating),\n          wins: wins,\n          losses: losses\n        };\n        return acc;\n      }, {});\n\n      // Get name_ids in a single query\n      const { data: nameOptions, error: nameError } = await supabase\n        .from('name_options')\n        .select('id, name')\n        .in('name', Object.keys(updatedRatings));\n\n      if (nameError) throw nameError;\n\n      // Create records for database update\n      const recordsToUpsert = nameOptions\n        .map(({ id, name }) => ({\n          user_name: userName,\n          name_id: id,\n          rating: updatedRatings[name].rating,\n          wins: updatedRatings[name].wins,\n          losses: updatedRatings[name].losses,\n          updated_at: new Date().toISOString()\n        }));\n\n      if (recordsToUpsert.length === 0) {\n        throw new Error('No valid records to update');\n      }\n\n      // Update database\n      const { error: upsertError } = await supabase\n        .from('cat_name_ratings')\n        .upsert(recordsToUpsert, {\n          onConflict: 'user_name,name_id',\n          returning: 'minimal'\n        });\n\n      if (upsertError) throw upsertError;\n\n      // Update local state\n      setRatings(updatedRatings);\n      return true;\n    } catch (error) {\n      console.error('Error updating ratings:', error);\n      throw error;\n    }\n  };\n\n  const handleLogout = async () => {\n    logout();\n  };\n\n  if (!isLoggedIn) {\n    return <Login onLogin={login} />;\n  }\n\n  const renderMainContent = () => {\n    if (view === 'profile') {\n      return (\n        <Profile \n          userName={userName}\n          onStartNewTournament={handleStartNewTournament}\n          ratings={ratings}\n          onUpdateRatings={handleUpdateRatings}\n        />\n      );\n    }\n\n    if (view === 'suggest') {  // Add this section\n      return <NameSuggestion />;\n    }\n\n    if (tournamentComplete) {\n      return (\n        <Results \n          ratings={ratings}\n          onStartNew={handleStartNewTournament}\n          userName={userName}\n          onUpdateRatings={handleUpdateRatings}\n          currentTournamentNames={tournamentNames}\n        />\n      );\n    }\n\n    if (!tournamentNames) {\n      return (\n        <TournamentSetup \n          onStart={handleTournamentSetup}\n          userName={userName}\n          existingRatings={ratings}\n        />\n      );\n    }\n\n    return (\n      <Tournament \n        names={tournamentNames}\n        existingRatings={ratings}\n        onComplete={handleTournamentComplete}\n        userName={userName}\n      />\n    );\n  };\n\n  return (\n    <div className=\"app\">\n      <header>\n        <div \n          className=\"header-background\"\n          style={{ \n            backgroundImage: `url(${process.env.PUBLIC_URL}/images/cat.gif)` \n          }}\n        ></div>\n        <img src={`${process.env.PUBLIC_URL}/images/cat.gif`} alt=\"Cat animation\" className=\"header-image\" />\n        <h1>Meow Namester</h1>\n        <div className=\"user-controls\">\n          <div className=\"nav-menu\">\n            <button \n              onClick={() => setView('tournament')}\n              className={view === 'tournament' ? 'active' : ''}\n            >\n              Tournament\n            </button>\n            <button \n              onClick={() => setView('profile')}\n              className={view === 'profile' ? 'active' : ''}\n            >\n              My Profile\n            </button>\n            <button \n              onClick={() => setView('suggest')}\n              className={view === 'suggest' ? 'active' : ''}\n            >\n              Suggest Names\n            </button>\n          </div>\n          <span className=\"user-welcome\">Welcome, {userName}!</span>\n          <button onClick={handleLogout} className=\"logout-button\">\n            Logout\n          </button>\n        </div>\n      </header>\n\n      <main>\n        <ErrorBoundary>\n          {renderMainContent()}\n        </ErrorBoundary>\n      </main>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}