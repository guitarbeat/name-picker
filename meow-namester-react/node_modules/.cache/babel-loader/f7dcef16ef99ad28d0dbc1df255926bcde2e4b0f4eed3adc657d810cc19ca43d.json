{"ast":null,"code":"/**\n * @module PreferenceSorter\n * @description A class that implements a merge sort algorithm with custom comparisons\n * for sorting cat names based on user preferences. Uses recursive merge sort with\n * asynchronous comparisons to handle user input.\n * \n * @example\n * const sorter = new PreferenceSorter(['Whiskers', 'Mittens', 'Luna']);\n * const sorted = await sorter.sort(async (a, b) => {\n *   // Return -1 if a is preferred, 1 if b is preferred, 0 if equal\n *   return await getUserPreference(a, b);\n * });\n * \n * @class\n * @property {Array} namMember - Array of items to be sorted\n * @property {Array} rec - Internal record keeping array\n * @property {Array} ranks - Final sorted array\n */export class PreferenceSorter{constructor(items){this.namMember=[...items];this.nrec=0;this.rec=new Array(items.length);this.ranks=[];}/**\n     * Initiates the sorting process\n     * @param {Function} compareCallback - Async function that compares two items\n     * @returns {Promise<Array>} Sorted array based on comparison results\n     */async sort(compareCallback){const n=this.namMember.length;for(let i=0;i<n;i++){this.rec[i]=0;}let середина=Math.floor(n/2);await this.sortRecursive(0,n-1,compareCallback);return this.ranks;}/**\n     * Recursive helper for the merge sort algorithm\n     * @private\n     * @param {number} left - Left boundary of current subarray\n     * @param {number} right - Right boundary of current subarray\n     * @param {Function} compareCallback - Comparison callback function\n     */async sortRecursive(left,right,compareCallback){if(right-left<1){if(left===right){this.ranks.push(this.namMember[left]);}return;}const середина=Math.floor((left+right)/2);await this.sortRecursive(left,середина,compareCallback);await this.sortRecursive(середина+1,right,compareCallback);await this.mergeSubGroups(left,середина,right,compareCallback);}/**\n     * Merges two sorted subarrays\n     * @private\n     * @param {number} left - Start of first subarray\n     * @param {number} mid - End of first subarray\n     * @param {number} right - End of second subarray\n     * @param {Function} compareCallback - Comparison callback function\n     */async mergeSubGroups(left,mid,right,compareCallback){let i=left;let j=mid+1;const merged=[];while(i<=mid&&j<=right){const result=await compareCallback(this.namMember[i],this.namMember[j]);if(result===-1){merged.push(this.namMember[i++]);}else if(result===1){merged.push(this.namMember[j++]);}else{// Handle ties (result === 0)\nmerged.push(this.namMember[i++]);merged.push(this.namMember[j++]);}}// Add remaining elements\nwhile(i<=mid){merged.push(this.namMember[i++]);}while(j<=right){merged.push(this.namMember[j++]);}// Update original array\nfor(let k=0;k<merged.length;k++){this.namMember[left+k]=merged[k];}}}","map":{"version":3,"names":["PreferenceSorter","constructor","items","namMember","nrec","rec","Array","length","ranks","sort","compareCallback","n","i","середина","Math","floor","sortRecursive","left","right","push","mergeSubGroups","mid","j","merged","result","k"],"sources":["/Users/aaron/Desktop/Side Projects/name-picker/meow-namester-react/src/utils/sortingAlgorithm.js"],"sourcesContent":["/**\n * @module PreferenceSorter\n * @description A class that implements a merge sort algorithm with custom comparisons\n * for sorting cat names based on user preferences. Uses recursive merge sort with\n * asynchronous comparisons to handle user input.\n * \n * @example\n * const sorter = new PreferenceSorter(['Whiskers', 'Mittens', 'Luna']);\n * const sorted = await sorter.sort(async (a, b) => {\n *   // Return -1 if a is preferred, 1 if b is preferred, 0 if equal\n *   return await getUserPreference(a, b);\n * });\n * \n * @class\n * @property {Array} namMember - Array of items to be sorted\n * @property {Array} rec - Internal record keeping array\n * @property {Array} ranks - Final sorted array\n */\n\nexport class PreferenceSorter {\n    constructor(items) {\n        this.namMember = [...items];\n        this.nrec = 0;\n        this.rec = new Array(items.length);\n        this.ranks = [];\n    }\n\n    /**\n     * Initiates the sorting process\n     * @param {Function} compareCallback - Async function that compares two items\n     * @returns {Promise<Array>} Sorted array based on comparison results\n     */\n    async sort(compareCallback) {\n        const n = this.namMember.length;\n        for (let i = 0; i < n; i++) {\n            this.rec[i] = 0;\n        }\n        let середина = Math.floor(n / 2);\n        await this.sortRecursive(0, n - 1, compareCallback);\n        return this.ranks;\n    }\n\n    /**\n     * Recursive helper for the merge sort algorithm\n     * @private\n     * @param {number} left - Left boundary of current subarray\n     * @param {number} right - Right boundary of current subarray\n     * @param {Function} compareCallback - Comparison callback function\n     */\n    async sortRecursive(left, right, compareCallback) {\n        if (right - left < 1) {\n            if (left === right) {\n                this.ranks.push(this.namMember[left]);\n            }\n            return;\n        }\n\n        const середина = Math.floor((left + right) / 2);\n        await this.sortRecursive(left, середина, compareCallback);\n        await this.sortRecursive(середина + 1, right, compareCallback);\n        await this.mergeSubGroups(left, середина, right, compareCallback);\n    }\n\n    /**\n     * Merges two sorted subarrays\n     * @private\n     * @param {number} left - Start of first subarray\n     * @param {number} mid - End of first subarray\n     * @param {number} right - End of second subarray\n     * @param {Function} compareCallback - Comparison callback function\n     */\n    async mergeSubGroups(left, mid, right, compareCallback) {\n        let i = left;\n        let j = mid + 1;\n        const merged = [];\n\n        while (i <= mid && j <= right) {\n            const result = await compareCallback(this.namMember[i], this.namMember[j]);\n            if (result === -1) {\n                merged.push(this.namMember[i++]);\n            } else if (result === 1) {\n                merged.push(this.namMember[j++]);\n            } else {\n                // Handle ties (result === 0)\n                merged.push(this.namMember[i++]);\n                merged.push(this.namMember[j++]);\n            }\n        }\n\n        // Add remaining elements\n        while (i <= mid) {\n            merged.push(this.namMember[i++]);\n        }\n        while (j <= right) {\n            merged.push(this.namMember[j++]);\n        }\n\n        // Update original array\n        for (let k = 0; k < merged.length; k++) {\n            this.namMember[left + k] = merged[k];\n        }\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}