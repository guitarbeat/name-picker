{"ast":null,"code":"/**\n * @module PreferenceSorter\n * @description A class that implements a merge sort algorithm with custom comparisons\n * for sorting cat names based on Dak's preferences and selection history.\n */\n\nexport class PreferenceSorter {\n  constructor(items) {\n    // Ensure each item has the required structure\n    this.namMember = items.map(item => {\n      if (typeof item === 'string') {\n        return {\n          name: item,\n          preference_count: 0\n        };\n      }\n      return item;\n    });\n    this.nrec = 0;\n    this.rec = new Array(items.length);\n    this.ranks = [];\n    console.log('PreferenceSorter initialized with items:', this.namMember);\n  }\n  getCurrentRankings() {\n    // If we have completed rankings, return those\n    if (this.ranks.length > 0) {\n      return this.ranks;\n    }\n    // Otherwise, return the current state of namMember\n    return [...this.namMember];\n  }\n  async sort(compareCallback) {\n    console.log('Starting sort process with items:', this.namMember);\n    const n = this.namMember.length;\n    for (let i = 0; i < n; i++) {\n      this.rec[i] = 0;\n    }\n    await this.sortRecursive(0, n - 1, compareCallback);\n    console.log('Sort completed. Final ranks:', this.ranks);\n    return this.ranks;\n  }\n  async sortRecursive(left, right, compareCallback) {\n    if (right - left < 1) {\n      if (left === right) {\n        this.ranks.push(this.namMember[left]);\n        console.log(`Added single item to ranks: ${JSON.stringify(this.namMember[left])}`);\n      }\n      return;\n    }\n    const mid = Math.floor((left + right) / 2);\n    console.log(`Splitting array at indices ${left}-${mid} and ${mid + 1}-${right}`);\n    await this.sortRecursive(left, mid, compareCallback);\n    await this.sortRecursive(mid + 1, right, compareCallback);\n    await this.mergeSubGroups(left, mid, right, compareCallback);\n  }\n  async mergeSubGroups(left, mid, right, compareCallback) {\n    console.log(`Merging subarrays: ${left}-${mid} with ${mid + 1}-${right}`);\n    let i = left;\n    let j = mid + 1;\n    const merged = [];\n    while (i <= mid && j <= right) {\n      const item1 = this.namMember[i];\n      const item2 = this.namMember[j];\n      console.log(`Comparing ${JSON.stringify(item1)} with ${JSON.stringify(item2)}`);\n\n      // Default comparison based on preference_count if no callback provided\n      const result = compareCallback ? await compareCallback(item1, item2) : Math.sign(item2.preference_count - item1.preference_count);\n      console.log(`Comparison result: ${result}`);\n      if (result <= -0.5) {\n        console.log(`${item1.name} preferred over ${item2.name}`);\n        merged.push(this.namMember[i++]);\n      } else if (result >= 0.5) {\n        console.log(`${item2.name} preferred over ${item1.name}`);\n        merged.push(this.namMember[j++]);\n      } else {\n        // Handle near-ties with slight preference to the first item\n        console.log(`Near tie between ${item1.name} and ${item2.name}`);\n        if (result < 0) {\n          merged.push(this.namMember[i++]);\n          merged.push(this.namMember[j++]);\n        } else {\n          merged.push(this.namMember[j++]);\n          merged.push(this.namMember[i++]);\n        }\n      }\n    }\n\n    // Add remaining elements\n    while (i <= mid) {\n      console.log(`Adding remaining left item: ${JSON.stringify(this.namMember[i])}`);\n      merged.push(this.namMember[i++]);\n    }\n    while (j <= right) {\n      console.log(`Adding remaining right item: ${JSON.stringify(this.namMember[j])}`);\n      merged.push(this.namMember[j++]);\n    }\n\n    // Update original array\n    for (let k = 0; k < merged.length; k++) {\n      this.namMember[left + k] = merged[k];\n    }\n\n    // Only update ranks at the final merge\n    if (left === 0 && right === this.namMember.length - 1) {\n      this.ranks = [...merged];\n    }\n    console.log(`Merged result:`, merged);\n  }\n}","map":{"version":3,"names":["PreferenceSorter","constructor","items","namMember","map","item","name","preference_count","nrec","rec","Array","length","ranks","console","log","getCurrentRankings","sort","compareCallback","n","i","sortRecursive","left","right","push","JSON","stringify","mid","Math","floor","mergeSubGroups","j","merged","item1","item2","result","sign","k"],"sources":["/Users/aaron/Desktop/Side Projects/name-picker/meow-namester-react/src/utils/sortingAlgorithm.js"],"sourcesContent":["/**\n * @module PreferenceSorter\n * @description A class that implements a merge sort algorithm with custom comparisons\n * for sorting cat names based on Dak's preferences and selection history.\n */\n\nexport class PreferenceSorter {\n    constructor(items) {\n        // Ensure each item has the required structure\n        this.namMember = items.map(item => {\n            if (typeof item === 'string') {\n                return { name: item, preference_count: 0 };\n            }\n            return item;\n        });\n        this.nrec = 0;\n        this.rec = new Array(items.length);\n        this.ranks = [];\n        console.log('PreferenceSorter initialized with items:', this.namMember);\n    }\n\n    getCurrentRankings() {\n        // If we have completed rankings, return those\n        if (this.ranks.length > 0) {\n            return this.ranks;\n        }\n        // Otherwise, return the current state of namMember\n        return [...this.namMember];\n    }\n\n    async sort(compareCallback) {\n        console.log('Starting sort process with items:', this.namMember);\n        const n = this.namMember.length;\n        for (let i = 0; i < n; i++) {\n            this.rec[i] = 0;\n        }\n        await this.sortRecursive(0, n - 1, compareCallback);\n        console.log('Sort completed. Final ranks:', this.ranks);\n        return this.ranks;\n    }\n\n    async sortRecursive(left, right, compareCallback) {\n        if (right - left < 1) {\n            if (left === right) {\n                this.ranks.push(this.namMember[left]);\n                console.log(`Added single item to ranks: ${JSON.stringify(this.namMember[left])}`);\n            }\n            return;\n        }\n\n        const mid = Math.floor((left + right) / 2);\n        console.log(`Splitting array at indices ${left}-${mid} and ${mid + 1}-${right}`);\n        await this.sortRecursive(left, mid, compareCallback);\n        await this.sortRecursive(mid + 1, right, compareCallback);\n        await this.mergeSubGroups(left, mid, right, compareCallback);\n    }\n\n    async mergeSubGroups(left, mid, right, compareCallback) {\n        console.log(`Merging subarrays: ${left}-${mid} with ${mid + 1}-${right}`);\n        let i = left;\n        let j = mid + 1;\n        const merged = [];\n\n        while (i <= mid && j <= right) {\n            const item1 = this.namMember[i];\n            const item2 = this.namMember[j];\n            console.log(`Comparing ${JSON.stringify(item1)} with ${JSON.stringify(item2)}`);\n\n            // Default comparison based on preference_count if no callback provided\n            const result = compareCallback ? \n                await compareCallback(item1, item2) : \n                Math.sign(item2.preference_count - item1.preference_count);\n            \n            console.log(`Comparison result: ${result}`);\n\n            if (result <= -0.5) {\n                console.log(`${item1.name} preferred over ${item2.name}`);\n                merged.push(this.namMember[i++]);\n            } else if (result >= 0.5) {\n                console.log(`${item2.name} preferred over ${item1.name}`);\n                merged.push(this.namMember[j++]);\n            } else {\n                // Handle near-ties with slight preference to the first item\n                console.log(`Near tie between ${item1.name} and ${item2.name}`);\n                if (result < 0) {\n                    merged.push(this.namMember[i++]);\n                    merged.push(this.namMember[j++]);\n                } else {\n                    merged.push(this.namMember[j++]);\n                    merged.push(this.namMember[i++]);\n                }\n            }\n        }\n\n        // Add remaining elements\n        while (i <= mid) {\n            console.log(`Adding remaining left item: ${JSON.stringify(this.namMember[i])}`);\n            merged.push(this.namMember[i++]);\n        }\n        while (j <= right) {\n            console.log(`Adding remaining right item: ${JSON.stringify(this.namMember[j])}`);\n            merged.push(this.namMember[j++]);\n        }\n\n        // Update original array\n        for (let k = 0; k < merged.length; k++) {\n            this.namMember[left + k] = merged[k];\n        }\n\n        // Only update ranks at the final merge\n        if (left === 0 && right === this.namMember.length - 1) {\n            this.ranks = [...merged];\n        }\n\n        console.log(`Merged result:`, merged);\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}