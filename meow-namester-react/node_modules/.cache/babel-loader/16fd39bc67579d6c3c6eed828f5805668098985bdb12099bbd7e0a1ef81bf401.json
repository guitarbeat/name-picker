{"ast":null,"code":"var _s = $RefreshSig$();\n/**\n * @module useUserSession\n * @description A custom React hook that manages user session state and authentication.\n * Handles user login/logout and persists user data in both localStorage and Supabase.\n * \n * @example\n * // Using the hook in a component\n * const { userName, isLoggedIn, error, login, logout } = useUserSession();\n * \n * // Login a user\n * await login('JohnDoe');\n * \n * // Logout\n * await logout();\n * \n * @returns {Object} Session management object\n * @property {string} userName - Current user's username\n * @property {boolean} isLoggedIn - Whether a user is currently logged in\n * @property {string|null} error - Any error message from login/logout operations\n * @property {Function} login - Async function to log in a user\n * @property {Function} logout - Async function to log out the current user\n */\n\nimport { useState, useEffect, useCallback } from 'react';\nimport { supabase } from '../supabase/supabaseClient';\nfunction useUserSession() {\n  _s();\n  const [userName, setUserName] = useState('');\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [error, setError] = useState(null);\n  const [tournamentProgress, setTournamentProgress] = useState(null);\n  useEffect(() => {\n    const storedUser = localStorage.getItem('catNamesUser');\n    if (storedUser) {\n      setUserName(storedUser);\n      setIsLoggedIn(true);\n      // Load saved tournament progress\n      loadTournamentProgress(storedUser);\n    }\n  }, []);\n  const loadTournamentProgress = async user => {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from('tournament_progress').select('*').eq('user_name', user).single();\n      if (error) throw error;\n      if (data) {\n        setTournamentProgress(data);\n        localStorage.setItem('tournamentProgress', JSON.stringify(data));\n      }\n    } catch (err) {\n      console.error('Error loading tournament progress:', err);\n    }\n  };\n  const saveTournamentProgress = useCallback(async progress => {\n    if (!isLoggedIn || !userName) return;\n    try {\n      const {\n        error\n      } = await supabase.from('tournament_progress').upsert({\n        user_name: userName,\n        round_number: progress.roundNumber,\n        current_match: progress.currentMatch,\n        total_matches: progress.totalMatches,\n        names: progress.names,\n        sorter_state: progress.sorterState,\n        updated_at: new Date().toISOString()\n      }, {\n        onConflict: 'user_name',\n        returning: 'minimal'\n      });\n      if (error) throw error;\n      setTournamentProgress(progress);\n      localStorage.setItem('tournamentProgress', JSON.stringify(progress));\n    } catch (err) {\n      console.error('Error saving tournament progress:', err);\n    }\n  }, [isLoggedIn, userName]);\n  const clearTournamentProgress = useCallback(async () => {\n    if (!isLoggedIn || !userName) return;\n    try {\n      const {\n        error\n      } = await supabase.from('tournament_progress').delete().eq('user_name', userName);\n      if (error) throw error;\n      setTournamentProgress(null);\n      localStorage.removeItem('tournamentProgress');\n    } catch (err) {\n      console.error('Error clearing tournament progress:', err);\n    }\n  }, [isLoggedIn, userName]);\n\n  /**\n   * Logs in a user with the given name\n   * @param {string} name - The username to login with\n   * @throws {Error} If the name is invalid or if there's a database error\n   */\n  const login = async name => {\n    try {\n      if (!name || typeof name !== 'string' || name.trim() === '') {\n        throw new Error('Please enter a valid name');\n      }\n      const trimmedName = name.trim();\n\n      // Try to create user in app_users table\n      const {\n        error: upsertError\n      } = await supabase.from('app_users').upsert({\n        user_name: trimmedName\n      }, {\n        onConflict: 'user_name'\n      });\n      if (upsertError) throw upsertError;\n      localStorage.setItem('catNamesUser', trimmedName);\n      setUserName(trimmedName);\n      setIsLoggedIn(true);\n      setError(null);\n\n      // Load any saved progress\n      await loadTournamentProgress(trimmedName);\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    }\n  };\n\n  /**\n   * Logs out the current user\n   * Clears local storage and resets session state\n   */\n  const logout = async () => {\n    await clearTournamentProgress();\n    localStorage.removeItem('catNamesUser');\n    localStorage.removeItem('tournamentProgress');\n    setUserName('');\n    setIsLoggedIn(false);\n    setError(null);\n    setTournamentProgress(null);\n  };\n  return {\n    userName,\n    isLoggedIn,\n    error,\n    login,\n    logout,\n    tournamentProgress,\n    saveTournamentProgress,\n    clearTournamentProgress\n  };\n}\n_s(useUserSession, \"HvmeHQpvPIi+dOLJmSYwZ1n7jhw=\");\nexport default useUserSession;","map":{"version":3,"names":["useState","useEffect","useCallback","supabase","useUserSession","_s","userName","setUserName","isLoggedIn","setIsLoggedIn","error","setError","tournamentProgress","setTournamentProgress","storedUser","localStorage","getItem","loadTournamentProgress","user","data","from","select","eq","single","setItem","JSON","stringify","err","console","saveTournamentProgress","progress","upsert","user_name","round_number","roundNumber","current_match","currentMatch","total_matches","totalMatches","names","sorter_state","sorterState","updated_at","Date","toISOString","onConflict","returning","clearTournamentProgress","delete","removeItem","login","name","trim","Error","trimmedName","upsertError","message","logout"],"sources":["/Users/aaron/Desktop/Side Projects/name-picker/meow-namester-react/src/hooks/useUserSession.js"],"sourcesContent":["/**\n * @module useUserSession\n * @description A custom React hook that manages user session state and authentication.\n * Handles user login/logout and persists user data in both localStorage and Supabase.\n * \n * @example\n * // Using the hook in a component\n * const { userName, isLoggedIn, error, login, logout } = useUserSession();\n * \n * // Login a user\n * await login('JohnDoe');\n * \n * // Logout\n * await logout();\n * \n * @returns {Object} Session management object\n * @property {string} userName - Current user's username\n * @property {boolean} isLoggedIn - Whether a user is currently logged in\n * @property {string|null} error - Any error message from login/logout operations\n * @property {Function} login - Async function to log in a user\n * @property {Function} logout - Async function to log out the current user\n */\n\nimport { useState, useEffect, useCallback } from 'react';\nimport { supabase } from '../supabase/supabaseClient';\n\nfunction useUserSession() {\n  const [userName, setUserName] = useState('');\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [error, setError] = useState(null);\n  const [tournamentProgress, setTournamentProgress] = useState(null);\n\n  useEffect(() => {\n    const storedUser = localStorage.getItem('catNamesUser');\n    if (storedUser) {\n      setUserName(storedUser);\n      setIsLoggedIn(true);\n      // Load saved tournament progress\n      loadTournamentProgress(storedUser);\n    }\n  }, []);\n\n  const loadTournamentProgress = async (user) => {\n    try {\n      const { data, error } = await supabase\n        .from('tournament_progress')\n        .select('*')\n        .eq('user_name', user)\n        .single();\n\n      if (error) throw error;\n      if (data) {\n        setTournamentProgress(data);\n        localStorage.setItem('tournamentProgress', JSON.stringify(data));\n      }\n    } catch (err) {\n      console.error('Error loading tournament progress:', err);\n    }\n  };\n\n  const saveTournamentProgress = useCallback(async (progress) => {\n    if (!isLoggedIn || !userName) return;\n\n    try {\n      const { error } = await supabase\n        .from('tournament_progress')\n        .upsert({\n          user_name: userName,\n          round_number: progress.roundNumber,\n          current_match: progress.currentMatch,\n          total_matches: progress.totalMatches,\n          names: progress.names,\n          sorter_state: progress.sorterState,\n          updated_at: new Date().toISOString()\n        }, {\n          onConflict: 'user_name',\n          returning: 'minimal'\n        });\n\n      if (error) throw error;\n\n      setTournamentProgress(progress);\n      localStorage.setItem('tournamentProgress', JSON.stringify(progress));\n    } catch (err) {\n      console.error('Error saving tournament progress:', err);\n    }\n  }, [isLoggedIn, userName]);\n\n  const clearTournamentProgress = useCallback(async () => {\n    if (!isLoggedIn || !userName) return;\n\n    try {\n      const { error } = await supabase\n        .from('tournament_progress')\n        .delete()\n        .eq('user_name', userName);\n\n      if (error) throw error;\n\n      setTournamentProgress(null);\n      localStorage.removeItem('tournamentProgress');\n    } catch (err) {\n      console.error('Error clearing tournament progress:', err);\n    }\n  }, [isLoggedIn, userName]);\n\n  /**\n   * Logs in a user with the given name\n   * @param {string} name - The username to login with\n   * @throws {Error} If the name is invalid or if there's a database error\n   */\n  const login = async (name) => {\n    try {\n      if (!name || typeof name !== 'string' || name.trim() === '') {\n        throw new Error('Please enter a valid name');\n      }\n      \n      const trimmedName = name.trim();\n      \n      // Try to create user in app_users table\n      const { error: upsertError } = await supabase\n        .from('app_users')\n        .upsert({ \n          user_name: trimmedName,\n        }, {\n          onConflict: 'user_name'\n        });\n\n      if (upsertError) throw upsertError;\n\n      localStorage.setItem('catNamesUser', trimmedName);\n      setUserName(trimmedName);\n      setIsLoggedIn(true);\n      setError(null);\n\n      // Load any saved progress\n      await loadTournamentProgress(trimmedName);\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    }\n  };\n\n  /**\n   * Logs out the current user\n   * Clears local storage and resets session state\n   */\n  const logout = async () => {\n    await clearTournamentProgress();\n    localStorage.removeItem('catNamesUser');\n    localStorage.removeItem('tournamentProgress');\n    setUserName('');\n    setIsLoggedIn(false);\n    setError(null);\n    setTournamentProgress(null);\n  };\n\n  return {\n    userName,\n    isLoggedIn,\n    error,\n    login,\n    logout,\n    tournamentProgress,\n    saveTournamentProgress,\n    clearTournamentProgress\n  };\n}\n\nexport default useUserSession; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}