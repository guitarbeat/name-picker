{"ast":null,"code":"/**\n * @module EloRating\n * @description A class that implements the Elo rating system for ranking cat names.\n * Used to calculate and update ratings based on head-to-head comparisons.\n * \n * @example\n * const elo = new EloRating();\n * const { newRatingA, newRatingB } = elo.calculateNewRatings(1400, 1400, 'left');\n * \n * @class\n * @property {number} defaultRating - Default rating for new names (default: 1400)\n * @property {number} kFactor - Factor affecting rating changes (default: 32)\n */class EloRating{constructor(){let defaultRating=arguments.length>0&&arguments[0]!==undefined?arguments[0]:1400;let kFactor=arguments.length>1&&arguments[1]!==undefined?arguments[1]:32;this.defaultRating=defaultRating;this.kFactor=kFactor;}/**\n   * Calculates the expected score for a matchup\n   * @param {number} ratingA - Rating of first name\n   * @param {number} ratingB - Rating of second name\n   * @returns {number} Expected score between 0 and 1\n   */getExpectedScore(ratingA,ratingB){return 1/(1+Math.pow(10,(ratingB-ratingA)/400));}/**\n   * Updates a rating based on expected and actual scores\n   * @param {number} rating - Current rating\n   * @param {number} expected - Expected score\n   * @param {number} actual - Actual score\n   * @returns {number} New rating\n   */updateRating(rating,expected,actual){return Math.round(rating+this.kFactor*(actual-expected));}/**\n   * Calculates new ratings for both names after a comparison\n   * @param {number} ratingA - Rating of first name\n   * @param {number} ratingB - Rating of second name\n   * @param {string} outcome - Result ('left', 'right', or other for tie)\n   * @returns {Object} Object containing new ratings for both names\n   */calculateNewRatings(ratingA,ratingB,outcome){const expectedA=this.getExpectedScore(ratingA,ratingB);const expectedB=this.getExpectedScore(ratingB,ratingA);let actualA,actualB;switch(outcome){case'left':// A wins\nactualA=1;actualB=0;break;case'right':// B wins\nactualA=0;actualB=1;break;default:// tie\nactualA=0.5;actualB=0.5;}return{newRatingA:this.updateRating(ratingA,expectedA,actualA),newRatingB:this.updateRating(ratingB,expectedB,actualB)};}}export default EloRating;","map":{"version":3,"names":["EloRating","constructor","defaultRating","arguments","length","undefined","kFactor","getExpectedScore","ratingA","ratingB","Math","pow","updateRating","rating","expected","actual","round","calculateNewRatings","outcome","expectedA","expectedB","actualA","actualB","newRatingA","newRatingB"],"sources":["/Users/aaron/Desktop/Side Projects/name-picker/meow-namester-react/src/utils/EloRating.js"],"sourcesContent":["/**\n * @module EloRating\n * @description A class that implements the Elo rating system for ranking cat names.\n * Used to calculate and update ratings based on head-to-head comparisons.\n * \n * @example\n * const elo = new EloRating();\n * const { newRatingA, newRatingB } = elo.calculateNewRatings(1400, 1400, 'left');\n * \n * @class\n * @property {number} defaultRating - Default rating for new names (default: 1400)\n * @property {number} kFactor - Factor affecting rating changes (default: 32)\n */\n\nclass EloRating {\n  constructor(defaultRating = 1400, kFactor = 32) {\n    this.defaultRating = defaultRating;\n    this.kFactor = kFactor;\n  }\n\n  /**\n   * Calculates the expected score for a matchup\n   * @param {number} ratingA - Rating of first name\n   * @param {number} ratingB - Rating of second name\n   * @returns {number} Expected score between 0 and 1\n   */\n  getExpectedScore(ratingA, ratingB) {\n    return 1 / (1 + Math.pow(10, (ratingB - ratingA) / 400));\n  }\n\n  /**\n   * Updates a rating based on expected and actual scores\n   * @param {number} rating - Current rating\n   * @param {number} expected - Expected score\n   * @param {number} actual - Actual score\n   * @returns {number} New rating\n   */\n  updateRating(rating, expected, actual) {\n    return Math.round(rating + this.kFactor * (actual - expected));\n  }\n\n  /**\n   * Calculates new ratings for both names after a comparison\n   * @param {number} ratingA - Rating of first name\n   * @param {number} ratingB - Rating of second name\n   * @param {string} outcome - Result ('left', 'right', or other for tie)\n   * @returns {Object} Object containing new ratings for both names\n   */\n  calculateNewRatings(ratingA, ratingB, outcome) {\n    const expectedA = this.getExpectedScore(ratingA, ratingB);\n    const expectedB = this.getExpectedScore(ratingB, ratingA);\n    \n    let actualA, actualB;\n    switch(outcome) {\n      case 'left': // A wins\n        actualA = 1;\n        actualB = 0;\n        break;\n      case 'right': // B wins\n        actualA = 0;\n        actualB = 1;\n        break;\n      default: // tie\n        actualA = 0.5;\n        actualB = 0.5;\n    }\n\n    return {\n      newRatingA: this.updateRating(ratingA, expectedA, actualA),\n      newRatingB: this.updateRating(ratingB, expectedB, actualB)\n    };\n  }\n}\n\nexport default EloRating;"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAEA,KAAM,CAAAA,SAAU,CACdC,WAAWA,CAAA,CAAqC,IAApC,CAAAC,aAAa,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,IAAI,IAAE,CAAAG,OAAO,CAAAH,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,EAAE,CAC5C,IAAI,CAACD,aAAa,CAAGA,aAAa,CAClC,IAAI,CAACI,OAAO,CAAGA,OAAO,CACxB,CAEA;AACF;AACA;AACA;AACA;AACA,KACEC,gBAAgBA,CAACC,OAAO,CAAEC,OAAO,CAAE,CACjC,MAAO,EAAC,EAAI,CAAC,CAAGC,IAAI,CAACC,GAAG,CAAC,EAAE,CAAE,CAACF,OAAO,CAAGD,OAAO,EAAI,GAAG,CAAC,CAAC,CAC1D,CAEA;AACF;AACA;AACA;AACA;AACA;AACA,KACEI,YAAYA,CAACC,MAAM,CAAEC,QAAQ,CAAEC,MAAM,CAAE,CACrC,MAAO,CAAAL,IAAI,CAACM,KAAK,CAACH,MAAM,CAAG,IAAI,CAACP,OAAO,EAAIS,MAAM,CAAGD,QAAQ,CAAC,CAAC,CAChE,CAEA;AACF;AACA;AACA;AACA;AACA;AACA,KACEG,mBAAmBA,CAACT,OAAO,CAAEC,OAAO,CAAES,OAAO,CAAE,CAC7C,KAAM,CAAAC,SAAS,CAAG,IAAI,CAACZ,gBAAgB,CAACC,OAAO,CAAEC,OAAO,CAAC,CACzD,KAAM,CAAAW,SAAS,CAAG,IAAI,CAACb,gBAAgB,CAACE,OAAO,CAAED,OAAO,CAAC,CAEzD,GAAI,CAAAa,OAAO,CAAEC,OAAO,CACpB,OAAOJ,OAAO,EACZ,IAAK,MAAM,CAAE;AACXG,OAAO,CAAG,CAAC,CACXC,OAAO,CAAG,CAAC,CACX,MACF,IAAK,OAAO,CAAE;AACZD,OAAO,CAAG,CAAC,CACXC,OAAO,CAAG,CAAC,CACX,MACF,QAAS;AACPD,OAAO,CAAG,GAAG,CACbC,OAAO,CAAG,GAAG,CACjB,CAEA,MAAO,CACLC,UAAU,CAAE,IAAI,CAACX,YAAY,CAACJ,OAAO,CAAEW,SAAS,CAAEE,OAAO,CAAC,CAC1DG,UAAU,CAAE,IAAI,CAACZ,YAAY,CAACH,OAAO,CAAEW,SAAS,CAAEE,OAAO,CAC3D,CAAC,CACH,CACF,CAEA,cAAe,CAAAtB,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}