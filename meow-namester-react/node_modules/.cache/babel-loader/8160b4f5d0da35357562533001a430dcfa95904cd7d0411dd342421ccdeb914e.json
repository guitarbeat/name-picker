{"ast":null,"code":"/**\n * @module supabaseClient\n * @description Configures and exports the Supabase client instance.\n * Sets up the connection to Supabase with proper authentication and headers.\n * \n * @example\n * // Import and use the client\n * import { supabase } from './supabaseClient';\n * \n * // Make a query\n * const { data, error } = await supabase\n *   .from('table_name')\n *   .select('*');\n * \n * @requires REACT_APP_SUPABASE_URL - Environment variable for Supabase project URL\n * @requires REACT_APP_SUPABASE_ANON_KEY - Environment variable for Supabase anonymous key\n */\n\nimport { createClient } from '@supabase/supabase-js';\nconst supabaseUrl = process.env.REACT_APP_SUPABASE_URL;\nconst supabaseAnonKey = process.env.REACT_APP_SUPABASE_ANON_KEY;\nif (!supabaseUrl || !supabaseAnonKey) {\n  throw new Error('Missing Supabase environment variables. Please check your .env file.');\n}\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey);\n\n// Add this function to get names with descriptions\nexport const getNamesWithDescriptions = async () => {\n  try {\n    console.log('Fetching names with hidden names excluded...');\n\n    // First get hidden names for debugging\n    const {\n      data: hiddenNames\n    } = await supabase.from('hidden_names').select('name_id');\n    console.log('Hidden name IDs:', hiddenNames);\n    const {\n      data,\n      error\n    } = await supabase.from('name_options').select(`\n        id,\n        name,\n        description\n      `).not('id', 'in', supabase.from('hidden_names').select('name_id'));\n    if (error) throw error;\n    console.log('Fetched names:', data);\n    return data || [];\n  } catch (error) {\n    console.error('Error fetching names:', error);\n    throw error;\n  }\n};\n\n// Add this function to track rating history\nexport const addRatingHistory = async (userName, nameId, oldRating, newRating) => {\n  try {\n    const {\n      error\n    } = await supabase.from('rating_history').insert({\n      user_name: userName,\n      name_id: nameId,\n      old_rating: oldRating,\n      new_rating: newRating,\n      timestamp: new Date().toISOString()\n    });\n    if (error) throw error;\n  } catch (error) {\n    console.error('Error saving rating history:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["createClient","supabaseUrl","process","env","REACT_APP_SUPABASE_URL","supabaseAnonKey","REACT_APP_SUPABASE_ANON_KEY","Error","supabase","getNamesWithDescriptions","console","log","data","hiddenNames","from","select","error","not","addRatingHistory","userName","nameId","oldRating","newRating","insert","user_name","name_id","old_rating","new_rating","timestamp","Date","toISOString"],"sources":["/Users/aaron/Desktop/Side Projects/name-picker/meow-namester-react/src/supabase/supabaseClient.js"],"sourcesContent":["/**\n * @module supabaseClient\n * @description Configures and exports the Supabase client instance.\n * Sets up the connection to Supabase with proper authentication and headers.\n * \n * @example\n * // Import and use the client\n * import { supabase } from './supabaseClient';\n * \n * // Make a query\n * const { data, error } = await supabase\n *   .from('table_name')\n *   .select('*');\n * \n * @requires REACT_APP_SUPABASE_URL - Environment variable for Supabase project URL\n * @requires REACT_APP_SUPABASE_ANON_KEY - Environment variable for Supabase anonymous key\n */\n\nimport { createClient } from '@supabase/supabase-js';\n\nconst supabaseUrl = process.env.REACT_APP_SUPABASE_URL;\nconst supabaseAnonKey = process.env.REACT_APP_SUPABASE_ANON_KEY;\n\nif (!supabaseUrl || !supabaseAnonKey) {\n  throw new Error('Missing Supabase environment variables. Please check your .env file.');\n}\n\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey);\n\n// Add this function to get names with descriptions\nexport const getNamesWithDescriptions = async () => {\n  try {\n    console.log('Fetching names with hidden names excluded...');\n    \n    // First get hidden names for debugging\n    const { data: hiddenNames } = await supabase\n      .from('hidden_names')\n      .select('name_id');\n    \n    console.log('Hidden name IDs:', hiddenNames);\n\n    const { data, error } = await supabase\n      .from('name_options')\n      .select(`\n        id,\n        name,\n        description\n      `)\n      .not('id', 'in', (\n        supabase\n          .from('hidden_names')\n          .select('name_id')\n      ));\n\n    if (error) throw error;\n    console.log('Fetched names:', data);\n    return data || [];\n  } catch (error) {\n    console.error('Error fetching names:', error);\n    throw error;\n  }\n};\n\n// Add this function to track rating history\nexport const addRatingHistory = async (userName, nameId, oldRating, newRating) => {\n  try {\n    const { error } = await supabase\n      .from('rating_history')\n      .insert({\n        user_name: userName,\n        name_id: nameId,\n        old_rating: oldRating,\n        new_rating: newRating,\n        timestamp: new Date().toISOString()\n      });\n      \n    if (error) throw error;\n  } catch (error) {\n    console.error('Error saving rating history:', error);\n    throw error;\n  }\n};"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,YAAY,QAAQ,uBAAuB;AAEpD,MAAMC,WAAW,GAAGC,OAAO,CAACC,GAAG,CAACC,sBAAsB;AACtD,MAAMC,eAAe,GAAGH,OAAO,CAACC,GAAG,CAACG,2BAA2B;AAE/D,IAAI,CAACL,WAAW,IAAI,CAACI,eAAe,EAAE;EACpC,MAAM,IAAIE,KAAK,CAAC,sEAAsE,CAAC;AACzF;AAEA,OAAO,MAAMC,QAAQ,GAAGR,YAAY,CAACC,WAAW,EAAEI,eAAe,CAAC;;AAElE;AACA,OAAO,MAAMI,wBAAwB,GAAG,MAAAA,CAAA,KAAY;EAClD,IAAI;IACFC,OAAO,CAACC,GAAG,CAAC,8CAA8C,CAAC;;IAE3D;IACA,MAAM;MAAEC,IAAI,EAAEC;IAAY,CAAC,GAAG,MAAML,QAAQ,CACzCM,IAAI,CAAC,cAAc,CAAC,CACpBC,MAAM,CAAC,SAAS,CAAC;IAEpBL,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEE,WAAW,CAAC;IAE5C,MAAM;MAAED,IAAI;MAAEI;IAAM,CAAC,GAAG,MAAMR,QAAQ,CACnCM,IAAI,CAAC,cAAc,CAAC,CACpBC,MAAM,CAAC;AACd;AACA;AACA;AACA,OAAO,CAAC,CACDE,GAAG,CAAC,IAAI,EAAE,IAAI,EACbT,QAAQ,CACLM,IAAI,CAAC,cAAc,CAAC,CACpBC,MAAM,CAAC,SAAS,CACpB,CAAC;IAEJ,IAAIC,KAAK,EAAE,MAAMA,KAAK;IACtBN,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEC,IAAI,CAAC;IACnC,OAAOA,IAAI,IAAI,EAAE;EACnB,CAAC,CAAC,OAAOI,KAAK,EAAE;IACdN,OAAO,CAACM,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC7C,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAME,gBAAgB,GAAG,MAAAA,CAAOC,QAAQ,EAAEC,MAAM,EAAEC,SAAS,EAAEC,SAAS,KAAK;EAChF,IAAI;IACF,MAAM;MAAEN;IAAM,CAAC,GAAG,MAAMR,QAAQ,CAC7BM,IAAI,CAAC,gBAAgB,CAAC,CACtBS,MAAM,CAAC;MACNC,SAAS,EAAEL,QAAQ;MACnBM,OAAO,EAAEL,MAAM;MACfM,UAAU,EAAEL,SAAS;MACrBM,UAAU,EAAEL,SAAS;MACrBM,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;IACpC,CAAC,CAAC;IAEJ,IAAId,KAAK,EAAE,MAAMA,KAAK;EACxB,CAAC,CAAC,OAAOA,KAAK,EAAE;IACdN,OAAO,CAACM,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACpD,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}